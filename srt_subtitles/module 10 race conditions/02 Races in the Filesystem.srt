1
00:00:01,133 --> 00:00:02,266
你好黑客
hello hackers

2
00:00:02,200 --> 00:00:06,000
欢迎回到pwn学院的竞争条件模块
welcome back to the race conditions module of pwn College

3
00:00:06,066 --> 00:00:08,999
我是Yan，在这个视频中我们将要谈论
I'm Yan and in this video we'll be talking about

4
00:00:09,266 --> 00:00:11,933
文件系统中的竞争
races in the file system

5
00:00:12,400 --> 00:00:18,566
这是竞态条件的特例
right this is a kind of special case of race conditions

6
00:00:18,833 --> 00:00:25,699
或者利用特定竞争条件的策略
 or the strategy of exploiting particular race conditions

7
00:00:25,733 --> 00:00:26,799
如果你还记得
if you recall

8
00:00:27,300 --> 00:00:31,066
攻击者利用竞争条件的方法是
an attacker exploits a race condition by changing 

9
00:00:31,366 --> 00:00:34,499
修改程序期望的运行状态
the state that a program expects to be functioning in

10
00:00:36,100 --> 00:00:42,600
即在程序使用和修改此状态之间的运行状态
between the time the program makes use of this state and the time it modifies this state 

11
00:00:42,733 --> 00:00:43,199
好的
right

12
00:00:43,200 --> 00:00:47,100
程序对状态的了解
so some assumption made by the program about the state

13
00:00:47,933 --> 00:00:49,366
不准确了
ceases to be true

14
00:00:50,000 --> 00:00:52,333
因为攻击者改变了它
because the attacker changed it

15
00:00:52,600 --> 00:00:56,300
要想利用竞争条件
right and so to exploit the race condition

16
00:00:56,500 --> 00:01:00,500
如果程序有不安全假设
if there's a kind of unsafe assumption made by the program

17
00:01:00,600 --> 00:01:07,600
攻击者需要能够影响环境或程序状态
the attacker needs to be able to impact the environment or the the state of a program

18
00:01:10,000 --> 00:01:12,966
一个常见的例子就是文件系统
a common case of this is the file system

19
00:01:13,200 --> 00:01:19,100
文件系统是共享资源
now of course a file system is a shared resource

20
00:01:19,100 --> 00:01:21,800
通常
and oftentimes as an attacker

21
00:01:21,866 --> 00:01:24,466
攻击者可以访问部分文件系统
you would have access to parts of the file system

22
00:01:24,600 --> 00:01:30,000
且漏洞程序默认它不会被篡改
that the victim program assumes aren't being maliciously modified

23
00:01:30,066 --> 00:01:30,999
让我们来看一看
let's take a look

24
00:01:31,466 --> 00:01:33,933
这是一个示例程序
all right here's an example program 

25
00:01:35,200 --> 00:01:38,800
这个程序创建了一个shell脚本
this program writes a

26
00:01:39,266 --> 00:01:43,266
它会输出 safe 字符串
script that basically just echoes safe

27
00:01:43,266 --> 00:01:45,599
然后程序执行了这个脚本
and then it execl that script

28
00:01:45,900 --> 00:01:48,200
一个非常简单的小程序
a very small simple program

29
00:01:49,100 --> 00:01:51,566
但这个程序存在严重漏洞
but this program is extremely vulnerable

30
00:01:51,600 --> 00:01:57,366
因为在创建脚本
because in between this when the file is created 

31
00:01:57,900 --> 00:02:03,166
和 sh 执行脚本之间
and after /bin/sh starts up and begins to execute it

32
00:02:03,500 --> 00:02:05,933
任何事情都可能发生在这个文件上
anything could happen to that file for example

33
00:02:06,500 --> 00:02:13,200
它可能被攻击者替换掉
it might be replaced by any attacker that has access to do so alright

34
00:02:13,400 --> 00:02:19,766
实际利用一下，来看看效果
let's take a look at how this might work by exploiting it actually 

35
00:02:20,066 --> 00:02:24,499
清空一下窗口
let's clear out all of these windows

36
00:02:24,533 --> 00:02:26,299
好的，太棒了
okay awesome so

37
00:02:26,666 --> 00:02:31,133
拷贝源代码到这个文件中
I copy that source code into this file here basically

38
00:02:32,700 --> 00:02:34,200
非常简单的程序
very simple program again

39
00:02:34,333 --> 00:02:37,566
它只是
all it does opens the

40
00:02:39,566 --> 00:02:41,599
打开在命令行指定的文件
file that we give on the command line

41
00:02:42,500 --> 00:02:45,333
写入shell脚本，然后执行
writes a shell script to it and executes it

42
00:02:45,333 --> 00:02:46,299
启动它
if we run it

43
00:02:47,766 --> 00:02:49,666
并指定一个asdf的文件
and give it an ASDF file

44
00:02:50,333 --> 00:02:53,199
它会打印出safe
it'll print out safe alright

45
00:02:53,400 --> 00:02:57,033
我们如何利用这个呢
so how do we exploit this

46
00:02:57,266 --> 00:02:57,933
很明显
well obviously

47
00:02:58,500 --> 00:02:59,900
说很明显，有点夸张
I mean obviously bit of

48
00:03:00,000 --> 00:03:10,000
在创建和执行脚本之间替换脚本
exploit this by replacing this file between the time it's created and the time it's executed

49
00:03:11,500 --> 00:03:14,600
程序假定了这个文件此时不会被修改
the program of course is written to assume that this file does not change

50
00:03:15,333 --> 00:03:17,066
但是是可以的
but this file can change

51
00:03:17,500 --> 00:03:18,333
我们看一下
let's take a look

52
00:03:18,533 --> 00:03:19,766
好的
alright so

53
00:03:22,500 --> 00:03:25,500
我在其它窗口执行了这个命令
I must be running the command somewhere in a different window

54
00:03:25,566 --> 00:03:28,299
等一下，我找一下给它关了
one second let me find it and stop it

55
00:03:29,200 --> 00:03:31,733
真是，抱歉了
yep I am sorry about that

56
00:03:31,800 --> 00:03:32,600
好的
alright

57
00:03:33,400 --> 00:03:37,100
运行程序
so we run the program 

58
00:03:37,200 --> 00:03:40,133
它创建了asdf文件
it creates this asdf file

59
00:03:41,000 --> 00:03:44,400
内容包含指定/bin/sh，和输出safe
says that  /bin/sh and then echo safe

60
00:03:44,400 --> 00:03:46,366
当执行它时
and then when it executes it of course

61
00:03:46,733 --> 00:03:49,766
会打印出safe
it prints out safe and that's what it does all right

62
00:03:50,466 --> 00:03:51,266
嗯
um

63
00:03:52,733 --> 00:03:55,599
那么如果
so what happens if

64
00:03:55,800 --> 00:04:05,300
我们频繁的用输出flag的脚本替换asdf
we just try as often as possible to replace that file with a file that cats our flag

65
00:04:05,366 --> 00:04:07,299
这儿有一个catflag脚本
so we have this cat flag script

66
00:04:08,966 --> 00:04:10,799
好的，内容是cat /flag
alright cat /flag

67
00:04:11,000 --> 00:04:12,300
我们要做的是
and what we're going to do is 

68
00:04:12,533 --> 00:04:20,899
写一个程序…while循环……它会循环…不好意思
write a program that ... while ... that'll just loop ... sorry the

69
00:04:21,700 --> 00:04:27,000
简单写一个shell命令，在死循环中
write a quick shell command that'll loop in an infinite loop and

70
00:04:27,200 --> 00:04:31,466
持续的用catflag覆盖asdf文件
continuously copy catflag over this asdf file

71
00:04:33,266 --> 00:04:34,733
我们使用cp的-v
and we're going to dash v

72
00:04:37,266 --> 00:04:39,366
然后boom，成功了
and then boom here it is

73
00:04:39,666 --> 00:04:43,266
持续覆盖asdf文件
just copying continuously over asdf file 

74
00:04:43,800 --> 00:04:45,800
就是个循环，你也可以用Python实现
just a simple loop you could write this of course in Python

75
00:04:45,800 --> 00:04:47,866
你可以用C写，用什么写都行
you can write it in C you can write in anything

76
00:04:47,866 --> 00:04:49,666
我用bash写的
I wrote it in bash

77
00:04:49,866 --> 00:04:52,766
好的，接着我们运行这个
all right and then we're gonna run this

78
00:04:53,733 --> 00:04:55,999
这次竞争失败了
and of course that time we lost the race

79
00:04:56,200 --> 00:04:58,400
它创建了ASDF文件
 right it created ASDF file

80
00:04:59,100 --> 00:05:03,300
先执行了，然后asdf才被覆盖
and it executed before our other script was able to overwrite it

81
00:05:03,666 --> 00:05:05,133
这次又失败了
that time you lost the race again

82
00:05:05,466 --> 00:05:06,966
这次竞争成功了
that time you won the race

83
00:05:07,700 --> 00:05:08,500
好的
all right

84
00:05:09,566 --> 00:05:11,266
很有趣，对吧
pretty interesting right because

85
00:05:12,200 --> 00:05:16,700
如果单看程序的实现
if you just look at how this program works

86
00:05:17,100 --> 00:05:19,400
它看起来还是挺安全的
it doesn't look like it should be unsafe

87
00:05:19,400 --> 00:05:22,700
但因为在你电脑里同时有很多进程在执行
but because there are multiple things going on on your computer at the same time

88
00:05:22,700 --> 00:05:27,900
它默认了共享资源是安全的
because this is making security critical assumptions on a shared resource

89
00:05:28,300 --> 00:05:30,200
而这个共享资源并不能确保不被修改
that is not immune from tampering

90
00:05:31,500 --> 00:05:32,466
问题就来了
problems happen

91
00:05:32,866 --> 00:05:33,666
好的
all right

92
00:05:34,700 --> 00:05:35,500
让我们
let's

93
00:05:36,333 --> 00:05:37,133
当然
of course

94
00:05:37,800 --> 00:05:41,966
这个例子很好
this case was extremely nice

95
00:05:42,066 --> 00:05:44,799
修改的机会窗口很大
in the sense that there was a huge window of opportunity

96
00:05:45,000 --> 00:05:48,200
文件打开后（到执行它前）有很长一段时间
a very long time between the time when this file is opened

97
00:05:48,300 --> 00:05:51,000
顺便说一下，文件打开后会有一个文件描述符
by the way once the file is opened and there's a file descriptor

98
00:05:51,200 --> 00:05:52,800
然后就不用管磁盘上的文件了
then we can move this file out of the way 

99
00:05:52,933 --> 00:05:55,599
覆盖它也没问题
just fine to overwrite it

100
00:05:55,666 --> 00:05:59,366
这里的write只会修改内存里的
this write goes to the opened resource

101
00:05:59,366 --> 00:06:01,866
它和磁盘中的文件已经没有关系了
it has nothing to do with the file name anymore

102
00:06:01,800 --> 00:06:07,200
如果我们在打开和写入之间覆盖了磁盘上的文件
so if we overwrite the file between this open and this write

103
00:06:09,866 --> 00:06:13,266
我们还是赢。这个写入不会覆盖我们的新文件
we still win. the write won't overwrite our new file

104
00:06:14,933 --> 00:06:17,499
基本上只要我们的重写发生在
and basically as long as we overwrite

105
00:06:17,633 --> 00:06:20,266
程序open文件之后
this file between the time and it's open 

106
00:06:20,466 --> 00:06:24,899
在sh完成初始化前
and between the time and after /bin/sh initializes itself

107
00:06:24,900 --> 00:06:27,466
这要很长时间，会调用许多系统调用
 which takes a long time many system calls etc

108
00:06:27,566 --> 00:06:29,899
Linux二进制文件加载的那一套
all of that Linux binary loading

109
00:06:31,800 --> 00:06:35,133
然后才会去打开shell脚本
and it finally opens the shell script that it wrote

110
00:06:36,100 --> 00:06:39,100
我们有充足的时间替换shell脚本
we have all of that time to replace that shell script with our attack

111
00:06:39,166 --> 00:06:41,299
好的，加点难度
alright so let's tighten up that race

112
00:06:41,500 --> 00:06:43,233
让它更难竞争成功
what if you make it less winnable 

113
00:06:43,366 --> 00:06:49,333
这是一个更难竞争的程序
this is a much less raceable program

114
00:06:51,000 --> 00:06:53,466
基本上
where basically we have a

115
00:06:54,800 --> 00:06:59,400
我们复制了echo程序，然后输出 SAFE
we copy in Echo and we just run Echo Safe

116
00:06:59,666 --> 00:07:01,333
我们打开/bin/echo
right so we open bin Echo

117
00:07:01,666 --> 00:07:04,399
打开提供给我们的文件
we open the file that's provided we

118
00:07:04,700 --> 00:07:08,733
复制echo程序到新文件中
copy using sent file bin Echo to our new file

119
00:07:08,900 --> 00:07:11,066
关闭新文件，然后执行它
we close the file and then we execute

120
00:07:11,366 --> 00:07:13,733
（机会）小多了
alright much smaller

121
00:07:13,800 --> 00:07:14,766
没有/bin/sh了
 no /bin/sh

122
00:07:15,733 --> 00:07:18,733
在echo被打开的那一刻（代码06行）
the moment that Echo is opened here

123
00:07:19,166 --> 00:07:20,199
游戏结束了
it's game over

124
00:07:20,266 --> 00:07:22,433
如果错过了窗口
right if we've lost our windows 

125
00:07:22,566 --> 00:07:27,266
窗口在这个open和这个execl调用之间
our windows again between this open and then this execl call

126
00:07:27,266 --> 00:07:29,333
调用execl的那一刻
the moment execl is called 

127
00:07:29,366 --> 00:07:33,333
如果还没替换，就竞争失败了
we have now lost the race if we haven't replaced it between here

128
00:07:33,800 --> 00:07:38,700
显然这个窗口要小得多，没有sh初始化的过程了
obviously this window is much smaller there's no sh initialization

129
00:07:40,366 --> 00:07:42,533
所以要赢就更难了
so it'll be much tougher to win

130
00:07:42,766 --> 00:07:44,499
让我展示给你看
let me show you

131
00:07:45,133 --> 00:07:47,299
更难竞争成功了
first of all that it is tougher to win

132
00:07:47,300 --> 00:07:48,333
我们要
we're going to

133
00:07:52,000 --> 00:07:57,333
回顾一下fs1
I recall our fs1 example right

134
00:07:57,533 --> 00:08:00,299
我们经常获胜
that we can win fairly frequently

135
00:08:01,600 --> 00:08:02,600
让我们
let's actually

136
00:08:10,166 --> 00:08:15,499
运行2000次
let's run it 2,000 times

137
00:08:15,800 --> 00:08:17,200
看看获胜的频率
and see how frequently we win

138
00:08:27,466 --> 00:08:29,266
好的，开始
okay here we go

139
00:08:29,266 --> 00:08:33,533
把结果写入output文件
I'm going to write this to a file called output

140
00:08:36,666 --> 00:08:39,733
然后用命令
then I'm going to use some commands to

141
00:08:40,533 --> 00:08:42,866
计算出成功概率为50%
figure out that we win about half of the time

142
00:08:43,100 --> 00:08:45,533
所以我们运行了2000次
so we ran a 2000 times 

143
00:08:45,766 --> 00:08:50,333
另一个窗口发起的攻击
about half of the time our attack running in this other window

144
00:08:51,700 --> 00:08:53,666
半数都竞争成功了
won the game force over half the time

145
00:08:53,666 --> 00:08:56,299
显然会有一些噪音
that time obviously there's some noise

146
00:08:56,466 --> 00:08:58,499
取决于我的系统还在做什么等等
depending on what else my system is doing and so forth

147
00:08:58,500 --> 00:09:02,400
这就是原来的这个
so that was this the original this

148
00:09:02,466 --> 00:09:04,799
在第一个例子中，我们有一半的胜算
this first example we won half the time

149
00:09:04,933 --> 00:09:07,133
让我们来看第二个例子
let's see the second example

150
00:09:07,133 --> 00:09:10,699
用这个攻击方式能赢多少次
how often we win that with just this simple attack

151
00:09:10,966 --> 00:09:11,766
很明显
obviously

152
00:09:15,000 --> 00:09:19,733
这里是例子2的实现
this is the I implemented that example as well here

153
00:09:20,500 --> 00:09:28,200
预计攻击成功率不高
and we expect to see a less successful attack 

154
00:09:28,433 --> 00:09:29,733
让我们试一试
let's give that a try

155
00:09:30,100 --> 00:09:32,400
不用fs1，改用fs2
instead of FS1 let's do FS2

156
00:09:33,166 --> 00:09:34,233
你马上就能看到
and so right away you can see 

157
00:09:34,366 --> 00:09:39,966
带有pwn_college的flag少了很多
there's a lot less say pwn college a lot less flags leaked

158
00:09:40,700 --> 00:09:45,666
具体来说，我们在2000次中只赢了45次
and specifically we won out of 2000 times only 45 times

159
00:09:45,966 --> 00:09:47,799
好的，我们再试一次
right let's try that again

160
00:09:50,266 --> 00:09:51,299
只有48次
only 48 times 

161
00:09:51,300 --> 00:09:52,933
还挺稳定的
that's fairly stable right

162
00:09:53,000 --> 00:09:56,600
竞争成功的次数少了很多很多
we win much much much fewer of those races

163
00:09:56,600 --> 00:09:58,333
那么我们怎样才能做得更好呢
so how can we do better 

164
00:09:58,433 --> 00:10:01,899
总的思路是让程序慢下来
well the general idea is to slow things down

165
00:10:01,900 --> 00:10:04,166
具体说就是让目标程序变慢
and specifically slow down the victim program

166
00:10:04,366 --> 00:10:05,433
这个漏洞程序
this vulnerable program 

167
00:10:05,633 --> 00:10:07,899
如果你让它跑得慢一点
if you make it run slower

168
00:10:07,933 --> 00:10:12,099
如果你让他俩之间的间隔变长
if you make it take longer between this and this

169
00:10:13,500 --> 00:10:18,500
那么你将扩大机会窗口
then you'll open that vulnerable window more

170
00:10:18,533 --> 00:10:20,266
我们来看几个选项
so let's see a couple of options 

171
00:10:20,466 --> 00:10:26,133
一个是降低该进程的调度优先级
one option is reducing the scheduling priority of this process

172
00:10:26,133 --> 00:10:30,399
有几种方法可以做到这一点
there are several ways to do this

173
00:10:30,533 --> 00:10:34,266
Linux提供了一个工具和一个叫做 utility 的系统
 Linux provides a utility and a system called utility of course

174
00:10:34,500 --> 00:10:37,333
使用一个叫 nice 的系统调用
uses this system call called nice

175
00:10:37,700 --> 00:10:44,200
思路是被标记为nice的程序对资源的要求不高
the idea is a program that is nice takes up is less demanding of your resources

176
00:10:44,266 --> 00:10:46,866
它更偏好不被调度
so it is much more willing to be unscheduled

177
00:10:46,866 --> 00:10:48,466
这是在告诉内核，嘿
it's kind of telling the kernel hey

178
00:10:49,166 --> 00:10:50,299
让我运行在后台就行
run me in the background

179
00:10:50,300 --> 00:10:53,266
如果需要执行其他命令
if you need to execute other commands

180
00:10:54,900 --> 00:10:56,900
就先暂停我吧，执行其他命令
pause my process and execute

181
00:10:57,066 --> 00:10:58,499
我们只有有限的资源
of course we have finite amount of course

182
00:10:59,100 --> 00:11:01,133
许多进程都在争夺注意力
many processes vying for attention 

183
00:11:01,333 --> 00:11:05,599
如果你把程序标记为nice
if you put a program nice

184
00:11:05,900 --> 00:11:10,000
它就不太可能一次执行完
it will be much less likely to run all the way through

185
00:11:10,066 --> 00:11:11,899
它更有可能被暂停
it'll be much more likely to pause

186
00:11:12,100 --> 00:11:15,733
来给其他程序运行的机会
to be paused to give other programs a chance to run

187
00:11:15,933 --> 00:11:19,333
如果它停在我们的机会窗口
if it's paused right here during our vulnerable window

188
00:11:19,933 --> 00:11:21,766
那么我们就能竞争成功
then we can win that race right

189
00:11:22,566 --> 00:11:23,266
你使用的方式很好
the way you use nice

190
00:11:23,466 --> 00:11:26,099
您只需在要运行的命令前面加上nice
you just put nice in front of the command you want to run

191
00:11:26,466 --> 00:11:28,266
它会被降低调度优先级
and it will get descheduled

192
00:11:28,266 --> 00:11:30,033
还有ionice。都是一样的
there's also ionice. it's the same 

193
00:11:30,200 --> 00:11:32,300
nice对应CPU
nice is for CPU

194
00:11:32,333 --> 00:11:35,199
ionice对应磁盘的输入输出
ionice is for input outputs for your disk 

195
00:11:35,366 --> 00:11:39,766
因此，它将大大减少对磁盘的使用
so it'll be much less intensive on your disk usage

196
00:11:40,000 --> 00:11:44,300
让我们看一下这对竞争成功率的影响
so let's take a look at what this does to our success

197
00:11:44,300 --> 00:11:46,466
我们做2000次
so here we do 2000 times 

198
00:11:46,600 --> 00:11:49,933
但这次我们把nice放在前面
but now we will put nice in front of this

199
00:11:49,933 --> 00:11:51,733
还是在后台攻击
we still have the attack running in the background

200
00:11:51,733 --> 00:11:53,899
持续用catflag替换asdf
copying cat flag over ASDF

201
00:11:54,466 --> 00:11:55,499
我们运行一下
let's run this

202
00:11:59,666 --> 00:12:02,099
好像没啥用
and that did not help

203
00:12:02,500 --> 00:12:03,866
这确实要看情况
it really depends

204
00:12:04,700 --> 00:12:07,333
这取决于你的机器在做什么
really depends on what your machine is doing

205
00:12:09,200 --> 00:12:13,000
我不确定是否有统计上显著的系数
I would not sure if there's a statistically significant factor

206
00:12:13,266 --> 00:12:17,333
nice 接受一个优先级参数，从-20
nice takes a priority between negative 20 

207
00:12:17,733 --> 00:12:25,199
这是非常非常高的优先级
which is very very high priority

208
00:12:25,266 --> 00:12:26,799
我知道这很令人困惑。它是一个负数
I know it's confusing. it's a negative number 

209
00:12:27,066 --> 00:12:30,866
但它表示一直调度我
but it is schedule me at all times

210
00:12:30,866 --> 00:12:32,766
我需要一直运行
I absolutely need to run 

211
00:12:32,766 --> 00:12:33,833
还有19
and 19

212
00:12:33,900 --> 00:12:36,800
默认情况下，如果直接用nice，优先级是10
and by default if you just do nice it'll put 10

213
00:12:37,100 --> 00:12:40,500
19 则告诉你别安排我
19 tells you you know just don't schedule me

214
00:12:41,100 --> 00:12:47,000
除非计算机没别的要执行了
only schedule me if you know the computer isn't doing anything else etc

215
00:12:51,100 --> 00:12:57,200
效果并不显著
and it's not having a significant effect

216
00:12:57,300 --> 00:12:59,900
看起来我们赢了33次
looks like we win 33

217
00:13:00,100 --> 00:13:02,733
是的，效果不是很好。我们看看ionice
 yeah these aren't. let's see about ionice

218
00:13:03,100 --> 00:13:06,466
ionice有一个类别参数
ionice has a class 

219
00:13:06,733 --> 00:13:09,399
类别1、2和3
class 1 2 and 3

220
00:13:09,466 --> 00:13:13,533
3基本上表示只在空闲时使用IO
3 basically just says use io only when we are idle

221
00:13:15,266 --> 00:13:16,166
我们来看看
let's see if that

222
00:13:16,333 --> 00:13:17,999
这似乎没有帮助
it didn't seem to have helped 

223
00:13:18,000 --> 00:13:19,933
确实没帮助
it did not help

224
00:13:20,533 --> 00:13:21,333
好吧
well

225
00:13:22,766 --> 00:13:27,233
取决于电脑还在做什么
depending on what else the computer is doing

226
00:13:27,433 --> 00:13:28,366
所以让我们
 so let's actually

227
00:13:36,966 --> 00:13:39,333
启动一些
let's spin up a bunch of

228
00:13:54,100 --> 00:13:56,600
启动一些
nope I'll spin up a bunch of

229
00:14:01,766 --> 00:14:03,999
C语言中的循环
loops in C

230
00:14:05,566 --> 00:14:09,566
好了，现在他们用了更多的CPU
all right now they're using more CPU

231
00:14:09,733 --> 00:14:11,866
也许nice会
 so maybe nice will actually

232
00:14:13,333 --> 00:14:17,799
会有用，不像在一个完全（没事做的机器中）
have some effect unlike on a completely

233
00:14:19,800 --> 00:14:20,600
不是吧
really

234
00:14:23,766 --> 00:14:25,933
让我们耗光CPU
okay let's use up all of my CPU

235
00:14:26,600 --> 00:14:31,300
希望它还能对正在录制的视频进行编码
hopefully it'll still encode this video that I'm recording

236
00:14:37,300 --> 00:14:38,100
好的
all right

237
00:14:38,766 --> 00:14:39,966
演示失败
failed demo 

238
00:14:39,966 --> 00:14:41,399
没关系
that's okay

239
00:14:41,466 --> 00:14:44,933
有时这个可行，有时不可行
sometimes this works sometimes this does not work

240
00:14:45,100 --> 00:14:46,566
这取决于
it really depends on 

241
00:14:46,500 --> 00:14:49,033
竞争类型
what type of race it is

242
00:14:49,266 --> 00:14:50,533
窗口中发生了什么
 what is going on in that window

243
00:14:50,533 --> 00:14:53,666
如果程序是CPU占用高的，nice会更有帮助
if it was CPU heavy nice would be much more helpful

244
00:14:54,300 --> 00:14:55,866
等等
and so on alright

245
00:14:56,866 --> 00:14:59,599
录制视频之前的练习中，效果很好
in my practice before the recording it worked great

246
00:15:00,533 --> 00:15:01,466
嗯
um

247
00:15:02,533 --> 00:15:03,799
把这些都关掉
let's kill all of this

248
00:15:05,066 --> 00:15:06,933
确保这是
make sure that that is

249
00:15:12,733 --> 00:15:13,566
嗯
um

250
00:15:14,666 --> 00:15:15,499
没关掉
that did not

251
00:15:29,566 --> 00:15:30,599
好了
alright there we go

252
00:15:30,600 --> 00:15:32,900
我把这些循环都关了
I killed all of those our loops alright

253
00:15:35,933 --> 00:15:37,133
不幸的是
unfortunately

254
00:15:37,466 --> 00:15:38,199
nice没展示成功
no nice first 

255
00:15:38,266 --> 00:15:44,733
我们看看nice是否对第一个例子有用
let's see if actually nice should do nicely for our first one 

256
00:15:45,000 --> 00:15:53,000
在没nice的情况下，成功了半数
so again we win about half of the races of the first one without nice

257
00:15:56,300 --> 00:16:00,000
这个实际上调用了/bin/sh等等
um this one that that actually calls /bin/sh and so forth

258
00:16:00,300 --> 00:16:01,566
加上nice试试
and with nice

259
00:16:12,300 --> 00:16:13,533
表现更糟了
even worse all right

260
00:16:16,200 --> 00:16:17,400
我们nice就到这里了
we're gonna move on from nice 

261
00:16:17,533 --> 00:16:20,266
还要讨论其他话题
because we need to cover other topics all right 

262
00:16:20,400 --> 00:16:22,000
好吧，nice没成功
all right nice didn't work out

263
00:16:22,000 --> 00:16:23,500
你得相信刚刚讲的
you have to take my word for it

264
00:16:23,700 --> 00:16:26,400
有时确实有用
it does sometimes

265
00:16:29,400 --> 00:16:32,300
另一个概念是
another concept is

266
00:16:33,133 --> 00:16:35,866
为了能减慢程序的速度
in terms of being able to slow down the program

267
00:16:35,866 --> 00:16:38,733
如果程序允许你指定文件目录
if a program allows you to specify a path

268
00:16:38,900 --> 00:16:42,500
可以通过指定很深很深的目录来减慢速度
you can slow down by having a lot of directories in that path

269
00:16:42,900 --> 00:16:44,533
为什么这会让程序变慢
why does this slow things down

270
00:16:44,533 --> 00:16:45,533
它能减慢速度
it slows things down 

271
00:16:45,666 --> 00:16:48,966
是因为当你要检查一大堆目录的时候
because when you have to look into a bunch of directories

272
00:16:49,500 --> 00:16:54,400
当你指定/blah/blah/blah...
when you specify something like  slash blah slash blah

273
00:16:54,600 --> 00:16:57,800
Linux内核必须进入每个目录
the Linux kernel has to go into each directory

274
00:16:57,966 --> 00:17:00,933
查看该目录中的条目
look at the entries in that directory

275
00:17:01,166 --> 00:17:02,466
确定下一个
identify the next one

276
00:17:02,466 --> 00:17:03,666
进入目录
go into that 

277
00:17:03,666 --> 00:17:05,433
从磁盘获取数据，等等
fetch that from disk etc

278
00:17:05,500 --> 00:17:07,866
这需要时间，对吧
it takes time right

279
00:17:08,000 --> 00:17:12,066
所以你可以构造这些超长的路径
so you can build these super super long paths

280
00:17:12,666 --> 00:17:15,933
减慢文件访问速度
to slow down that file access

281
00:17:15,933 --> 00:17:19,366
当execl运行时
so that when this happens when execl runs

282
00:17:19,366 --> 00:17:21,799
它要花很长时间来找到文件
it'll actually take a long time to find that file

283
00:17:22,066 --> 00:17:24,599
给你更多的时间来替换它
giving you more time to replace it

284
00:17:25,366 --> 00:17:26,166
酷
cool

285
00:17:27,933 --> 00:17:31,566
不幸的是，Linux内核有一个
unfortunately the Linux kernel has a

286
00:17:33,100 --> 00:17:38,300
路径大小限制为4,096字节，4kb
path sized limit of 4,096 bytes right 4 kilobytes

287
00:17:40,500 --> 00:17:43,066
但这仍然是一条很长的路径
so that's still a very very long path

288
00:17:43,066 --> 00:17:45,599
对于大多数目的，都足够了
probably sufficient for most purposes

289
00:17:45,700 --> 00:17:47,066
但我们可以更进一步
but we can do even better

290
00:17:47,233 --> 00:17:51,699
我们可以构建一个疯狂的文件系统迷宫
we can build this insane thing called a file system maze right

291
00:17:53,000 --> 00:17:58,500
基本是有一个迷宫目录
we basically have a directory where the maze is 

292
00:17:58,800 --> 00:18:01,266
然后在里面创建目录
and then we create directories 

293
00:18:02,133 --> 00:18:04,499
相互嵌套的一组目录
a set of directories that are nested in each other

294
00:18:04,500 --> 00:18:07,900
a/1/2/3/4/5等等
a slash 1 slash 2 slash 3 slash 4 slash 5 etc

295
00:18:08,300 --> 00:18:12,200
最终用root符号链接绕回迷宫的起始位置
culminating in a symlink back to the root

296
00:18:12,933 --> 00:18:15,366
b也是一样，b/1/2/等等等等
and same with b blah blah blah blah

297
00:18:15,466 --> 00:18:18,066
最终用root符号链接回到起始位置
culminating the symlink back to the root

298
00:18:19,700 --> 00:18:24,900
我们可以使用其它符号链接
and this allows us to using other symlinks

299
00:18:25,000 --> 00:18:29,966
走到迷宫每条岔路的尽头，比如a的18
that go to the end of each individual maze entry here

300
00:18:30,366 --> 00:18:33,299
我们可以创建这样一条路径
we can create a path that goes

301
00:18:34,066 --> 00:18:39,933
/my/maze/a_end/root/b_end/root/c_end
my maze a_end root b_end root c_end

302
00:18:40,166 --> 00:18:46,999
当这条路径被解析时
 when this path is resolved what will actually happen

303
00:18:47,100 --> 00:18:48,900
它会先到/my/maze
it'll go through my maze

304
00:18:48,900 --> 00:18:50,666
然后会到a_end
and then it'll follow a_end

305
00:18:50,800 --> 00:18:54,333
经过a/1/2/3/4/
then go a slash 1 slash 2 slash 3 slash 4 slash

306
00:18:54,400 --> 00:19:01,266
因为a_end只是存储了实际路径的文本
because a_end just stores basically the text of the of the actual path

307
00:19:01,366 --> 00:19:05,099
内核实际上会一次进入这些目录
and the kernel will actually have to follow all of these

308
00:19:05,200 --> 00:19:05,800
深入到最后
dig in

309
00:19:05,966 --> 00:19:07,799
然后通过root返回到入口
then follow root all the way back

310
00:19:07,800 --> 00:19:09,300
然后进入b_end
and then it goes to B end

311
00:19:09,866 --> 00:19:12,766
然后它要再经历一遍
and then it has to go through all of this again

312
00:19:12,966 --> 00:19:13,899
然后经过root
then it goes through root

313
00:19:13,900 --> 00:19:17,000
这一切都需要花费大量的时间
and this all takes enormous amounts of time

314
00:19:18,333 --> 00:19:19,866
我们能做的就这么多了
there's only so much we can do here

315
00:19:19,866 --> 00:19:23,499
Linux对每次路径解析有40个符号链接的限制
Linux has a limit of 40 symbolic links per path resolution

316
00:19:23,600 --> 00:19:27,466
但每个符号链接的路径可达到4000字节
but each of these steps can be 4000 long right

317
00:19:27,600 --> 00:19:35,100
所以你可以强迫内核遍历海量的目录
so that's an enormous amount of directories that you can force the kernel to traverse

318
00:19:35,266 --> 00:19:37,899
看一下如何提高竞争成功率
let's take a look at how this impacts our success race

319
00:19:37,900 --> 00:19:39,066
提醒一下
so as a reminder

320
00:19:40,600 --> 00:19:42,366
别被nice困扰
let's not bother with nice

321
00:19:45,733 --> 00:19:46,533
来吧
come on

322
00:19:47,666 --> 00:19:48,466
好的
okay

323
00:19:49,800 --> 00:19:58,200
尝试2000次这个更困难的攻击
so out of 2000 iterations on this tighter attack

324
00:19:59,000 --> 00:20:01,700
用最初的攻击方法
with just this attack running

325
00:20:03,166 --> 00:20:07,466
2000次我们成功了50次
we succeed about 50 times out of 2000 right

326
00:20:08,000 --> 00:20:10,500
我们看一下迷宫的效果
let's look at maze

327
00:20:10,533 --> 00:20:11,899
我建造了这个迷宫
I built this maze

328
00:20:12,366 --> 00:20:17,966
这是a b a_end b_end c_end，等等
right so here is my a b a_end b_end c_end etc

329
00:20:18,033 --> 00:20:19,766
一直到z
actually it did all through Z

330
00:20:20,500 --> 00:20:33,100
a里面是1 2 3，以此类推，直到100
in a I have a 1 2 3 and so on all the way up until a 100

331
00:20:34,066 --> 00:20:37,599
然后是root符号链接
and then I have the root symlink

332
00:20:39,700 --> 00:20:42,700
回到maze目录
that goes back to my maze

333
00:20:44,300 --> 00:20:45,200
就是这个
here it is

334
00:20:46,000 --> 00:20:47,933
然后如果我对它解引用
and then if I dereference that

335
00:20:48,733 --> 00:20:49,999
我能进到b
I can go into B

336
00:20:50,800 --> 00:20:58,200
当然，这样很快就填满了路径的最大尺寸
right and of course I very quickly fill up the maximum size of a path

337
00:21:00,900 --> 00:21:04,700
但我也可以用a_end
but I can also again do a_end

338
00:21:05,500 --> 00:21:10,300
它一直到达a的末端
and that goes all the way to the end of a

339
00:21:10,400 --> 00:21:11,933
里面有一个root
and there's a root thing there 

340
00:21:12,100 --> 00:21:23,300
我可以写a_end/root/b_end/root/c_end/root/d_end/root/e_end/root
so I can do a_end root b_end slash root c_end slash root d_end slash root e_end slash root

341
00:21:24,500 --> 00:21:31,300
f_end/root/g_end/root/
f_end slash root g_end slash root and slash root

342
00:21:33,900 --> 00:21:34,700
等下
wait

343
00:21:35,733 --> 00:21:37,999
我复制写好的
I'm just gonna copy my other one 

344
00:21:38,666 --> 00:21:41,799
全打出来太费劲了
because to discombobulate it to type out all of it

345
00:21:43,166 --> 00:21:44,166
等一下
one second

346
00:21:47,066 --> 00:21:47,999
好了
here we go

347
00:21:53,933 --> 00:21:56,666
让我们走出迷宫吧
let's get out of the maze 

348
00:21:57,000 --> 00:22:00,966
提出我要执行的
bring up what I was executing 

349
00:22:01,300 --> 00:22:05,166
在这里也可以做同样的事情
and in this exact same thing can be done here so

350
00:22:05,500 --> 00:22:07,000
我走进了迷宫
I go into the maze

351
00:22:07,333 --> 00:22:08,699
到了a_end
I go to a_end

352
00:22:09,533 --> 00:22:11,466
回到迷宫起始位置
back out to the root of the maze 

353
00:22:11,466 --> 00:22:13,799
到b_end，返回到开始，到c_end，以此类推
b_end back out to the root c_end and so on

354
00:22:13,900 --> 00:22:17,500
一直到s_end回到开始，再到t_end
 I go here up until s_end back to the root t_end

355
00:22:17,666 --> 00:22:20,599
基本上有40个符号链接了
I think this basically makes it 40 symbolic links

356
00:22:21,000 --> 00:22:22,533
路径解析有40个符号链接的上限
again there's a limit of 40

357
00:22:22,566 --> 00:22:23,999
你可以让每条分支走的更深
you can make it deeper

358
00:22:24,066 --> 00:22:26,366
每条分支我只走到100
each entry in the root I only move and up to 100

359
00:22:26,366 --> 00:22:28,566
但显然没满4000字节
but that's not 4,000 bytes obviously

360
00:22:28,700 --> 00:22:30,866
我可以再深入一点，但这已经足够了
so I could probably go deeper but this is sufficient

361
00:22:32,266 --> 00:22:35,133
遍历这个迷宫，然后一路回来
traversing this maze and then all the way back out

362
00:22:35,133 --> 00:22:37,933
然后读取我一直在覆盖的asdf文件
and then reading that ASDF file that I've been overwriting

363
00:22:38,066 --> 00:22:39,399
要花大量时间
 is going to take time

364
00:22:39,733 --> 00:22:42,666
之前2000次我们成功了50次
so again before we succeeded 50 times out of 2000

365
00:22:42,666 --> 00:22:43,966
看看现在如何
let's see what happens now

366
00:22:44,200 --> 00:22:46,466
能看到更多flag
you can see quite a lot more flags flying

367
00:22:47,366 --> 00:22:52,133
好了，我们把成功率提高了五倍
boom we opt our success rate by a factor of five

368
00:22:52,200 --> 00:22:54,866
当然，我们还可以把这个迷宫弄得更深
and we can of course make that maze even deeper

369
00:22:54,900 --> 00:22:58,066
让程序的速度更慢
to slow down the program more to

370
00:22:59,366 --> 00:23:01,466
让成功率更高
get things even more reliable

371
00:23:01,733 --> 00:23:03,599
结论是
the takeaway is

372
00:23:04,133 --> 00:23:06,899
如果想更高效赢得竞争
if you want to win races more effectively

373
00:23:06,900 --> 00:23:10,200
你得想办法让程序慢下来
you need to find ways to slow down the program

374
00:23:12,566 --> 00:23:17,499
文件系统竞争非常非常重要
file system races are super super relevant

375
00:23:18,133 --> 00:23:22,366
事实上，这些问题直到今天还在发生
in fact these bugs occur to this day

376
00:23:22,500 --> 00:23:29,200
这不是之前讲历史时的古老bug
these aren't archaic bugs that we're talking about historically

377
00:23:29,500 --> 00:23:33,400
去年有一个ToC-ToU漏洞
last year there was a time of check time of use vulnerability 

378
00:23:33,433 --> 00:23:38,333
在Ubuntu的程序崩溃报告系统中被发现
found in Ubuntu's crash reporting system for program crashes

379
00:23:38,333 --> 00:23:40,666
就是那个弹出窗口告诉你程序崩溃了的程序
and you get a pop up saying hey this crashed

380
00:23:40,666 --> 00:23:41,866
如果你用的是Ubuntu
if you're using Ubuntu

381
00:23:42,400 --> 00:23:45,300
在那里有一个toc-tou漏洞
there was a time of check time of use vulnerability in that

382
00:23:45,400 --> 00:23:47,333
在这段Python代码中
in the Python code

383
00:23:47,333 --> 00:23:50,099
另外这些漏洞
another thing is that these vulnerabilities

384
00:23:50,100 --> 00:23:54,200
竞争条件不是C特有的
and race conditions in general are not just C specific

385
00:23:54,333 --> 00:23:55,866
我们之前谈的很多
a lot of what we talk about

386
00:23:58,000 --> 00:23:59,300
比如溢出等等
overflows and so forth

387
00:23:59,300 --> 00:24:01,733
它们可能不适用于rust
they might not apply to for example rust

388
00:24:01,966 --> 00:24:04,066
但这个适用范围很广
this does very much

389
00:24:04,133 --> 00:24:08,733
这段Python代码检查用户是否
right so this Python code checked if the user

390
00:24:09,400 --> 00:24:12,366
能否访问崩溃的文件路径
could access the file path that crashed

391
00:24:17,600 --> 00:24:20,566
如果他们无法访问它
and if they could not access it

392
00:24:23,800 --> 00:24:24,900
如果他们不能访问的话
if they could not access it

393
00:24:24,900 --> 00:24:28,566
它会为崩溃事件创建一个新的报告文件
it creates a new report file for the crash

394
00:24:28,566 --> 00:24:30,333
如果他们能访问的话
if they can access it

395
00:24:30,366 --> 00:24:33,099
它就进入目录，解析它
then it goes in here and just parses it

396
00:24:35,800 --> 00:24:38,566
直接解析它，默认用户具有相应权限
happily parse it assuming that the user has permissions

397
00:24:38,733 --> 00:24:42,899
显然，这俩发生在不同的时间
of course this is not at a different time than this

398
00:24:42,933 --> 00:24:45,366
它们中间有一个攻击窗口
and there's an attack window in between

399
00:24:45,700 --> 00:24:46,866
利用方法为
so the exploit of course

400
00:24:46,966 --> 00:24:49,533
先确保这个路径是可以访问的
is to make sure that the path is accessible

401
00:24:49,533 --> 00:24:51,066
触发else条件
to trigger the else condition

402
00:24:51,166 --> 00:24:51,933
然后迅速
then quickly

403
00:24:52,100 --> 00:24:57,000
用符号链接将它指向你想读取的文件
symbolically link whatever that was pointing to something else that you want to read

404
00:24:59,000 --> 00:25:02,400
使用它，你可以读取文件系统上的任意文件
and using this you can read out arbitrary files on the file system

405
00:25:02,566 --> 00:25:05,966
比如本课程的目标 /flag 文件
for example for the purposes of this class /flag

406
00:25:07,000 --> 00:25:11,300
希望已经讲明白这些漏洞是真实存在的了
so I hope I've convinced you that these vulnerabilities are real

407
00:25:12,866 --> 00:25:15,199
但我相信之后的练习题
but I'm sure that all the practice problems you'll see

408
00:25:15,200 --> 00:25:19,200
会比我现在更能说服你
will do a much better job convincing you of that than I can right now

