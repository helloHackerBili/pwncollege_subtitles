1
00:00:00,000 --> 00:00:01,833
它会自动跟随
It's gonna automatically follow.

2
00:00:04,333 --> 00:00:05,500
完美
Perfect.

3
00:00:06,833 --> 00:00:09,233
你现在在左上方
Apparently you live in the top right, top left.

4
00:00:09,366 --> 00:00:09,833
我们开始吧
We'll just go.

5
00:00:12,833 --> 00:00:14,133
你好黑客们
Hello hackers.

6
00:00:14,500 --> 00:00:19,433
欢迎来到CSE 598高级漏洞研究课程
Welcome to CSE 598 Advanced Vulnerability Research.

7
00:00:21,033 --> 00:00:23,233
实际上是漏洞应用研究
It's actually Applied Vulnerability Research.

8
00:00:24,233 --> 00:00:25,633
打在幻灯片上的
Type on the slide.

9
00:00:25,633 --> 00:00:27,033
好的，开了个好头
All right, we're off to a good start.

10
00:00:28,466 --> 00:00:33,433
这个版本的漏洞应用研究聚焦在XNU上
This iteration of AVR is focusing on XNU.

11
00:00:33,533 --> 00:00:41,233
它是苹果各种操作系统的基础
It's the basically base of all of Apple's various operating systems.

12
00:00:41,266 --> 00:00:45,033
我们会有很多有趣的时光
We're gonna have a lot of fun stuff, fun times

13
00:00:45,366 --> 00:00:51,566
在macOS基础上做一些疯狂的事情
 doing some crazy stuff in kind of macOS underpinning land.

14
00:00:51,800 --> 00:00:53,133
首先
First things first.

15
00:00:55,633 --> 00:00:57,233
我是Adam Doupe
I'm Adam Doupe.

16
00:00:59,133 --> 00:01:03,633
我是亚利桑那州立大学网络安全专业的副教授
I am an Associate Professor here at ASU in Cyber Security.

17
00:01:06,800 --> 00:01:08,333
简单介绍一下
Just a quick introduction.

18
00:01:09,533 --> 00:01:14,000
你可能从其他教授那里听过
You might have heard from other upstart professors here

19
00:01:14,066 --> 00:01:15,933
他们觉得自己比亚当·杜普还酷 
that they think they're cooler than Adam Doupe.

20
00:01:15,966 --> 00:01:18,333
没人比亚当·杜普更酷了
No one is cooler than Adam Doupe.

21
00:01:18,400 --> 00:01:22,800
我想，尤其是对Twitch上的观众，说这句话
I want to say that right now especially for the people watching on Twitch.

22
00:01:25,533 --> 00:01:26,733
作为亚当·杜佩
As Adam Doupe

23
00:01:26,800 --> 00:01:33,533
我作为shellphish的一员，参加过世界黑客锦标赛
I've competed on Team shellphish in the World Championships of Hacking

24
00:01:33,633 --> 00:01:36,900
然后又共同创立了Order of the Overflow
and then went on to co-found the Order of the Overflow.

25
00:01:37,033 --> 00:01:44,733
我和我的新朋友Zardus(Yan)一起举办了世界黑客锦标赛
We ran the World Championship of Hacking with a new friend of mine, Zardus.

26
00:01:44,833 --> 00:01:47,200
我创建了CTFRadi.ooo
I've created the CTFRadi.ooo

27
00:01:47,433 --> 00:01:49,733
我不知道你们是否喜欢播客
I don't know if you guys are into podcasts

28
00:01:49,766 --> 00:01:51,833
但我强烈推荐CTFRadi.ooo
but I highly recommend CTFRadi.ooo

29
00:01:51,833 --> 00:01:53,233
这是个很酷的播客
It's a really cool podcast.

30
00:01:54,133 --> 00:01:58,533
我是pwn学院的核心人物之一
I am one of the core people behind pwn College

31
00:01:59,400 --> 00:02:01,600
最近成为了
and recently became 

32
00:02:01,700 --> 00:02:06,633
Defcon学院二进制开发的主任
the Dean of Binary Exploitation of something called Defcon Academy.

33
00:02:06,866 --> 00:02:11,833
告诉你所有的朋友，亚当·杜普，亚利桑那州立大学最好的网络安全教授。
Tell all your friends, Adam Doupe, best Cyber Security professor at ASU.

34
00:02:11,966 --> 00:02:13,633
好了，明白了吗
Alright, got that out of the way?

35
00:02:13,700 --> 00:02:16,033
有谁是亚当·杜佩的忠实粉丝了吗?
Who here a big fan of Adam Doupe?

36
00:02:17,366 --> 00:02:18,433
好的
Yeah, alright.

37
00:02:19,300 --> 00:02:20,433
Twitch上有什么动静吗
You have Twitch action?

38
00:02:20,766 --> 00:02:22,333
大家都是Adam Doupe的粉丝了吗
People are fans of Adam Doupe?

39
00:02:23,133 --> 00:02:28,033
好的，我们可以等一等一些twitch的用户
Alright, we can wait a little bit for some Twitch love.

40
00:02:29,233 --> 00:02:30,033
是的，好的，很好。
Yes, alright, good.

41
00:02:30,166 --> 00:02:31,933
我们等到了twitch里的粉丝，好的，完美
We got Twitch love. Alright, perfect.

42
00:02:31,933 --> 00:02:38,133
亚当·杜普，亚利桑那州立大学最棒最酷的网络安全教授。
Adam Doupe, best and coolest Cyber Security professor at ASU.

43
00:02:38,133 --> 00:02:39,633
好的，继续。
Alright, anyways, moving on.

44
00:02:41,466 --> 00:02:42,733
这门课是什么?
What is this course?

45
00:02:42,833 --> 00:02:49,533
我已经提前说了，cs598。
Well, I just said basically already, going off the rails, CSE 598.

46
00:02:49,600 --> 00:02:57,933
这是一门高级漏洞应用研究课程
This is a graduate level course on applied and advanced vulnerability research techniques.

47
00:02:58,033 --> 00:03:00,733
如果可以，我会把它命名为AAVR。
If I could, I would have named it AAVR.

48
00:03:01,266 --> 00:03:02,333
镜头跟丢我了
the camera lost me.

49
00:03:02,633 --> 00:03:04,733
对镜头来说太酷了
Alright, too cool for the camera.

50
00:03:05,266 --> 00:03:07,766
好了，再说一遍
Alright, so, again

51
00:03:08,500 --> 00:03:12,333
上个迭代版本的漏洞应用研究中
the last iteration of applied vulnerability research.

52
00:03:12,500 --> 00:03:18,233
我们专注于寻找真实程序中的bug
We went in and focused on finding bugs in real programs.

53
00:03:18,366 --> 00:03:24,133
我们找到并利用了大量真实程序中的漏洞
We had a large amount of real programs that we were finding and exploiting bugs in.

54
00:03:25,500 --> 00:03:29,133
在这个版本中，我们继续扩展
This iteration, we're ramping things up to 11.

55
00:03:29,266 --> 00:03:37,633
我们只看支撑你的笔记本电脑的真实软件
The only thing we're going to be looking at is real software underpinning your laptop.

56
00:03:37,800 --> 00:03:39,133
等等，你的不是MacBook。
Wait, that's not a MacBook.

57
00:03:39,333 --> 00:03:43,000
好吧，这里谁有苹果产品?
Alright, who here runs Apple products in any capacity?

58
00:03:43,333 --> 00:03:45,133
好吧，大概有四个人。
Alright, like four people in the class.

59
00:03:45,133 --> 00:03:46,133
好的,完美
Okay, perfect.

60
00:03:46,133 --> 00:03:50,733
我们俩，我们试过Linux
Yeah, well, us two, you see, we tried Linux.

61
00:03:51,233 --> 00:03:52,933
Adam Doupe是Linux的忠实粉丝
Adam Doupe a big fan of Linux.

62
00:03:53,166 --> 00:03:54,733
不幸的是，没成功
Unfortunately, it didn't work.

63
00:03:54,800 --> 00:03:59,333
总之，这门课的目标是。
So anyways, alright, so, goal of this course.

64
00:03:59,800 --> 00:04:02,200
好了，有谁熟悉pwn学院的?
Alright, who here is familiar with pwn College?

65
00:04:03,566 --> 00:04:08,533
很好，pwn学院，很酷的平台。
Excellent, okay, so, pwn College, cool platform.

66
00:04:08,633 --> 00:04:12,733
它能带你从菜鸟到几乎老鸟
It takes you from zero to almost hero, right?

67
00:04:12,833 --> 00:04:16,066
一开始你不需要很多基础知识
You start out not necessarily knowing anything

68
00:04:16,133 --> 00:04:19,733
等你学完这个平台的课
and by the time that you've gone through the platform,

69
00:04:19,800 --> 00:04:24,333
你会知道很多网络安全技能的组成部分
you know a lot of building blocks of these cyber security skills.

70
00:04:24,400 --> 00:04:25,766
你会知道如何利用内核
You know how to exploit a kernel.

71
00:04:25,933 --> 00:04:28,133
知道ROP的原理
You know how ROP works.

72
00:04:28,133 --> 00:04:29,733
知道如何逆向软件
You know how to reverse engineer software.

73
00:04:29,833 --> 00:04:33,933
知道如何发现不同种类的bug，等等
You know how to spot different types of bugs, etc., etc., etc.

74
00:04:33,933 --> 00:04:39,033
但要将这些用在一个实际系统上，仍是需要迈出的一大步
But putting that all together on a real system is still a big step.

75
00:04:39,533 --> 00:04:41,266
这就是这门课的目标
That's what this class is for.

76
00:04:41,333 --> 00:04:49,333
这门课是为了弥补pwn学院其他课程的不足
This class is here to bridge the gap from the rest of the pwn College material

77
00:04:49,333 --> 00:04:56,366
让你们能在真实的软件中找到真实的bug
into basically stepping into a real role of finding real bugs in real software.

78
00:04:56,733 --> 00:04:59,400
然后对它们进行推理，利用它们，
And then reasoning about them, exploiting them,

79
00:04:59,733 --> 00:05:04,200
考虑它们的影响，并如何修复它们等等
reasoning about the effects and what might be done to fix them and so on.

80
00:05:04,533 --> 00:05:05,433
好吧
Alright

81
00:05:09,133 --> 00:05:12,233
运气好的话，一切顺利
with any luck, all of this will work out great

82
00:05:12,800 --> 00:05:14,700
你们会继续进步
and you will all go forth

83
00:05:14,933 --> 00:05:23,933
找到很多XNU和其它平台的bug，并促使其被修复
and find and cause to be fixed many, many bugs in XNU and other complex targets

84
00:05:24,000 --> 00:05:30,300
因为经过在最重要的目标之一
because now after having done having found bugs and analyzed and reasoned about

85
00:05:30,400 --> 00:05:33,433
iOS和MacOS的内核，和其它有趣的东西上
one of the most important targets out there

86
00:05:33,433 --> 00:05:38,700
寻找、分析bug后
the kernel underpinning iOS and Mac OS and all this fun stuff,

87
00:05:38,900 --> 00:05:40,933
你会觉得，其它的东西
you'll be like whatever, everything else.

88
00:05:40,933 --> 00:05:43,766
比如，Linux，就是小孩子的把戏
You know, Linux, child's play.

89
00:05:44,533 --> 00:05:48,100
也许你能够把我那该死的笔记本修好
Maybe you can fix whatever the fuck happened to my stupid laptop.

90
00:05:48,933 --> 00:05:50,766
对不起，刚才不是亚当·杜普在讲话
Sorry, that wasn't Adam Doupe speaking.

91
00:05:51,533 --> 00:05:53,200
有点现出了Yan的原形
That was a bit of  Yan coming out.

92
00:05:53,300 --> 00:05:58,866
那这门课将如何进行呢?
Alright, so how will the class work?

93
00:05:59,133 --> 00:06:01,533
我们每周开一次会
You notice we have one weekly meeting.

94
00:06:01,533 --> 00:06:02,933
那将是很长的会
That is a long meeting.

95
00:06:02,966 --> 00:06:04,100
今天不会很长
Today is not going to be long.

96
00:06:04,333 --> 00:06:06,100
首先，我一会儿会离开
For one, I have to run

97
00:06:06,800 --> 00:06:14,733
Rob会接手教学的部分
and Rob has been kind enough to take on the load of teaching,

98
00:06:14,800 --> 00:06:21,100
完成一个ARM的极速速成课
the very first refresher/hyperfast crash course into ARM.

99
00:06:21,133 --> 00:06:22,433
我们马上会讲到
We'll get to that soon.

100
00:06:26,333 --> 00:06:27,900
在每周的会议上
In the weekly meetings

101
00:06:27,933 --> 00:06:30,533
我们会尽我们所能
we're going to do whatever we need to do.

102
00:06:30,633 --> 00:06:32,433
有时我们会做讲座
Sometimes we'll do lectures.

103
00:06:32,933 --> 00:06:36,933
有时我们会讨论XNU子系统，
Sometimes we'll have discussions about XNU subsystems,

104
00:06:37,033 --> 00:06:41,233
关于它的漏洞研究
about parts of the vulnerability research process, right?

105
00:06:41,333 --> 00:06:48,200
作为亚利桑那州立大学最酷的教授，亚当·杜佩，
As the coolest professor at ASU, Adam Doupe, I, Adam Doupe

106
00:06:48,300 --> 00:06:51,800
我花了一年的假
has spent a whole sabbatical year

107
00:06:52,033 --> 00:06:53,533
寻找XNU中的bug
finding bugs in XNU.

108
00:06:53,666 --> 00:06:55,133
这是你们可以做的
This is an actual thing you can do.

109
00:06:55,266 --> 00:06:57,666
你们可以靠这个谋生
You can make a living doing this.

110
00:06:57,933 --> 00:07:02,733
我们会讨论这个过程中的经验和教训
And we'll discuss that experience, lessons learned there.

111
00:07:02,966 --> 00:07:03,733
我们会读代码
We'll read code.

112
00:07:03,833 --> 00:07:07,166
会深入研究实际的内核代码
We'll plunk through actual kernel codes

113
00:07:07,333 --> 00:07:11,733
尝试理解bug，并深入研究它们等等
to try to understand bugs and dig into them and so on.

114
00:07:12,133 --> 00:07:12,800
酷
Awesome.

115
00:07:12,933 --> 00:07:13,500
好的
Okay

116
00:07:14,333 --> 00:07:18,466
我们也会在pwn学院上布置作业任务
we'll also have a bunch of assignments on pwn College.

117
00:07:18,533 --> 00:07:22,100
有多少人在pwn学院做过作业?
How many have done assignments on pwn College?

118
00:07:23,133 --> 00:07:24,466
好吧
Okay

119
00:07:25,200 --> 00:07:27,933
有人没用过pwn学院吗?
has anyone not used pwn College?

120
00:07:28,066 --> 00:07:28,800
好吧
Okay

121
00:07:30,166 --> 00:07:31,200
我们会
we will.

122
00:07:31,533 --> 00:07:34,133
我快速演示一下pwn学院的使用
Let me just show you real quick pwn College.

123
00:07:34,233 --> 00:07:35,733
我看看时间用的怎么样
Let's see how we're doing on time.

124
00:07:35,833 --> 00:07:36,633
很充裕
Doing great.

125
00:07:38,733 --> 00:07:40,800
好的，pwn学院已经开了
Yes, okay, pwn College is already up.

126
00:07:40,933 --> 00:07:45,600
访问https://pwn.college
Boom, go to https://pwn.college.

127
00:07:46,133 --> 00:07:48,866
有很多很酷的网络安全材料
A lot of really cool cybersecurity material.

128
00:07:53,966 --> 00:07:57,033
我们的这个课程在这里
All of our class is going to live in here

129
00:07:57,900 --> 00:07:59,966
在Courses部分
in the courses section

130
00:08:00,233 --> 00:08:02,400
它是先进前沿的课程
and in the very most advanced course

131
00:08:02,500 --> 00:08:06,433
因为ASU最酷的网络安全教授
because the coolest cybersecurity professor at ASU

132
00:08:07,100 --> 00:08:08,600
教最先进的课
teaches the most advanced course

133
00:08:09,766 --> 00:08:11,000
除了Rob的课
except for Rob's course

134
00:08:11,066 --> 00:08:11,700
但没关系
but it's fine.

135
00:08:11,833 --> 00:08:12,833
好的，那么
All right, so 

136
00:08:13,900 --> 00:08:15,766
现在发布了一个作业任务
right now there's one assignment live.

137
00:08:15,800 --> 00:08:17,800
就是这个arm的介绍
It's the introduction to ARM.

138
00:08:17,800 --> 00:08:19,133
它已经上线了
So it's already live.

139
00:08:19,433 --> 00:08:21,966
我不知道它什么时候到期，如果
I don't know when it to due, actually, if you can

140
00:08:23,000 --> 00:08:24,300
它到期的时候，你会知道的
You can find out when it's due.

141
00:08:24,333 --> 00:08:25,166
你点进去
You click in.

142
00:08:25,333 --> 00:08:29,066
能看到它会在7天7小时17分钟后到期
You can see it's due in seven days, seven hours, and 17 minutes.

143
00:08:29,133 --> 00:08:30,333
有很多时间
That's a lot.

144
00:08:31,000 --> 00:08:31,766
很多吗?
That's a lot?

145
00:08:31,866 --> 00:08:33,066
他们将会在晚上8点看到它
They'll see it at 8 p.m.

146
00:08:33,766 --> 00:08:34,300
等等,什么?
Wait, what?

147
00:08:34,466 --> 00:08:35,433
哦，我的错。
Oh, my bad.

148
00:08:35,533 --> 00:08:37,466
你会在晚上8点发布
This is how you're going to launch at 8 p.m.

149
00:08:38,933 --> 00:08:41,533
我们能看到，是因为登录的管理员账号
There's an administrator logged in so we can see it.

150
00:08:42,233 --> 00:08:42,633
好的
It's fine.

151
00:08:44,600 --> 00:08:45,200
不管怎样
Anyways

152
00:08:45,366 --> 00:08:47,800
今晚，第一份作业将在pwn学院发布
first assignment launch is tonight on pwn College.

153
00:08:48,000 --> 00:08:48,733
是的，现在是隐藏的
Yeah, here it's hidden.

154
00:08:49,166 --> 00:08:51,200
你能看到是因为现在是dojo（道场）的管理员
You can see this because you're the Dojo's administrator.

155
00:08:51,300 --> 00:08:54,266
好，你们现在看不到
Great, but you shouldn't be able to see the module itself.

156
00:08:54,333 --> 00:08:54,733
没关系。
It doesn't matter.

157
00:08:55,333 --> 00:08:55,866
去这个地方
Go to this thing.

158
00:08:55,933 --> 00:08:56,266
太棒了。
It's great.

159
00:08:56,366 --> 00:08:58,733
好了，有一件非常重要的事
All right, one extremely important thing

160
00:08:59,233 --> 00:09:01,466
对那三个
extremely important for the three people that

161
00:09:01,500 --> 00:09:03,233
没参与过pwn学院课程的人，十分重要
haven't done course on pwn College.

162
00:09:03,433 --> 00:09:03,866
进入这里
Go in here.

163
00:09:03,933 --> 00:09:05,433
点击这个课程相关的东西
You click on this course thing.

164
00:09:05,633 --> 00:09:07,400
点击设置
You click on Setup.

165
00:09:08,733 --> 00:09:11,200
好的教学大纲中，应该也有这个链接
All right, there should also be a link from the syllabus.

166
00:09:11,600 --> 00:09:15,966
确保你在这里有五个绿色的勾。
Make sure that you have five green check marks here.

167
00:09:17,300 --> 00:09:19,266
这里Rob只有一个
This, Rob only has one.

168
00:09:19,833 --> 00:09:21,000
你这门课会挂
You will fail this course.

169
00:09:21,533 --> 00:09:22,766
如果你没有五个绿色的勾
You don't have five green check marks.

170
00:09:22,766 --> 00:09:24,133
你这门课会不及格
You will fail the course.

171
00:09:24,366 --> 00:09:27,533
这门课最难的就是拿到这五个绿色勾
The hardest thing about this course is getting these five green check marks.

172
00:09:28,000 --> 00:09:29,100
要得到五个绿色的勾
To get the five green check marks

173
00:09:29,133 --> 00:09:30,500
你必须创建一个pwn学院账户
you have to create a pwn College account.

174
00:09:30,533 --> 00:09:31,766
你必须创建一个Discord账号
You have to create a Discord.

175
00:09:32,066 --> 00:09:34,366
你必须将pwn学院和Discord帐户关联起来。
You have to link the pwn College and Discord account.

176
00:09:34,533 --> 00:09:35,933
你必须加入这个
You have to join the thing.

177
00:09:37,466 --> 00:09:39,533
录入你的学生id
you know puts your student ID.

178
00:09:39,966 --> 00:09:40,533
它无所不能。
It does everything.

179
00:09:40,600 --> 00:09:44,933
好了，你的成绩就在Grades下面。
All right, your grades are going to be available right here under Grades.

180
00:09:45,033 --> 00:09:46,966
不幸的是，Rob现在这门课不及格。
Unfortunately, Rob's failing the course right now.

181
00:09:48,000 --> 00:09:50,766
这些可能会自动同步到Canvas
These will be auto-synced to Canvas maybe.

182
00:09:51,233 --> 00:09:51,733
不会？
No?

183
00:09:52,600 --> 00:09:54,033
这门课有Canvas吗?
Is there Canvas for this course?

184
00:09:54,800 --> 00:09:56,166
好吧，去他的Canvas。
Okay, fuck Canvas.

185
00:09:56,600 --> 00:09:59,166
这不是亚当说的
Again, that wasn't Adam saying that.

186
00:10:01,133 --> 00:10:03,600
这不会同步到Canvas
This will not be synced to Canvas.

187
00:10:03,700 --> 00:10:04,600
让我们忘掉Canvas吧
Let's forget about Canvas.

188
00:10:04,700 --> 00:10:05,033
好
Good.

189
00:10:05,066 --> 00:10:06,100
这是你的成绩。
So that's your grade.

190
00:10:06,933 --> 00:10:08,433
那么基本上就可以开始了
Then you're basically good to go.

191
00:10:08,533 --> 00:10:09,600
五个检查标记
Five check marks.

192
00:10:10,833 --> 00:10:11,700
非常重要
Very important.

193
00:10:11,833 --> 00:10:12,600
别看那张照片
Don't look at that picture.

194
00:10:12,633 --> 00:10:13,166
它过时了
It's outdated.

195
00:10:13,266 --> 00:10:13,666
好吧
Okay.

196
00:10:18,333 --> 00:10:19,033
还有什么？
What else?

197
00:10:19,600 --> 00:10:21,400
我想我们不会占用大家的时间。
I guess we won't spend everyone's time.

198
00:10:23,266 --> 00:10:25,600
我就展示一下如何启动。
I'll just show how to launch.

199
00:10:26,333 --> 00:10:28,600
展示去哪里学习pwn学院的使用方法
I'll show where to go to learn how to use pwn College.

200
00:10:28,666 --> 00:10:31,066
回到pwn学院的主页
If you go to the homepage of pwn College

201
00:10:31,333 --> 00:10:33,266
去这里，Getting Started。
and you go here, Getting Started.

202
00:10:34,566 --> 00:10:35,500
嘿,家伙。
Hey, guys.

203
00:10:36,866 --> 00:10:38,266
请不要迟到。
Please don't come in late.

204
00:10:38,366 --> 00:10:41,500
我，亚当·杜普，对这种事很生气。
I, Adam Doupe, get upset when this happens.

205
00:10:41,866 --> 00:10:42,900
不，我只是在开玩笑。
No, I'm just kidding.

206
00:10:43,933 --> 00:10:46,500
亚当·杜普并不介意。
Adam Doupe does not mind.

207
00:10:47,000 --> 00:10:47,566
好的
Okay.

208
00:10:49,366 --> 00:10:50,833
你可以点击“Getting Started”
You can click Getting Started

209
00:10:51,933 --> 00:10:55,433
通过这个来学习如何使用道场dojo。
and go through this to learn how to use the dojo.

210
00:10:56,133 --> 00:10:56,866
好吧?
All right?

211
00:10:57,233 --> 00:11:00,933
现在有20个人正在学习如何使用道场。
There's 20 people learning how to use the dojo right this moment.

212
00:11:01,433 --> 00:11:03,900
只是一些简单的挑战题目。
Just a couple of nice and easy challenges.

213
00:11:04,266 --> 00:11:09,666
你将经历，假设你想学习如何使用图形桌面。
You will go through, let's say you want to learn how to use the GUI desktop.

214
00:11:10,400 --> 00:11:11,800
你点击开始。
You hit Start.

215
00:11:12,633 --> 00:11:13,533
它开始加载
It loads.

216
00:11:16,766 --> 00:11:18,733
会在后台启动一个容器
Starting up a container in the background.

217
00:11:19,233 --> 00:11:21,533
现在是开学的第一周
Right now, it's the first week of school.

218
00:11:21,633 --> 00:11:23,233
有很多人。
There's a lot of people.

219
00:11:24,133 --> 00:11:24,733
我们说
And we say

220
00:11:24,833 --> 00:11:28,733
“好的，我们用GUI桌面连接到容器。”
"Okay, we're going to connect to our container using the GUI desktop."

221
00:11:29,933 --> 00:11:30,900
还在加载
It loads more.

222
00:11:33,166 --> 00:11:35,000
正在加载GUI桌面。
Here's the GUI desktop loading up.

223
00:11:35,066 --> 00:11:36,133
到目前为止加载了很多。
A lot of loading so far.

224
00:11:36,166 --> 00:11:36,900
没关系。
That's okay.

225
00:11:39,666 --> 00:11:40,500
没有问题。
No problem.

226
00:11:40,833 --> 00:11:41,766
等着就好
Just waiting.

227
00:11:43,600 --> 00:11:45,433
Rob能会ssh进去
Rob might SSH in

228
00:11:45,500 --> 00:11:47,633
关一些容器吗
and kill some containers.

229
00:11:47,933 --> 00:11:49,433
用你在用的我的笔记本吗
From my laptop that you're on?

230
00:11:49,533 --> 00:11:50,133
只是开玩笑
Just kidding.

231
00:11:50,566 --> 00:11:51,133
好了
Here we go.

232
00:11:52,300 --> 00:11:55,133
我们启动一个终端，然后好了
We spin up a terminal and boom.

233
00:11:55,333 --> 00:11:59,533
对于这个介绍关卡，它会自动给我们一个flag。
For this intro challenge, it just automatically gives us a flag.

234
00:12:00,100 --> 00:12:02,300
所有关卡都是基于flag的
Everything is flag based.

235
00:12:02,633 --> 00:12:05,266
所有的分数都依赖你的flag
All the grades are relied in your flags.

236
00:12:05,566 --> 00:12:06,700
复制一下这个flag
You copy this flag.

237
00:12:08,133 --> 00:12:09,066
你复制它
You copy it.

238
00:12:09,066 --> 00:12:10,700
哦,不。
Oh no.

239
00:12:12,400 --> 00:12:13,433
Rob，发生什么事了?
Rob, what's happening?

240
00:12:13,866 --> 00:12:14,633
好吧。
Okay.

241
00:12:20,566 --> 00:12:24,100
总之，我们会在这里提交flag。
Anyways, we would submit the flag here and everything would be good.

242
00:12:25,300 --> 00:12:32,033
我怕你必须ssh进入后台，才能使它工作
I'm terrified that you have to ssh in the background to make this work.

243
00:12:35,066 --> 00:12:39,333
总之，没关系
Anyways, it's okay.

244
00:12:40,233 --> 00:12:44,100
我不希望弹出某人的敏感信息
We're going to hope no one pops up sensitive notifications.

245
00:12:44,633 --> 00:12:47,433
哦，看
Oh, look at that.

246
00:12:47,866 --> 00:12:48,866
完美
Perfect.

247
00:12:49,933 --> 00:12:52,066
我们回到桌面
Let's come back to the desktop

248
00:12:52,100 --> 00:12:55,300
就是为了展示如何将里面的东西复制出来
just to show how to copy something out.

249
00:12:55,333 --> 00:12:56,933
我都不知道怎么做
I don't even know how

250
00:12:57,233 --> 00:12:59,866
我们在容器中复制这个
We copied this inside the container.

251
00:12:59,900 --> 00:13:00,966
有一个小符号
There's this little character

252
00:13:00,966 --> 00:13:02,766
如果你非常小心地点击这个符号
If you very carefully click on the character

253
00:13:03,133 --> 00:13:03,900
点击这里
click here.

254
00:13:04,233 --> 00:13:05,233
艹
fuck?

255
00:13:05,466 --> 00:13:08,266
重申一下，这不是亚当·杜普说的
Again, that wasn't Adam Doupe saying that

256
00:13:09,000 --> 00:13:10,233
尽管我…
even though I'm...

257
00:13:11,333 --> 00:13:11,933
复制
Copy. 

258
00:13:13,300 --> 00:13:13,933
哦,不。
Oh no.

259
00:13:14,933 --> 00:13:16,566
没关系。
That's okay.

260
00:13:17,100 --> 00:13:18,500
然后，在这里
Then we go. Here it is.

261
00:13:18,700 --> 00:13:20,800
把它从这个文本框中复制出来
Copy it out of this text box.

262
00:13:22,000 --> 00:13:23,766
打开这个非常酷的界面
Bring up this really cool interface.

263
00:13:24,066 --> 00:13:24,900
把这个粘贴进去
Paste this in.

264
00:13:25,233 --> 00:13:26,400
点击提交
I'd hit submit.

265
00:13:26,533 --> 00:13:27,700
就能得分了
It would give me the point

266
00:13:27,733 --> 00:13:29,566
然后我可以进入下一关
and then I could go on to the next level.

267
00:13:30,266 --> 00:13:32,366
它会来到下一关
It goes to the next level and we're all good to go.

268
00:13:32,500 --> 00:13:32,933
好的
Okay.

269
00:13:35,366 --> 00:13:37,333
这就是你解决这些挑战的方法
That's how you solve these challenges.

270
00:13:37,633 --> 00:13:39,600
完成getting started
Go to the getting started

271
00:13:39,700 --> 00:13:44,933
然后完成晚上8点发布的作业
and then go to the assignment that will launch at 8 PM.

272
00:13:45,400 --> 00:13:48,300
本课程的所有交流都将在Discord上进行
All communication in this course will be on Discord.

273
00:13:48,500 --> 00:13:52,166
如果你完成了前面的5个设置
If you go through and get the five chat boxes in the course setup

274
00:13:52,266 --> 00:13:54,833
你会进入到正确的Discord频到
you will end up in the right Discord channels.

275
00:13:55,033 --> 00:13:56,733
如果你不这样做，你就会挂科。
If you don't, you will fail the class.

276
00:14:01,500 --> 00:14:07,100
评分，我提到过，分数都源于解决的题目。
Grading I mentioned all the grades depend on solving each challenge.

277
00:14:08,133 --> 00:14:09,066
要通过这门课
To pass this class

278
00:14:09,066 --> 00:14:16,266
你将会学会发现并利用XNU中的bug，真实的XNU
you will learn to find bugs in and exploit XNU, real XNU

279
00:14:16,833 --> 00:14:21,433
我们尽可能搭建一个尽量真实的
on as real of a setting as we can get it

280
00:14:21,700 --> 00:14:26,166
并且让解题难度呈线性
and still make it skillable for you guys to tackle.

281
00:14:27,066 --> 00:14:28,566
还有一些额外的分数
There's also some extra credit.

282
00:14:28,600 --> 00:14:33,200
通过在Discord上帮助他人，你可以获得高达5%的额外分数
You can get up to 5% extra credit by being helpful to others on Discord.

283
00:14:33,300 --> 00:14:36,100
包括帮助pwn学院中其它班级的人
That also includes people in other pwn college classes.

284
00:14:36,133 --> 00:14:37,500
你在Discord上乐于助人
You're helpful on Discord.

285
00:14:37,700 --> 00:14:38,633
人们感谢你
People thank you.

286
00:14:39,900 --> 00:14:44,166
有一个右击交互界面，可以用于感谢
There's a whole little right click app thank you sort of interface.

287
00:14:44,533 --> 00:14:47,800
我们会记录下来并同步到5%的额外学分
We'll record that and synchronize extra credit up to 5%

288
00:14:48,266 --> 00:14:50,600
用一个很神奇的对数公式
using a logarithmic formula that's very fancy.

289
00:14:50,966 --> 00:14:53,600
但简单说，帮助别人，你会得到额外的学分。
But basically help people and you'll get extra credit.

290
00:14:53,600 --> 00:14:56,633
然后每周你可以得到0.5%的学分
And then every week you can get half a percent

291
00:14:57,333 --> 00:14:59,100
只需发布好的memes(迷因,表情包)
by posting good memes

292
00:14:59,333 --> 00:15:03,100
需要得到meme频道某一个meme判官的认可
that one of the meme judges like in the meme channel.

293
00:15:03,566 --> 00:15:04,633
请发一些好的meme
Please good memes.

294
00:15:05,333 --> 00:15:06,666
应该不用我告诉你们
Shouldn't have to tell you all.

295
00:15:06,733 --> 00:15:08,700
你们都是经验丰富的学生
You're all very experienced students.

296
00:15:09,033 --> 00:15:10,800
不要发布粗制滥造的表情包。
Don't post low effort memes.

297
00:15:11,533 --> 00:15:12,833
有一个“表情包监狱”。
There's also the meme jail.

298
00:15:12,900 --> 00:15:14,233
如果你发布了一个粗制滥造的表情包
If you post a low effort meme

299
00:15:14,400 --> 00:15:15,933
我可能会把你关进表情包监狱。
I might put you in meme jail.

300
00:15:15,966 --> 00:15:20,966
在这学期剩下的时间里，你将被禁止发布表情包，除非有大赦
You will be barred from posting memes for the rest of the semester until there's a jailbreak.

301
00:15:21,100 --> 00:15:21,666
总之
Anyways.

302
00:15:23,166 --> 00:15:25,333
本课程的必备知识
Pre-requisite knowledge for this class.

303
00:15:25,366 --> 00:15:30,966
这门课是ASU第二难的课
This class is the second hardest class at ASU.

304
00:15:31,166 --> 00:15:35,333
目前最难的课显然是Rob的课
Hardest class at ASU so far demonstrably is Rob's class

305
00:15:35,966 --> 00:15:37,166
今天他会接手
who will take over

306
00:15:37,300 --> 00:15:39,066
狠狠“揍”你们一顿
and really pummel you guys today.

307
00:15:40,433 --> 00:15:42,366
这可能是第二难的课了
This is probably the second hardest class.

308
00:15:43,033 --> 00:15:46,500
也许它会登上王位，成为最难的课
Maybe it'll take the throne and become the hardest class.

309
00:15:46,666 --> 00:15:52,566
希望你们上这门课前，知道pwn学院的所有知识
We expect you to come in knowing everything on pwn college.

310
00:15:52,633 --> 00:15:55,266
这个单子基本上囊括了pwn学院的所有东西。
That list basically has everything on pwn college.

311
00:15:56,766 --> 00:16:00,800
我们希望你们知道x86-64
We expect you to know x86-64

312
00:16:02,066 --> 00:16:07,633
并且能逆向x86-64下的程序
and to be able to reverse engineer x86-64.

313
00:16:07,966 --> 00:16:08,866
又跟丢我了
It lost track of me

314
00:16:08,966 --> 00:16:10,266
好了
Come on. There we go.

315
00:16:12,100 --> 00:16:15,900
希望你们知道如何编写shellcode
We expect you to know how to write shellcode

316
00:16:16,133 --> 00:16:17,866
能编写阅读C代码
writing and reading C

317
00:16:18,166 --> 00:16:20,033
能调试操作系统内核
debugging OS kernels,

318
00:16:20,066 --> 00:16:21,400
所有这些之类的东西
all of this stuff that 

319
00:16:21,566 --> 00:16:29,200
我们会把这些幻灯片贴在PWN学院道场的课程上
we'll post these slides on the course in the pwn college dojo.

320
00:16:29,233 --> 00:16:30,533
我们期待很多
We expect a lot.

321
00:16:31,000 --> 00:16:34,800
你可以去学这些东西，比如，在pwn学院
You can learn a lot of this stuff. For example, on pwn college

322
00:16:34,866 --> 00:16:36,133
你可以快速学一下
you can do it very rapidly.

323
00:16:36,866 --> 00:16:40,000
我们没设置技能检查模块
We don't have a skill check module

324
00:16:40,500 --> 00:16:42,700
我们相信你们
so we're going to trust your self-assessment

325
00:16:43,066 --> 00:16:45,633
能挺过这门课的自我评估
that you're going to be able to survive this course.

326
00:16:47,066 --> 00:16:50,700
我认为你们都能接受挑战
I think you can all rise to the challenge.

327
00:16:52,133 --> 00:16:53,866
一些人可能会失败
Some of you might fail along the way

328
00:16:53,933 --> 00:16:55,633
但我愿意接受这个代价
but that is a price I'm willing to pay.

329
00:16:56,566 --> 00:16:56,933
好的
All right.

330
00:16:57,433 --> 00:16:58,433
总之，不，我开玩笑的
Anyways, no, I'm just kidding.

331
00:16:58,466 --> 00:17:00,933
这不是官方的亚当的想法
That also not an official Adam-ism.

332
00:17:01,466 --> 00:17:01,833
好的
Okay.

333
00:17:05,866 --> 00:17:06,200
我们来看看
Let's see.

334
00:17:06,300 --> 00:17:12,600
本课程的所有内容都是实时构建的
Everything in this course we're building live as we deliver.

335
00:17:12,700 --> 00:17:21,100
这是XNU上高级漏洞应用研究的第一版
This is the first iteration of the XNU version of advanced applied vulnerability research.

336
00:17:21,133 --> 00:17:24,133
为什么这个东西总是跟丢我
Why is this thing insist on losing track of me?

337
00:17:29,366 --> 00:17:30,300
所以课程可能有变动
This might change.

338
00:17:30,433 --> 00:17:31,766
我们可能会发现
We might find that

339
00:17:31,833 --> 00:17:35,466
其实我们无法支持
hey, we actually can't support

340
00:17:36,100 --> 00:17:41,400
在pwn学院的ARM架构上运行真实的XNU
actually running the real XNU allocator in pwn college in ARM.

341
00:17:41,466 --> 00:17:43,933
我们也许会切换到x64或别的
We might have to switch it to X64 Or something.

342
00:17:44,133 --> 00:17:45,600
谁知道会发生什么
Who knows what will happen.

343
00:17:46,433 --> 00:17:47,733
我们会尽力的
We'll do our best.

344
00:17:48,333 --> 00:17:52,100
这类似pwn学院第一次授课
It'll be analogous to the very first run of a pwn college course ever.

345
00:17:53,933 --> 00:17:56,033
在2018年的CSE466课程
The first run of 466 in 2018

346
00:17:56,033 --> 00:18:00,300
那时尝试教内核模块
where there was an attempt to launch kernel modules

347
00:18:00,400 --> 00:18:04,833
我把内核模块加载到了我用来讲课的笔记本上
where I was loading them onto my laptop that I was presenting from 

348
00:18:05,233 --> 00:18:07,866
然后和我有bug的内核模块交互
and then interacting with my buggy kernel module

349
00:18:07,933 --> 00:18:10,500
结果毁了我的电脑和演讲
and killing my own laptop and killing the presentation.

350
00:18:10,566 --> 00:18:12,633
所以任何事情都有可能发生
So anything could happen.

351
00:18:13,233 --> 00:18:14,100
会很有趣的
It's going to be fun.

352
00:18:14,233 --> 00:18:16,166
我们会学到很多关于XNU安全的知识
We're going to learn a lot about XNU security.

353
00:18:16,800 --> 00:18:17,900
我们会成功的
We'll make it work.

354
00:18:18,333 --> 00:18:18,866
好的
All right.

355
00:18:19,800 --> 00:18:24,566
我，亚当·杜普，亚利桑那州立大学最酷的网络安全教授
Now that I, Adam Doupe, the coolest cyber security professor at ASU

356
00:18:25,066 --> 00:18:26,700
记住这个会出现在考试中
remember this will be on a test.

357
00:18:26,700 --> 00:18:30,033
你必须回答谁是ASU最酷的网络安全教授
You'll actually have to answer who's the coolest cyber security professor at ASU.

358
00:18:30,233 --> 00:18:31,000
是谁?
Who is it?

359
00:18:32,600 --> 00:18:33,633
twitch上的网友在吗
Is Twitch with us?

360
00:18:35,600 --> 00:18:36,433
让我们来看看。
Let's see.

361
00:18:36,800 --> 00:18:38,000
我们等一下twitch上的网友
We'll wait for Twitch.

362
00:18:39,800 --> 00:18:40,900
你们会要回答这个问题
You'll have to answer that 

363
00:18:41,033 --> 00:18:42,200
不要忘记
Don't forget

364
00:18:43,066 --> 00:18:46,833
我要走了，因为我吓到了大家
I'm going to bail now that I've scared everyone.

365
00:18:47,600 --> 00:18:52,566
很不幸，我今天有事
I unfortunately have a thing today.

366
00:18:53,266 --> 00:18:54,700
真是疯狂的一周
It's a crazy week.

367
00:18:54,866 --> 00:18:55,266
请
Yes?

368
00:18:55,300 --> 00:18:56,133
很快就好
Real quick.

369
00:18:56,166 --> 00:18:59,266
在教学大纲上，你们还没有规定办公室时间。
So on the syllabus, you don't have office hours set yet.

370
00:18:59,300 --> 00:19:01,066
你们有办公室时间吗?
Do you have office hours.

371
00:19:01,266 --> 00:19:02,333
我不知道。
I don't know.

372
00:19:03,266 --> 00:19:05,166
问下一周的我吧
Ask next week me.

373
00:19:05,300 --> 00:19:06,100
我想是有的
I think so.

374
00:19:06,200 --> 00:19:06,966
是的
Yes.

375
00:19:07,200 --> 00:19:10,700
我得承认，伙计们，我不是亚当·杜普。
I have to admit, guys, I'm not really Adam Doupe.

376
00:19:13,066 --> 00:19:15,000
亚当·杜普下周回来
Adam Doupe will be back next week.

377
00:19:15,366 --> 00:19:20,633
但你可以告诉他，你更喜欢之前的亚当·杜普
But you can tell him that you like the previous Adam Doupe better.

378
00:19:24,266 --> 00:19:27,766
通常这些课程有讲座和办公室时间
Usually these classes have the lecture and the office hours.

379
00:19:27,833 --> 00:19:30,066
但是这堂课的课时是三个小时
But this lecture is three hours long lecture period.

380
00:19:30,133 --> 00:19:33,900
所以这次我们有可能把它们结合起来
So it's possible that we'll combine it this time.

381
00:19:34,366 --> 00:19:34,733
酷
Cool.

382
00:19:37,166 --> 00:19:38,366
还有问题吗?
Any other questions?

383
00:19:41,100 --> 00:19:44,266
谁是亚利桑那州立大学最酷的网络安全教授?
Who's the coolest cyber security professor at ASU?

384
00:19:45,900 --> 00:19:46,266
好。
Good.

385
00:19:46,466 --> 00:19:47,833
他们已经学到了一些东西
They learned something already.

386
00:19:48,366 --> 00:19:48,900
完美
Perfect.

387
00:19:49,000 --> 00:19:52,733
我会把你交给非常能干的罗伯·沃兹
I will leave you in the very capable hands of Rob Waz

388
00:19:52,933 --> 00:19:56,500
他会帮助你们
who will teach you about the jump that you're about to take

389
00:19:56,566 --> 00:20:04,966
从真善美的，你们喜欢的x86
from the good and right and proper x86 that you know and love as the one true architecture

390
00:20:05,866 --> 00:20:10,200
进入到邪恶黑暗的ARM国度
and go into the dark evil realm of ARM 

391
00:20:10,233 --> 00:20:11,966
那里一切都是错的
where everything is wrong.

392
00:20:12,900 --> 00:20:13,633
罗伯?
Rob?

393
00:20:14,500 --> 00:20:15,333
好的
Okay.

394
00:20:19,466 --> 00:20:21,200
看看接手成功了没
Let's see if we got it here.

395
00:20:23,133 --> 00:20:23,733
看到了吗
See?

396
00:20:24,800 --> 00:20:25,533
在跟着你吗
You following?

397
00:20:25,766 --> 00:20:27,700
应该好了
I think we're there.

398
00:20:28,233 --> 00:20:28,966
祝你好运
Good luck.

399
00:20:31,800 --> 00:20:34,133
谢谢，Adam Doupe。
Thank you, Adam Doupe.

400
00:20:35,800 --> 00:20:41,866
谁看过DEFCON上的“谁的ppt”
So who has seen whose slide is it anyway at DEFCON?

401
00:20:41,900 --> 00:20:42,800
在这个活动中
It's an event they do 

402
00:20:42,800 --> 00:20:43,966
你会拿到一个随机的ppt
where you get a random slide deck

403
00:20:43,966 --> 00:20:47,100
你需要在不知道会拿到什么ppt的情况下演讲
and you have to present not knowing what it is that you're gonna have.

404
00:20:47,666 --> 00:20:49,666
现在基本就是这样的
That's basically what's gonna happen right now

405
00:20:50,133 --> 00:20:52,200
刚刚Yan在台上的30分钟
because the 30 minutes that Yan talked

406
00:20:52,266 --> 00:20:54,933
就是我看ppt的30分钟
was my 30 minutes I was gonna look at the slides.

407
00:20:55,433 --> 00:20:57,966
所以我们就看看手里有什么，跟着它讲
So we're gonna see what we got and roll with it.

408
00:20:58,466 --> 00:20:59,100
好吧？
Okay?

409
00:20:59,466 --> 00:21:00,800
就是好奇
Just out of curiosity

410
00:21:00,866 --> 00:21:06,066
谁有ARM64的使用经验?
who here has any experience with ARM64?

411
00:21:06,433 --> 00:21:07,300
有人吗？
Anyone?

412
00:21:08,000 --> 00:21:09,866
有人在挥手
We got some hand waving.

413
00:21:10,900 --> 00:21:11,866
我相信你们
I'll take it.

414
00:21:12,366 --> 00:21:15,900
如果我走错方向，请纠正我
Please correct me if I start stumbling in the wrong direction

415
00:21:16,200 --> 00:21:18,900
因为这很有可能发生
because that is very likely to occur.

416
00:21:20,266 --> 00:21:21,866
看看我们这里有什么
So let's see what we got here.

417
00:21:22,366 --> 00:21:24,633
这是CPU的示意图。
This is a diagram of a CPU.

418
00:21:25,733 --> 00:21:28,833
我们以前可能见过这张CPU图。
We've probably seen this diagram of a CPU before.

419
00:21:29,333 --> 00:21:30,600
这个很流行
It's a pretty popular one.

420
00:21:31,466 --> 00:21:33,866
它包含了很多部分
It has a lot of parts of stuff going on.

421
00:21:34,466 --> 00:21:36,733
和你已知的非常相似
It's gonna be very similar to what you already know.

422
00:21:38,466 --> 00:21:43,566
就cpu而言，汇编语言是唯一真正的编程语言
Assembly is the only true programming language as far as talking about CPUs

423
00:21:43,666 --> 00:21:49,133
除非你学过CSE 466或CSE 598
except if you've taken CSE 466 or CSE 598

424
00:21:49,633 --> 00:21:51,533
就是我教的软件利用课程
the software exploitation class that I teach

425
00:21:51,600 --> 00:21:55,166
当时我们深入研究了微架构利用
where we kind of delve into micro architectural exploitation

426
00:21:55,233 --> 00:21:58,000
了解到汇编也是个谎言
and you learn that assembly is also kind of a lie.

427
00:21:58,066 --> 00:21:59,500
但就这门课的目标而言
but for the purposes of this class

428
00:21:59,533 --> 00:22:01,066
我觉得我们不会讲得那么深
I don't think we're gonna go that deep.

429
00:22:01,166 --> 00:22:03,266
所以汇编将是我们的基础真理
So assembly will be our ground truth.

430
00:22:04,166 --> 00:22:05,600
在汇编中，我们都会做什么？
What kind of things do we do in assembly?

431
00:22:05,633 --> 00:22:07,900
汇编是一种非常单纯的语言
Assembly is kind of a very simple language.

432
00:22:08,200 --> 00:22:11,666
我们会做一些，如数据操控，比较
So we do things such as data manipulation, comparisons.

433
00:22:11,700 --> 00:22:13,100
有控制流指令
We have control flow instructions

434
00:22:13,600 --> 00:22:15,333
我们可以执行系统调用
and we can perform syscalls.

435
00:22:15,666 --> 00:22:18,533
如果你了解x86，那这些你可能都看过了
If you know x86, you've probably seen all this.

436
00:22:19,433 --> 00:22:21,666
汇编语言有寄存器的概念
Assembly language has this concept of registers.

437
00:22:21,700 --> 00:22:23,066
这是存储数据的地方
This is where data is stored.

438
00:22:23,533 --> 00:22:25,900
我们还可以和内存交互
We can also interact with memory.

439
00:22:27,233 --> 00:22:30,500
内存中可以有正在执行的指令
Memory could be the instructions that are being executed

440
00:22:30,766 --> 00:22:32,500
它们组成了程序
that it consist of the program.

441
00:22:32,600 --> 00:22:34,133
我们可能会和栈交互
We could be interacting with the stack

442
00:22:34,200 --> 00:22:37,200
或其它映射上的内存区域
or some other region of memory that happens to be mapped.

443
00:22:38,566 --> 00:22:41,000
寄存器存在于CPU中
So registers exist on the CPU

444
00:22:41,066 --> 00:22:44,233
它们是非常快速的临时数据存储区
and they're very fast temporary stores of data.

445
00:22:45,733 --> 00:22:48,833
寄存器是一种通用存储
Registers serve as kind of a general purpose storage.

446
00:22:48,900 --> 00:22:51,700
大多数寄存器都没有指定的含义
Most registers, they don't have an assigned meaning.

447
00:22:51,933 --> 00:22:56,366
这个概念可以一直追溯到我们拥有的第一种cpu 8085
This concept goes all the way back to the very first kind of CPUs where we had the 8085.

448
00:22:56,666 --> 00:22:58,200
这些寄存器很小
These registers were very small

449
00:22:58,233 --> 00:23:04,300
在历代Intel的CPU中，延续了一套命名规范
and we'll notice kind of a consistent naming mechanism in the Intel kind of history of CPUs.

450
00:23:04,466 --> 00:23:07,033
原来我们有a c d e
Where originally we had a,c,d,e

451
00:23:07,466 --> 00:23:09,333
然后来到8086架构。
then we went to the 8086 architecture.

452
00:23:09,333 --> 00:23:10,733
这些寄存器稍微大一点
These registers were a little bit bigger.

453
00:23:10,766 --> 00:23:13,266
变成了ax cx dx bx。
All of a sudden it's ax,cx,dx,bx.

454
00:23:13,633 --> 00:23:15,800
我们到了x86
We got to x86

455
00:23:16,233 --> 00:23:18,500
这是一个32位的架构
which is a 32-bit architecture.

456
00:23:18,833 --> 00:23:19,333
这里
This is where

457
00:23:19,400 --> 00:23:22,766
其中一些寄存器你们现在可能比较熟悉了
some of these registers may be something that you are a bit more familiar with now.

458
00:23:22,766 --> 00:23:25,700
我们有EAX ECX EDX。
We had EAX, ECX, EDX.

459
00:23:25,733 --> 00:23:27,366
然后我们看到ESP和EBP。
And then we see ESP and EBP.

460
00:23:27,400 --> 00:23:29,533
这些不是通用寄存器。
These are not general purpose registers.

461
00:23:30,400 --> 00:23:33,866
有人知道ESP或EBP是什么吗?
Does anyone know what ESP or EBP is by chance?

462
00:23:33,933 --> 00:23:34,433
直接告诉我吧
Just hit me.

463
00:23:34,500 --> 00:23:35,366
我喜欢互动
I like interaction.

464
00:23:35,466 --> 00:23:36,066
有什么回答？
What do we got?

465
00:23:36,966 --> 00:23:38,866
栈指针和基指针。
Stack pointer and base pointer.

466
00:23:39,300 --> 00:23:42,300
这就是这个缩写的意思
That is in fact what the acronym stands for.

467
00:23:42,700 --> 00:23:44,100
在英特尔无限的智慧中
In Intel's infinite wisdom

468
00:23:44,133 --> 00:23:46,166
EBP在技术上是一个栈帧指针
EBP is technically a frame pointer

469
00:23:46,633 --> 00:23:48,500
我觉得这有点搞笑
which I think is kind of funny.

470
00:23:48,800 --> 00:23:54,100
但，没错，从缩写来看，这是正确的。
But yes, based upon the acronym, that is correct.

471
00:23:54,700 --> 00:23:56,633
然后到了AMD64
then we get to AMD64

472
00:23:56,700 --> 00:24:01,233
Yan很爱这个架构
which is the architecture that Yan truly loves

473
00:24:01,633 --> 00:24:05,766
并且绝大多数pwn学院的设备都是这个
and is definitely what the vast majority of pwn college has been.

474
00:24:06,033 --> 00:24:11,366
这里我们能看到64位的寄存器，RAX,RCX,RDX等等
That's where we see the 64-bit versions of these registers, RAX, RCX, RDX, etc.

475
00:24:11,833 --> 00:24:15,233
现在我们看到的是最现代的计算机了
And now we are kind of at what most modern computing is.

476
00:24:15,933 --> 00:24:17,433
这门课
Now for this class

477
00:24:17,500 --> 00:24:19,433
正如Yan提到的
as Yan mentioned

478
00:24:19,666 --> 00:24:23,566
我们将尝试在ARM上做所有的事情
we're going to try and do everything on ARM

479
00:24:23,800 --> 00:24:28,066
ARM是一个非常不同的指令集
 And ARM is a very different instruction set.

480
00:24:28,866 --> 00:24:36,400
我们的通用寄存器是X0 X1 X2 X3。
And so our general purpose registers are X0, X1, X2, X3.

481
00:24:36,533 --> 00:24:38,000
就是X 加上一个数字
They're just X and a number.

482
00:24:38,266 --> 00:24:40,666
它们都是通用寄存器
They're all just general purpose registers.

483
00:24:41,233 --> 00:24:43,566
这里有个问题
Now there is kind of a gotcha there

484
00:24:43,566 --> 00:24:47,133
如果ppt上有，我们会看到
that we'll see if it's on the slides.

485
00:24:47,366 --> 00:24:48,700
我们拭目以待
We'll find out.

486
00:24:49,533 --> 00:24:50,700
值得注意的是
It is worth noting that

487
00:24:50,966 --> 00:24:54,500
在AMD64上，你习惯使用的EIP或RIP
on AMD64 where you were used to having EIP or RIP

488
00:24:54,500 --> 00:24:55,933
就是你的指令指针
which is your instruction pointer.

489
00:24:55,966 --> 00:24:58,466
在ARM上，你实际上不能
On ARM you actually can't directly interact with RIP

490
00:24:58,933 --> 00:25:01,700
直接与RIP等同的指令指针交互
the equivalent for the instruction pointer.

491
00:25:03,933 --> 00:25:04,633
酷
Cool.

492
00:25:05,433 --> 00:25:09,466
在AMD64中，如你可能熟悉的
In AMD64, as you're probably familiar

493
00:25:09,700 --> 00:25:12,366
RAX是64位寄存器
RAX is the 64-bit register

494
00:25:12,466 --> 00:25:15,900
你可以用EAX访问RAX中的一部分
You can access a subsection of that with EAX

495
00:25:16,700 --> 00:25:18,966
然后是AX的那一小部分
and then a smaller subsection with AX

496
00:25:19,000 --> 00:25:20,833
然后是AL的那一小部分。
and then a smaller subsection with AL.

497
00:25:20,933 --> 00:25:22,966
你可以访问部分寄存器
You can address partial registers.

498
00:25:23,200 --> 00:25:25,466
ARM也有类似的情况
There's a similar phenomenon here with ARM.

499
00:25:25,833 --> 00:25:28,200
不同的是，我们现在有X<N>
The difference here is we have XN

500
00:25:28,466 --> 00:25:30,333
它是64位寄存器
which is going to be your 64-bit register

501
00:25:30,400 --> 00:25:32,800
然后是W<N>，这是一个32位寄存器。
and then we have WN, which is a 32-bit register.

502
00:25:33,133 --> 00:25:35,066
这里只有两种尺寸
So we just have two sizes here.

503
00:25:37,066 --> 00:25:38,933
ARM是一个简化的指令集
ARM is a reduced instruction set

504
00:25:38,966 --> 00:25:42,766
所以它确实有一些我们可能不熟悉的东西
so it does have some things that we probably aren't familiar with

505
00:25:42,833 --> 00:25:46,466
或者说，我们不能很好地映射到AMD64的东西
or that we can't really map well to AMD64.

506
00:25:46,633 --> 00:25:49,466
其中之一就是零寄存器的概念
One of these things is the concept of a zero register.

507
00:25:49,600 --> 00:25:52,666
这是一个总是为零的寄存器
This is a register that just always has zero.

508
00:25:52,866 --> 00:25:54,333
每次从中取值
Anytime we move something from it

509
00:25:54,400 --> 00:25:55,166
你都会得到0
you're going to get zero

510
00:25:55,266 --> 00:25:56,933
往它里面写，等同于nop
writing to it is essentially a nop

511
00:25:57,266 --> 00:25:58,333
但它确实存在
but it exists.

512
00:25:59,666 --> 00:26:01,300
ARM有四个栈指针
ARM has four stack pointers

513
00:26:01,366 --> 00:26:02,466
我也不清楚
which I didn't know

514
00:26:03,066 --> 00:26:06,000
因为我没有接触过ARM的不同权限级别
because I haven't interacted with different privilege levels on ARM

515
00:26:06,133 --> 00:26:08,033
这很令人期待
so that will be something exciting to see.

516
00:26:09,133 --> 00:26:12,866
ARM还有一个链接寄存器和栈帧指针。
ARM also has a link register and frame pointer.

517
00:26:12,966 --> 00:26:14,733
链接寄存器是
The link register is

518
00:26:14,866 --> 00:26:16,700
在AMD64中
So in AMD64

519
00:26:17,200 --> 00:26:18,800
当您执行呼叫时
when you perform a call

520
00:26:18,866 --> 00:26:23,166
你会将要保存的返回地址压到栈上
you push the saved return address onto the stack.

521
00:26:23,433 --> 00:26:25,333
ARM上的链接寄存器
The link register on ARM

522
00:26:25,400 --> 00:26:27,200
就放着要保存的返回地址
holds that saved return address

523
00:26:27,333 --> 00:26:30,333
在call的等效指令被执行时
when the equivalent instruction is executed.

524
00:26:30,400 --> 00:26:32,933
希望这在后面的幻灯片中会提到
Hopefully, that's mentioned a bit more later in the slides.

525
00:26:33,000 --> 00:26:35,400
如果没有，我们将尝试进行现场演示，看看会发生什么
If not, we'll try and live demo it and see what happens.

526
00:26:38,266 --> 00:26:40,100
我不关心V寄存器。
I don't care about V registers.

527
00:26:40,433 --> 00:26:42,833
没有人想处理SIMD
Nobody wants to deal with SIMD.

528
00:26:45,066 --> 00:26:47,166
ARM指令是如何工作的?
How do ARM instructions work?

529
00:26:47,266 --> 00:26:51,800
在x86中，通常是这样的模式，操作码 目标，源
so in x86, we typically have this pattern of opcode destination, source.

530
00:26:52,033 --> 00:26:56,766
在ARM中，是操作码，操作数，操作数，操作数，操作数，操作数。
With ARM, we have opcode, operand, operand, operand, operand, operand.

531
00:26:57,700 --> 00:27:00,300
你有多个操作数
You have a various number of operands.

532
00:27:01,333 --> 00:27:05,400
这里，我们看到mov遵循类似的模式
Here we see move follows that similar pattern.

533
00:27:05,500 --> 00:27:07,466
我们可以 mov x0, x2
We could have move x0, x2

534
00:27:09,100 --> 00:27:12,933
还可 add x0, x0, 接着一个#1
add, x0, x0, and then hash 1.

535
00:27:13,733 --> 00:27:14,900
实际上有
There actually is

536
00:27:15,033 --> 00:27:16,766
以后会找找看，但我相信
we'll find out, but I believe

537
00:27:18,033 --> 00:27:21,800
2个操作数版本的add
a two operand version of add.

538
00:27:22,866 --> 00:27:27,066
3个操作数版本的add，指定了目标的位置
The three version operand of add is specifying where the destination is.

539
00:27:27,233 --> 00:27:32,566
add x0,x0, #1 等价于 add x0, #1
Add x0, x0, 1 is the equivalent to add x0, 1.

540
00:27:33,000 --> 00:27:36,466
但如果想用2个寄存器的值相加，结果放到第三个寄存器
but If for some reason we wanted to add two registers and store it in a third register

541
00:27:36,466 --> 00:27:40,800
我们就可以通过3个操作数实现
we have the ability to do that by specifying three operands.

542
00:27:40,966 --> 00:27:43,833
类似地，有一些你们之前见过的东西
Similarly, we have things that you've seen before

543
00:27:44,033 --> 00:27:47,333
比如比较和分支
things like compare and then branch.

544
00:27:47,400 --> 00:27:50,366
这里的分支，B代表分支
Now, branch here, B for branch is

545
00:27:51,533 --> 00:27:56,300
相当于x86的jmp跳转指令
the equivalent of a x86 jump instruction.

546
00:27:58,433 --> 00:27:59,366
偷看一下
Sneak a peek.

547
00:27:59,466 --> 00:28:00,433
ppt会有这些吗
Does he go there?

548
00:28:01,600 --> 00:28:02,066
我不知道。
I don't know.

549
00:28:02,300 --> 00:28:03,333
我先说了
I'm going to hit it earlier.

550
00:28:04,966 --> 00:28:08,000
jmp对应分支b
Jump is B for branch.

551
00:28:08,266 --> 00:28:12,733
call，就是我说的“嘿，有这个链接寄存器”
Call, which is where I mentioned, hey, this link register exists.

552
00:28:13,066 --> 00:28:18,333
call，在ARM上对应 BL
Call, the equivalent on arm, is BL

553
00:28:18,866 --> 00:28:21,833
它是分支并链接的缩写
which is an acronym for branch and link.

554
00:28:22,466 --> 00:28:23,200
也就是说
That is saying

555
00:28:23,266 --> 00:28:24,166
嘿，我们要跳到某个地方
hey, we're going to jump somewhere

556
00:28:24,200 --> 00:28:27,600
但我们也会在链接寄存器里放一个值
but we're also going to put a value in that link register

557
00:28:27,666 --> 00:28:29,633
这样我们就能返回回来
so that we have somewhere to return to.

558
00:28:31,133 --> 00:28:31,566
怎么了
Yes?

559
00:28:33,100 --> 00:28:34,600
PC到底是什么?
What exactly is the PC?

560
00:28:35,733 --> 00:28:36,600
我在哪儿
Where am I?

561
00:28:36,733 --> 00:28:38,200
什么是……
What is the...

562
00:28:40,666 --> 00:28:42,100
什么是链接寄存器?
What is the link register?

563
00:28:42,233 --> 00:28:43,600
哦,PC吗?
Oh, PC?

564
00:28:44,666 --> 00:28:48,666
PC，我想是程序计数器的缩写
PC So that is, I believe the acronym there is program counter

565
00:28:49,000 --> 00:28:52,466
这是指令指针的另一种说法
which is just another term for the instruction pointer.

566
00:28:53,033 --> 00:28:57,200
所以，它是ARM上对应的RIP吗
So basically i mean the arm equivalent of RIP.

567
00:28:57,966 --> 00:29:00,366
PC相当于RIP吗
PC is the arm equivalent of RIP.

568
00:29:00,433 --> 00:29:03,233
你甚至可以在x86上的GDB中用到PC
I believe you can even use PC in GDB on x86.

569
00:29:03,566 --> 00:29:06,166
它是指令指针的通称
It's a generic term for the instruction pointer.

570
00:29:09,166 --> 00:29:13,500
我们能看到，链接寄存器会在BL执行时用到
And we see here that this link register is used on BL

571
00:29:13,566 --> 00:29:15,566
BL相当于x86上的call
which is the equivalent of the x86 call.

572
00:29:15,766 --> 00:29:17,033
当ret时
And then when we ret

573
00:29:17,100 --> 00:29:18,600
实际发生的是
what's really happening is

574
00:29:18,666 --> 00:29:22,466
我们将RIP改成LR中存的值
we are setting RIP to whatever is stored in LR.

575
00:29:23,833 --> 00:29:25,100
很酷吧
Cool?

576
00:29:30,600 --> 00:29:34,733
为什么要有操作数，操作数，操作数，操作数?
Why do we have operand, operand, operand, operand?

577
00:29:35,033 --> 00:29:35,733
我不知道
I don't know.

578
00:29:36,033 --> 00:29:36,800
我不知道为什么
I don't know why.

579
00:29:36,933 --> 00:29:42,133
但ARM的优点之一是，每条指令的大小都是32位
But one of the nice things about ARM is that every instruction is 32 bits in size.

580
00:29:42,333 --> 00:29:46,800
一旦你习惯了，这其实是一件很酷的事情
And this is something that's actually kind of cool once you get used to it

581
00:29:46,900 --> 00:29:50,633
因为你可以更容易地推理和解释指令
because you can reason and interpret instructions a lot easier.

582
00:29:50,866 --> 00:29:55,666
例如，在x86上，大多数push指令的长度只有两个字节
So on x86, for instance, most push instructions are only two bytes in length.

583
00:29:55,866 --> 00:29:59,333
但是如果你想mov一个32位的常量
But if you wanted to move a 32-bit constant

584
00:29:59,433 --> 00:30:02,966
那将是32位加上一个数
that's going to be 32 bits plus something else.

585
00:30:03,066 --> 00:30:07,800
因此，单个汇编指令的长度在x86上是不同的
So the length of an individual assembly instruction will vary on x86.

586
00:30:07,800 --> 00:30:13,933
但在ARM上，每条指令都是32位的固定长度。
But on ARM, every instruction is a fixed length of 32 bits.

587
00:30:14,433 --> 00:30:16,466
这听起来真的很酷
Now that sounds really cool.

588
00:30:16,733 --> 00:30:17,900
但你仔细思考一下会发现
But then when you start thinking about it

589
00:30:17,933 --> 00:30:23,533
AMD64有这些可变长度指令是有原因的
there's a reason that AMD64 has these variable length instructions.

590
00:30:24,500 --> 00:30:28,200
AMD64中，如果我想mov一个32位常量
I said if I have AMD64 and I want to move a 32-bit constant

591
00:30:28,200 --> 00:30:31,133
这个32位常量必须在指令中
well, that 32-bit constant has to be in the instruction.

592
00:30:31,933 --> 00:30:35,200
如果我的指令长度限制在32位
If my instructions are limited to 32 bits in length

593
00:30:35,866 --> 00:30:38,600
那我该如何mov一个32位常量呢
how do I move a 32-bit constant?

594
00:30:39,633 --> 00:30:40,800
事实证明，你不能
Turns out you can't.

595
00:30:42,466 --> 00:30:43,600
这是个问题
That's a problem

596
00:30:43,666 --> 00:30:45,533
因为我要mov的数字大于
because the number I want to move is larger

597
00:30:45,600 --> 00:30:47,700
指令长度的限制
than my limitation on the instruction length.

598
00:30:47,966 --> 00:30:49,566
正因为如此
And because of that

599
00:30:49,766 --> 00:30:54,000
ARM64会有一些有趣的机制
ARM64 has some interesting mechanics 

600
00:30:54,100 --> 00:30:56,633
希望在后面的幻灯片中会讲到
that hopefully are included in the later slides.

601
00:30:58,733 --> 00:31:07,266
ARM64和AMD64之间有一种弱关联性
So here we have kind of a loose equivalency between ARM64 and AMD64 here.

602
00:31:08,400 --> 00:31:09,433
如果我们要
So if we're going to

603
00:31:09,433 --> 00:31:11,800
例如，mov rax, rbx
for instance, mov rbx into rax

604
00:31:11,866 --> 00:31:15,033
等价的指令是mov x0, x1
the equivalent instruction is going to be mov x0, x1.

605
00:31:15,466 --> 00:31:18,766
如果我们想解引用一个内存地址
If we want to dereference a memory address

606
00:31:18,866 --> 00:31:21,666
我们遵守一个类似我们已知的模式
we follow a similar pattern to kind of what we've already seen.

607
00:31:21,933 --> 00:31:24,633
我们在AMD64上有这个mov
We have that move on AMD64.

608
00:31:24,700 --> 00:31:29,066
在amd64上是mov rax 跟着 [ RBP+4 ]
We have that move RAX and then the brackets RBX plus 4.

609
00:31:29,200 --> 00:31:32,200
在ARM上等价的是, mov x0,
The equivalent on ARM is we move x0,

610
00:31:32,200 --> 00:31:33,466
也有方括号
We still have the brackets.

611
00:31:33,533 --> 00:31:34,966
但是注意这个常数
But note that the constant

612
00:31:35,000 --> 00:31:39,566
任何时候我引用一个常量，它都以 #符号开始
anytime I'm referencing a constant, it starts with that hash symbol.

613
00:31:39,766 --> 00:31:43,433
所以模式和之前的基本一样
So we still have that same general kind of pattern that you've seen.

614
00:31:44,933 --> 00:31:48,066
这里的add，我们已经讨论过了。
over here, add, we've talked about that.

615
00:31:48,433 --> 00:31:49,133
mul
mul.

616
00:31:49,200 --> 00:31:53,033
那么你认为mul x5, x6, x7是什么效果
So what do you think mul x5, x6, x7 does?

617
00:31:53,133 --> 00:31:54,500
根据我说过的
Just based on what I've already said.

618
00:31:54,533 --> 00:31:55,800
我们有三个操作码
We got three opcodes.

619
00:31:55,833 --> 00:31:56,666
都有什么回答
What do we got?

620
00:32:03,166 --> 00:32:03,466
好的
Okay.

621
00:32:03,466 --> 00:32:05,500
Twitch上的回答是
So the statement for Twitch is

622
00:32:05,533 --> 00:32:07,266
我们取x6和x7的值
we're going to take x6 and x7

623
00:32:07,500 --> 00:32:08,500
把它们相乘
we're going to multiply them 

624
00:32:08,533 --> 00:32:10,300
把结果放入x5
and we're going to put the result in x5.

625
00:32:10,800 --> 00:32:11,533
听起来没毛病
Sounds good to me

626
00:32:11,800 --> 00:32:12,666
我们有三个操作码
We got three opcodes.

627
00:32:12,800 --> 00:32:14,266
好了，这已经说得通了
All right, this makes sense already 

628
00:32:14,300 --> 00:32:15,866
我还什么都没做
and I haven't really done anything.

629
00:32:16,166 --> 00:32:16,966
这很好
This is good.

630
00:32:17,133 --> 00:32:20,700
如果能想得通，说明应该是跟上了
If you made that logical leap, you might be in the right room.

631
00:32:22,066 --> 00:32:27,633
好的，add x0, x0, #0x1
Okay, add x0, x0, hash x1.

632
00:32:27,666 --> 00:32:28,366
有人回答吗
Any takers?

633
00:32:28,433 --> 00:32:29,033
这是在做什么？
What are we doing?

634
00:32:30,533 --> 00:32:31,500
来吧
Come on.

635
00:32:31,700 --> 00:32:32,500
那边的同学
You right there.

636
00:32:32,566 --> 00:32:33,566
这是在做什么？
What are we doing?

637
00:32:33,666 --> 00:32:37,700
在将x0的值加1，然后把结果放到x0
You're adding one to x0 and storing the result into x0.

638
00:32:37,733 --> 00:32:39,300
好的，漂亮
All right, that's beautiful.

639
00:32:39,633 --> 00:32:40,633
所以答案是
So the answer is

640
00:32:40,633 --> 00:32:42,200
我们取x0中的值
we're taking the value in x0

641
00:32:42,266 --> 00:32:43,533
加上常数1
adding the constant one to it

642
00:32:43,566 --> 00:32:45,733
把结果存储在x0中
and storing it in x0.

643
00:32:47,066 --> 00:32:52,333
现在我们有一些不同的缩略词
Now we have a few kind of acronyms that are a little bit different

644
00:32:52,366 --> 00:32:53,766
但它们很容易学会。
but they're pretty easy to pick up.

645
00:32:54,266 --> 00:32:55,833
这里我看到了
So right here I see

646
00:32:55,866 --> 00:33:00,966
ldr x0然后解引用x1
ldr x0 and then we are kind of dereferencing x1.

647
00:33:01,033 --> 00:33:04,266
LDR是加载寄存器的缩写。
ldr is a shorthand acronym here for load register.

648
00:33:04,300 --> 00:33:05,933
我们要从内存中加载一些东西
So we're going to load something from memory

649
00:33:05,966 --> 00:33:07,333
我们要把它存到这个寄存器里
we're going to store it in the register

650
00:33:07,500 --> 00:33:09,366
我们从x0加载到
we are loading from x0

651
00:33:09,533 --> 00:33:12,633
抱歉，是从x1中的内存地址处加载
I'm sorry, loading from the memory address defined in x1

652
00:33:12,766 --> 00:33:15,233
存储到x0寄存器
we are storing it in the register x0.

653
00:33:18,066 --> 00:33:22,266
根据刚刚说的，你认为str是什么?
Now what do you think str is based on what I just said?

654
00:33:22,800 --> 00:33:25,600
哦，有人说是存储寄存器
Oh, we got store register.

655
00:33:25,633 --> 00:33:27,000
我们做得很好，伙计们。
We are doing good, guys.

656
00:33:27,033 --> 00:33:28,533
我们已经上手了
We're on a hot, you know, we're on it

657
00:33:28,733 --> 00:33:29,766
小菜一碟
just crushing it.

658
00:33:29,833 --> 00:33:31,000
好的，这个有点难
All right, now this one's a trick.

659
00:33:31,000 --> 00:33:31,933
STP是什么?
What's STP?

660
00:33:32,000 --> 00:33:32,866
你们觉得呢?
What do you think?

661
00:33:35,200 --> 00:33:37,366
好的，有人说 存储 指针
Okay, we got store pointer.

662
00:33:37,466 --> 00:33:40,333
我不知道的话，也会这样猜
That would make, I would guess that if I didn't know better.

663
00:33:40,366 --> 00:33:42,600
我听到了不一样的回答
What was, I heard something else.

664
00:33:44,766 --> 00:33:45,766
说的好像是栈指针
Something about stack pointer.

665
00:33:45,800 --> 00:33:47,400
好的，字母上说得通
Okay, those letters make sense.

666
00:33:47,466 --> 00:33:48,400
我能接受
I'd take that.

667
00:33:48,466 --> 00:33:49,466
还有一个回答
We got one more.

668
00:33:51,366 --> 00:33:53,400
好吧，这个有点怪
Okay, now that is a weird thing to say.

669
00:33:53,733 --> 00:33:54,666
Twitch上的回答
For Twitch here.

670
00:33:57,166 --> 00:33:58,466
好，好，好
Yeah, yeah, yeah, all right.

671
00:33:58,500 --> 00:34:01,700
直觉告诉我，你之前接触过ARM
Something tells me you've messed around with ARM before.

672
00:34:02,566 --> 00:34:08,400
直播间上说的是，STP是存储对的缩写
So the statement here for the stream is STP is an acronym for store pair.

673
00:34:08,566 --> 00:34:14,466
这是我们在AMD64上完全没有的东西
This is something that we don't have, in equivalent really, at all on AMD64.

674
00:34:14,633 --> 00:34:16,000
所以我们在存储
And so we're storing

675
00:34:16,533 --> 00:34:19,466
我们取这一对寄存器
so we're taking the pair of registers

676
00:34:19,533 --> 00:34:20,533
X1和x2
x1 and x2

677
00:34:20,666 --> 00:34:22,233
它们的尺寸有多大?
which are how big in size?

678
00:34:26,566 --> 00:34:28,400
听到了一些回答
I heard a few things.

679
00:34:29,466 --> 00:34:30,300
有哪些回答？
What do we got?

680
00:34:30,666 --> 00:34:35,033
有一个说的是32位
All right, so one of the statements was 32 bits.

681
00:34:35,433 --> 00:34:37,633
另一个说的是64位
The other one was 64 bits.

682
00:34:38,066 --> 00:34:41,800
x寄存器是64位的
So the x registers are 64 bits.

683
00:34:42,400 --> 00:34:45,933
w寄存器在访问低32位
The w registers are accessing the lower 32 bits.

684
00:34:47,133 --> 00:34:53,500
当我们stp x1 x2
So when we have store pair x1, x2

685
00:34:54,066 --> 00:34:59,700
我们实际上存储了两个64位寄存器
we are actually storing two 64 bit registers

686
00:35:00,166 --> 00:35:03,433
到x0中定义的内存地址
to the memory location that is defined in x0.

687
00:35:03,766 --> 00:35:08,900
所以这一条指令，移动了128位数据
So this is one instruction that is moving 128 bits.

688
00:35:10,233 --> 00:35:16,066
在一条指令中，将两个寄存器的数据放入内存
We're putting two registers worth of data to memory in one instruction.

689
00:35:17,266 --> 00:35:20,033
所以这肯定有点奇怪
So things definitely get a little bit weird.

690
00:35:20,766 --> 00:35:23,233
根据下一张幻灯片的内容，还能变得更怪
And they can get weirder depending on what's in the next slide.

691
00:35:25,033 --> 00:35:27,166
好吧，也没那么奇怪
Okay, well that isn't that weird.

692
00:35:27,333 --> 00:35:29,266
拜托，我们比这强
Come on, we can do better than that.

693
00:35:30,466 --> 00:35:35,166
在这里能看到，可以访问寄存器中的部分数据
Here we see that you can access smaller amounts of data in a register.

694
00:35:35,366 --> 00:35:38,233
在AMD64中也有同样的现象
We have the same phenomenon here in AMD64.

695
00:35:38,633 --> 00:35:42,666
例如，我们可以，加载一个字节，半个字，一个字
So we can, for instance, load an individual byte, a half word, a word.

696
00:35:43,366 --> 00:35:45,166
我不认为这特别有趣
I don't think that's particularly interesting.

697
00:35:45,200 --> 00:35:48,900
但你能看到，我们是如何添加后缀，来完成这个的
But you see how we can suffix these instructions to pull that off.

698
00:35:50,166 --> 00:35:53,033
啊哦，我不知道BFI是什么
Uh oh, I don't know what BFI is.

699
00:35:54,000 --> 00:35:55,866
哦，幻灯片有说明
Oh, the slide says it.

700
00:35:55,933 --> 00:35:59,666
它说，指令可以移动或操纵bit，从一个寄存器，到另一个寄存器
It says, "Instructions can move and manipulate bits from one register to another"

701
00:35:59,733 --> 00:36:01,633
位 域 插入
A bit field insert

702
00:36:02,533 --> 00:36:03,700
好吧，那好吧。
Okay, all right, then.

703
00:36:03,933 --> 00:36:05,133
我们看看这里有什么
Let's see what we got here.

704
00:36:06,300 --> 00:36:10,733
bfi x1, x0， #9， #6。
BFI X1, X0, #9, #6.

705
00:36:10,766 --> 00:36:13,100
我有四个操作数
So I've got four operands.

706
00:36:13,666 --> 00:36:18,433
我们要把低六位移到X1中
We're going to move the lower six bits into X1.

707
00:36:19,266 --> 00:36:22,366
其中x1的第9位，是x0的最低位
Where bit nine in X1 is the lowest

708
00:36:22,833 --> 00:36:24,233
这是啥？
what?

709
00:36:25,433 --> 00:36:28,033
有人帮我翻译一下吗?
And anyone translate this for me?

710
00:36:31,233 --> 00:36:32,500
你有个猜测吗
We got a guess?

711
00:36:33,000 --> 00:36:33,966
没有
We don't got a guess.

712
00:36:34,433 --> 00:36:37,266
当我们遇到未知的事物，要怎样？
So what happens if we don't know something?

713
00:36:37,466 --> 00:36:39,433
你的总体策略是什么?
What's your general strategy?

714
00:36:39,633 --> 00:36:44,033
如果你在网络安全领域走了这么远，你可能不会...
If you've made it this far in cybersecurity, you're probably not...

715
00:36:44,333 --> 00:36:48,900
身处未知对你来说并不陌生
Being in the unknown is not foreign to you.

716
00:36:50,233 --> 00:36:51,233
我们该怎么办?
What should we do?

717
00:36:51,700 --> 00:36:53,400
我们正在分析幻灯片
We're parsing the slide.

718
00:36:55,233 --> 00:36:56,233
栈溢出？
Stack overflow.

719
00:36:56,233 --> 00:36:57,933
好的，这很好。
Okay, that's pretty good.

720
00:36:58,033 --> 00:36:58,966
这很好。
That's pretty good.

721
00:36:59,633 --> 00:37:03,000
如果是个别的话题，我会读man手册
If this were a different topic, I would have said read the man page.

722
00:37:03,000 --> 00:37:03,666
对吧?
Right?

723
00:37:04,266 --> 00:37:05,766
我们这里没有man手册
We don't have man pages here

724
00:37:05,833 --> 00:37:09,933
但幻灯片底部藏了些东西
but one of the things that is hiding at the bottom of these slides

725
00:37:12,633 --> 00:37:14,900
其中之一是ARM文档
is the ARM documentation

726
00:37:15,100 --> 00:37:19,366
曾经在pwn学院的道场有链接
which used to be linked in the pwn College Dojo and

727
00:37:19,366 --> 00:37:21,400
后来ARM换了网页地址
then ARM changed the web address.

728
00:37:21,400 --> 00:37:23,033
所以现在它不在这里了
So now it doesn't go here.

729
00:37:23,200 --> 00:37:25,933
它实际上是非常详实可靠的文档
It's actually very solid documentation.

730
00:37:27,233 --> 00:37:30,033
看看我们能不能找到答案
Let's see if I can find the right one.

731
00:37:36,133 --> 00:37:39,166
我们看一下这里
And we can take a look here.

732
00:37:39,200 --> 00:37:40,300
我在找什么
What am I looking for?

733
00:37:40,300 --> 00:37:41,233
BFI吗?
BFI?

734
00:37:42,066 --> 00:37:46,266
位域插入，这是BFM的别名
Bitfield insert, which apparently is an alias for BFM.

735
00:37:46,766 --> 00:37:47,766
ppt上有这个吗
Did he have that there?

736
00:37:47,866 --> 00:37:49,433
会讲到bfm吗
Did he get us BFM?

737
00:37:54,533 --> 00:37:55,466
不会
No.

738
00:37:55,700 --> 00:37:56,033
看到了吗?
See?

739
00:37:56,066 --> 00:37:59,133
这告诉我们它是个别名
I'm showing us this is alias, all right?

740
00:37:59,166 --> 00:38:00,866
文档就是真理
Documentation is truth.

741
00:38:01,000 --> 00:38:02,000
BFM。
BFM.

742
00:38:03,133 --> 00:38:04,566
有什么描述
What do we got here?

743
00:38:05,800 --> 00:38:08,033
哦，现在它说，它总是通过别名访问。
Oh, now it just says it's always accessed by its alias.

744
00:38:08,066 --> 00:38:09,766
那为什么还要有实际的BFM指令呢
Then why have the real instruction?

745
00:38:16,333 --> 00:38:17,200
好吧
Okay.

746
00:38:17,266 --> 00:38:24,900
它是拷贝了寄存器的一个子集
So it's copying a subset of the register from 8 bit

747
00:38:30,766 --> 00:38:31,533
我信了
I'll take it.

748
00:38:35,700 --> 00:38:37,633
指令可视化
Instruction visualization.

749
00:38:38,000 --> 00:38:41,100
哦，我应该直接看下一张幻灯片
Oh, I should have just gone to the next slide.

750
00:38:44,033 --> 00:38:45,333
我们一起学习一下
Let's learn together here.

751
00:38:45,466 --> 00:38:46,200
都讲了啥
What do we got?

752
00:38:46,333 --> 00:38:50,933
BFI X1 X0 #9 #6。
So I got BFI X1, X0, #9, #6.

753
00:38:51,600 --> 00:38:52,900
这里的9在哪里
Where does 9 fit in here?

754
00:38:52,966 --> 00:38:54,500
6在哪里
Where does 6 fit in here?

755
00:38:57,900 --> 00:38:58,566
好吧。
Okay.

756
00:38:58,933 --> 00:39:00,133
BFI。
BFI.

757
00:39:00,533 --> 00:39:01,933
哦，这里改成w了
Oh, he's going for a W now

758
00:39:01,966 --> 00:39:03,133
和上一张ppt是不同的寄存器
so a different register.

759
00:39:03,166 --> 00:39:04,266
9,6。
9, 6.

760
00:39:04,566 --> 00:39:08,866
1, 2, 3, 4, 5, 6, 7, 8, 9
1, 2, 3, 4, 5, 6, 7, 8, 9.

761
00:39:08,866 --> 00:39:09,666
好的
All right.

762
00:39:09,866 --> 00:39:12,200
1, 2, 3, 4, 5, 6.
1, 2, 3, 4, 5, 6.

763
00:39:12,233 --> 00:39:12,566
好的
All right.

764
00:39:12,600 --> 00:39:14,900
看明白了
These numbers kind of make sense.

765
00:39:15,200 --> 00:39:17,833
我们从右边的寄存器取数据
So we are grabbing from this first register

766
00:39:19,433 --> 00:39:23,900
然后放到一个偏移处，这里的9
and we are moving it into an offset

767
00:39:24,066 --> 00:39:27,300
然后是我们要复制的长度，这里的6
and then a length into it that we're copying.

768
00:39:27,633 --> 00:39:29,800
ARM侠，你知道吗?
Did ARM man, did you know it?

769
00:39:30,333 --> 00:39:31,700
你也不知道
You didn't know it either.

770
00:39:31,966 --> 00:39:33,400
我感觉好点了
I feel a little bit better.

771
00:39:34,733 --> 00:39:35,966
还有什么
What do we got here?

772
00:39:36,533 --> 00:39:39,166
UBFX，这是干嘛的
UB, what are you doing here?

773
00:39:39,566 --> 00:39:41,000
这是什么把戏?
What is this shenanigans?

774
00:39:44,133 --> 00:39:45,466
UBFX
UBFX

775
00:39:46,400 --> 00:39:54,266
从X1的第18最低位，移动7位，到X0的最低位。
moves 7 bits in X1 starting from the 18th lowest bit to the lowest bit in X0.

776
00:39:54,333 --> 00:39:56,900
这在功能上是一样的，不是吗?
That's like functionally the same thing, isn't it?

777
00:39:57,000 --> 00:39:59,133
是的，因为我们走到第18位
Yes, because we're going 18 deep.

778
00:39:59,133 --> 00:40:00,033
取7位
We're grabbing 7

779
00:40:00,066 --> 00:40:01,566
然后把它放到这个寄存器的开头
and we're throwing it here at the beginning.

780
00:40:01,666 --> 00:40:03,466
它们是相反的操作
So they're inverse operations.

781
00:40:03,466 --> 00:40:04,633
第一个指令
In the first one here

782
00:40:05,000 --> 00:40:07,966
我们在源寄存器的开头取数据
we are grabbing from the beginning of the source

783
00:40:08,000 --> 00:40:10,200
然后我们定义目标寄存器的偏移量。
and then we're defining the offset at the destination.

784
00:40:10,333 --> 00:40:12,433
然后我们再看看UBFX
Then here we look at UBFX

785
00:40:12,500 --> 00:40:15,466
我们定义源寄存器的偏移量
we are setting the offset in the source

786
00:40:15,900 --> 00:40:18,666
然后把它放到目标寄存器的开头
and then putting it at the beginning of the destination.

787
00:40:20,033 --> 00:40:20,833
我们理清了
We got there.

788
00:40:21,666 --> 00:40:22,600
我相信
I'll take it.

789
00:40:26,766 --> 00:40:28,333
为什么这个取到的是0
Why does this thing grab 0

790
00:40:28,333 --> 00:40:29,133
最下面这个示例
this last one here?

791
00:40:29,200 --> 00:40:33,000
BFI W1 wzr 3 4
We got BFI W1 WZR 3 4.

792
00:40:33,533 --> 00:40:35,133
这些0是从哪里来的?
Where do these zeros come from?

793
00:40:35,233 --> 00:40:36,066
这是个刁钻的问题。
It's a trick question.

794
00:40:36,566 --> 00:40:37,133
其实不是
Not really.

795
00:40:37,300 --> 00:40:39,866
WZR是一个零寄存器
WZR is a zero register.

796
00:40:39,966 --> 00:40:41,200
零寄存器
Zero register.

797
00:40:41,300 --> 00:40:41,700
是的
Yeah.

798
00:40:42,033 --> 00:40:46,466
WZR，回到之前的幻灯片，是一个零寄存器。
So WZR, calling back to the earlier slides, is a zero register.

799
00:40:46,566 --> 00:40:49,566
所以我们是从零寄存器的开头复制一些东西
So we are copying something from the beginning of the zero register

800
00:40:49,633 --> 00:40:50,433
它都是0
which is all zeros.

801
00:40:50,466 --> 00:40:51,433
我们定义了偏移量
We're defining the offset

802
00:40:51,466 --> 00:40:56,300
这能让我们在目标寄存器中将一定数量的位归零
which allows us to zero a certain number of bits in our destination register.

803
00:40:58,600 --> 00:41:04,033
ARM64上没有push或pop指令
So there are no push or pop instructions on ARM64.

804
00:41:06,266 --> 00:41:10,166
这太糟糕了。
That kind of sucks.

805
00:41:11,033 --> 00:41:11,900
我们现实一点
Let's be real here.

806
00:41:12,100 --> 00:41:19,266
相反，我们有前索引和后索引的概念
Instead, we have this concept of pre-indexing and post-indexing.

807
00:41:19,333 --> 00:41:23,766
我们有这样一个概念，在访问一个值时
We have this concept of accessing a value

808
00:41:23,866 --> 00:41:27,433
同时对它进行递增或递减。
while simultaneously incrementing it or decrementing it.

809
00:41:27,666 --> 00:41:31,000
并且我们可以在访问前递增或递减
And we can increment or decrement it before the access

810
00:41:31,200 --> 00:41:34,266
或者在访问后递增或递减
or increment or decrement it after the access

811
00:41:34,800 --> 00:41:38,500
希望这里我们有展示
which is hopefully what we have showing here.

812
00:41:38,933 --> 00:41:39,933
我们确实有
We do have it.

813
00:41:40,166 --> 00:41:43,500
我得查一下我的笔记，以确保我说对了
I have to consult my handy notes here to make sure I get this right

814
00:41:43,533 --> 00:41:47,133
我不想在直播上说错
because I don't want to say it wrong on stream.

815
00:41:49,133 --> 00:41:55,666
这里有str
So here we have store register.

816
00:41:55,800 --> 00:41:59,166
将x4寄存器中的值
We're going to store the value that is in register X4

817
00:41:59,533 --> 00:42:04,366
存储到栈指针-8字节的位置
to the stack pointer minus eight bytes.

818
00:42:04,866 --> 00:42:07,066
但这个感叹号是干什么用的呢?
But what is this exclamation point doing?

819
00:42:10,800 --> 00:42:12,300
Twitch直播间里说
So the comment from Twitch is

820
00:42:12,333 --> 00:42:14,700
会先做减法
we're going to first perform this subtraction.

821
00:42:15,833 --> 00:42:17,800
这是前索引
This is a pre-index.

822
00:42:18,500 --> 00:42:22,500
所以我们会保存到栈指针-8的位置
So we are storing this at the stack pointer minus eight

823
00:42:23,066 --> 00:42:25,933
因为有一个感叹号
because we have this exclamation point.

824
00:42:28,933 --> 00:42:32,500
这里是stp
Here we have store pair.

825
00:42:33,000 --> 00:42:36,166
所以我们存储16字节
So we are storing 16 bytes.

826
00:42:36,966 --> 00:42:38,566
有感叹号
We have the exclamation point.

827
00:42:38,600 --> 00:42:40,600
所以这是前索引
So this is a pre-index.

828
00:42:41,666 --> 00:42:45,000
我们将这对寄存器，存储到栈指针减去
We are storing this pair at the stack pointer minus

829
00:42:46,566 --> 00:42:47,533
我不会算
I can't math

830
00:42:47,733 --> 00:42:48,833
128位
128 bits.

831
00:42:49,200 --> 00:42:50,700
16个字节
16 bytes.

832
00:42:51,600 --> 00:42:55,733
这相当于在一条指令中执行两次push
So it's the equivalent of doing two pushes in one instruction.

833
00:42:57,233 --> 00:42:59,700
有点像AMD64
Kind of pulling over from AMD64.

834
00:43:02,066 --> 00:43:05,466
这个没有感叹号
This one right here does not have the exclamation point.

835
00:43:05,566 --> 00:43:07,300
另一个不同的语法
We have a different syntax.

836
00:43:07,766 --> 00:43:10,633
我们加载这对X0, X1
So we have load pair X0, X1.

837
00:43:11,033 --> 00:43:12,900
我们正在访问栈指针
We're accessing the stack pointer.

838
00:43:13,533 --> 00:43:16,433
然后有一个逗号和一个常数
And then we have a comma and a constant.

839
00:43:16,533 --> 00:43:19,500
这是后索引
This is a post-index.

840
00:43:19,600 --> 00:43:23,466
我们从栈指针指向的内存中取出数据
So we are pulling this from the stack pointer

841
00:43:24,133 --> 00:43:25,766
然后进行加法运算
and then performing the addition.

842
00:43:25,833 --> 00:43:27,500
这相当于做了两次pop
It's the equivalent of doing two pops

843
00:43:28,100 --> 00:43:29,566
对应这里的两条指令
which is what we have over here.

844
00:43:29,833 --> 00:43:32,133
类似地，这也是一个后索引
Similarly, this is a post-index.

845
00:43:32,200 --> 00:43:34,466
我们先获取栈指针指向内存的值
So we're going to grab the value of the stack pointer

846
00:43:34,833 --> 00:43:36,033
扔进X4
throw it in X4

847
00:43:36,200 --> 00:43:39,466
然后栈指针+8
and then add to the stack pointer

848
00:43:39,500 --> 00:43:41,400
所以这相当于一次pop
so it's the equivalent of a single pop.

849
00:43:41,833 --> 00:43:46,766
我们必须注意这个后索引、前索引的记号
But we have to be aware of this post-index, pre-index notation.

850
00:43:51,400 --> 00:43:52,333
分支
Branching.

851
00:43:52,500 --> 00:43:58,533
老实说，我觉得ARM上的分支比AMD64上的好理解
Branching, honestly, I think is kind of easier to understand on ARM than AMD64.

852
00:43:58,866 --> 00:44:01,466
因为B代表分支
Because we just have B for branch

853
00:44:02,400 --> 00:44:05,200
然后是条件式后缀
and then you have this conditional kind of suffix.

854
00:44:05,300 --> 00:44:07,500
所以指令是b.接着你看到的这些
So it's B dot and then what are you looking at?

855
00:44:10,866 --> 00:44:12,533
我不关心这个
I don't care about that.

856
00:44:14,900 --> 00:44:16,266
条件选择：csel
Conditional select.

857
00:44:17,700 --> 00:44:19,533
ARM侠，你能帮帮我吗
Arm man, you got me?

858
00:44:20,633 --> 00:44:21,400
不行？
No?

859
00:44:23,666 --> 00:44:24,733
没关系
It's all right.

860
00:44:24,833 --> 00:44:27,100
我们可以直接去查文档
We can just go to the documentation, man.

861
00:44:33,800 --> 00:44:34,800
好吧
Okay, yeah.

862
00:44:34,800 --> 00:44:37,466
如果我们分析一下幻灯片的逻辑
If we actually just parse the logic of the slides

863
00:44:37,500 --> 00:44:38,466
我们可能会到达那里
we might get there.

864
00:44:39,066 --> 00:44:42,400
这张幻灯片的逻辑是
So the logic of the slides here says

865
00:44:42,500 --> 00:44:49,133
我们根据条件将Xd设为Xn或Xm
that we are setting Xd to either Xn or Xm based upon condition.

866
00:44:51,033 --> 00:44:53,533
亚当在这上面研究的很深
Adam went deep into ARM on this one, man.

867
00:44:55,966 --> 00:44:57,500
系统调用
Syscalls.

868
00:44:58,000 --> 00:44:59,200
这里没有syscall指令
We don't have a syscall instruction.

869
00:44:59,266 --> 00:45:00,533
我们有svc
We have a service instruction.

870
00:45:00,600 --> 00:45:01,366
其余的
The rest of them

871
00:45:01,933 --> 00:45:03,033
我不知道，伙计。
I don't know, man.

872
00:45:03,233 --> 00:45:04,900
亚当会帮助你们
Adam's going to have to save you there.

873
00:45:05,400 --> 00:45:07,166
系统调用号
The syscall number

874
00:45:07,200 --> 00:45:11,533
在amd64上是在x8寄存器中（口误）
which traditionally on AMD64 is going to be an x8

875
00:45:12,066 --> 00:45:14,933
在AMD64上是在rax
on AMD64 would be an rax.

876
00:45:14,966 --> 00:45:16,500
ARM中，它将会在x8
On ARM is going to be an x8.

877
00:45:17,000 --> 00:45:20,800
AMD64上syscall的调用约定
A calling convention for the syscall on AMD64

878
00:45:20,833 --> 00:45:23,900
你已经习惯了rdi rsi rdx等等，
you're used to rdi, rsi, rdx, blah, blah,

879
00:45:24,800 --> 00:45:26,300
ARM上它变得更简单
ARM actually kind of makes it kind of easy.

880
00:45:26,400 --> 00:45:28,133
我们就从0开始数
We just start counting from zero up.

881
00:45:28,200 --> 00:45:29,133
这些是你的参数
Those are your arguments.

882
00:45:29,500 --> 00:45:32,900
在这之后，我记得是x7之后，就放在栈上了
After this, I believe after x7, they end up on the stack.

883
00:45:33,033 --> 00:45:36,266
所以我们并没有填满所有的通用寄存器
So we don't actually fill every general purpose register.

884
00:45:38,733 --> 00:45:40,600
哦，你知道吗
Oh, what do you know?

885
00:45:40,666 --> 00:45:41,600
我们讲过这个了
We got there.

886
00:45:42,166 --> 00:45:44,700
调用约定
So calling conventions.

887
00:45:44,733 --> 00:45:49,233
如我提到的，函数调用指令是bl，分支并链接
As I mentioned, calling function is bl for branch and link.

888
00:45:50,033 --> 00:45:53,733
返回地址，没放到栈，而是放到链接寄存器中
The return address, instead of being pushed to the stack, is stored in this link register.

889
00:45:53,833 --> 00:45:55,700
如果链接寄存器中已经有值了
If you have something in the link register

890
00:45:55,766 --> 00:45:56,433
然后你再次分支
and you branch again

891
00:45:56,500 --> 00:45:58,333
那原来的值会放到栈上
it does end up on the stack

892
00:45:58,400 --> 00:46:02,933
先前函数帧的返回地址
the prior return address from the earlier function frames.

893
00:46:04,600 --> 00:46:06,333
调用约定，被调保存的
Calling conventions, callee-saved.

894
00:46:06,933 --> 00:46:07,733
好的
That's fine.

895
00:46:09,533 --> 00:46:10,033
酷
Cool.

896
00:46:10,366 --> 00:46:11,933
到结尾了吗
Did I make it to the end?

897
00:46:12,066 --> 00:46:13,166
我们到结尾了
We made it to the end.

898
00:46:16,033 --> 00:46:17,500
上课多长时间了
How long since class go?

899
00:46:20,800 --> 00:46:22,400
有一件事
One of the things I don't think

900
00:46:22,833 --> 00:46:24,233
我要说一下
I'm just going to throw it out there.

901
00:46:24,500 --> 00:46:26,166
这门课没有课本
There is no textbook for the class

902
00:46:26,300 --> 00:46:28,966
但我要说
but I will say that this book

903
00:46:29,366 --> 00:46:33,033
有时会参考到这本书
is loosely going to be kind of referred to

904
00:46:33,233 --> 00:46:36,933
或者用做这门课的参考
or used as a reference for how the class works.

905
00:46:37,133 --> 00:46:38,033
不是必需的
Not required.

906
00:46:38,233 --> 00:46:39,666
这本书很难买到
It is a hard book to acquire.

907
00:46:39,700 --> 00:46:44,700
你不能像普通书那样在亚马逊上下单。
You can't just like order it on Amazon as like a normal bookstore thing.

908
00:46:44,833 --> 00:46:46,966
只有一个卖家，那就是作者。
There's like one seller and it's the author.

909
00:46:47,033 --> 00:46:49,566
这本书本身已经过时好几年了
The book itself is several years out of date.

910
00:46:49,600 --> 00:46:50,800
它有几个版本
There's several versions.

911
00:46:50,900 --> 00:46:52,066
有一个叫Star操作系统
So there's the Star OS

912
00:46:52,100 --> 00:46:55,666
还有一个老一点的名字稍微不同
and then there's slightly different name that's an older version.

913
00:46:56,533 --> 00:46:58,266
他们俩都够老
Both of them are old enough to where

914
00:46:58,533 --> 00:47:02,000
以至于，描述的很多实现细节，比如Mac OS的
a lot of the implementation details that are described there as far as Mac OS

915
00:47:02,066 --> 00:47:03,500
都不一定是准确的
aren't necessarily accurate.

916
00:47:04,400 --> 00:47:06,433
但总的思路是准确的
But the general feel of it

917
00:47:07,566 --> 00:47:09,900
如果你解析它，然后尝试一些东西
if you parse it and then just try stuff

918
00:47:10,000 --> 00:47:12,700
你能在尝试的过程弄清楚
you can figure stuff out as you go.

919
00:47:14,200 --> 00:47:17,133
获取相关信息其实非常困难
Getting that information is actually very hard.

920
00:47:17,200 --> 00:47:22,633
这些机制工作原理的公开信息并不多
There's not a lot of public information on how those mechanisms work.

921
00:47:26,233 --> 00:47:27,366
下一个问题是
The next question is

922
00:47:27,466 --> 00:47:32,100
Yan在讲的时候，我安装的东西成了吗
did what I was installing work while Yan was lecturing?

923
00:47:32,666 --> 00:47:34,966
赌一下
Here's our big gamble.

924
00:47:36,866 --> 00:47:40,933
进入示例前，有人有问题吗
Does anyone have any questions for me before I just bomb a demo?

925
00:47:42,766 --> 00:47:44,000
该死
Damn.

926
00:47:45,233 --> 00:47:47,266
是啊，我希望你们能救救我
Yeah, I was hoping you guys would save me.

927
00:47:54,266 --> 00:47:55,466
理论上讲
In theory here

928
00:47:55,866 --> 00:47:59,700
我弄了一个在ARM上运行的docker环境
what I have is a Docker environment that's running on ARM

929
00:47:59,933 --> 00:48:03,233
这意味着我们应该能够使用一些熟悉的Pwntools
which means we should be able to use some familiar PwnTools things

930
00:48:03,266 --> 00:48:09,033
来编译并运行一些ARM汇编
to kind of just compile and run some ARM assembly.

931
00:48:12,800 --> 00:48:14,700
from pwn import *
from pwn import star.

932
00:48:22,900 --> 00:48:25,266
哦，我安装了GDB。
Oh, I did install GDB.

933
00:48:25,933 --> 00:48:27,300
我们来看看是否可行。
So let's see if that works.

934
00:48:30,166 --> 00:48:31,233
哦,不。
Oh no.

935
00:48:31,366 --> 00:48:32,400
GDB不会起作用
I know GDB doesn't work.

936
00:48:32,466 --> 00:48:33,933
这个演示吹了
The demo is ruined.

937
00:48:35,100 --> 00:48:36,066
不,不。
No, no.

938
00:48:36,633 --> 00:48:38,166
准确的说是在Mac上
Specifically on a Mac

939
00:48:38,266 --> 00:48:44,766
如果你是在mac上通过Rosetta
if you're using Rosetta on a Mac

940
00:48:44,833 --> 00:48:47,566
来使用GDB，那么你必须执行一些特殊的操作
to use GDB there's some special magic you have to do.

941
00:48:47,800 --> 00:48:49,433
我没做这些操作
And I did not do such magic.

942
00:48:49,966 --> 00:48:51,400
我不记得这些操作了
I don't remember the magic.

943
00:48:52,366 --> 00:48:53,266
好的，伙计们。
All right guys.

944
00:48:53,800 --> 00:48:57,333
所以，我想，这就是我能给你的全部了
So that is, I suppose, all I can hit you with.

945
00:48:58,933 --> 00:49:03,866
第一个任务，正如Yan提到的
One of the first assignments, as Yan mentioned

946
00:49:04,733 --> 00:49:07,766
会在8点发布
is live at 8 o'clock

947
00:49:07,833 --> 00:49:10,133
不过说实话，你可以在这里访问
although honestly you can access it right here

948
00:49:10,566 --> 00:49:11,833
不在你的dojo中
not under your dojos.

949
00:49:11,900 --> 00:49:13,300
但据我所知
But as far as I'm aware

950
00:49:13,400 --> 00:49:17,900
这与社区ARM dojo上的题目完全相同
 it's the exact same challenges that are on the community ARM dojo.

951
00:49:17,933 --> 00:49:23,100
它会做些特别的限制，让你使用这些奇怪的指令
It does specifically try and make you utilize some of these odd instructions.

952
00:49:23,200 --> 00:49:24,900
这是为了教育
It is meant to be educational.

953
00:49:24,933 --> 00:49:27,333
他不像？？
It's not like the giant, hey, get pumped.

954
00:49:27,733 --> 00:49:33,600
如果我们用dojo代替我失败的GDB演示
And so if we use the dojo instead of my amazing GDB demo that failed

955
00:49:41,400 --> 00:49:43,666
我用SSH连接到它
I'm going to use SSH to connect to it.

956
00:49:51,000 --> 00:49:52,933
希望道场没有忙到着火
Hopefully the dojo is not on fire.

957
00:49:53,000 --> 00:49:53,966
我们会知道的
We'll find out.

958
00:49:57,266 --> 00:49:58,033
漂亮
Beautiful.

959
00:50:03,100 --> 00:50:05,333
这些挑战一开始很简单
So these challenges start off very simple.

960
00:50:05,433 --> 00:50:06,966
只是简单的，嘿，让我们设置一个寄存器。
It's just, hey, let's set a register.

961
00:50:08,700 --> 00:50:09,333
希望你们知道如何操作
Hopefully you knew that.

962
00:50:09,366 --> 00:50:13,033
我们要mov X1 然后跟着一个#开头的常量
We're going to move X1 and then a constant start with the hash.

963
00:50:13,133 --> 00:50:14,600
等到后面的题目
As you get to the later challenges

964
00:50:14,633 --> 00:50:16,833
它会开始对你施加限制
it's going to start putting restrictions on you

965
00:50:16,900 --> 00:50:18,933
比如，你只能使用特定的指令
where you can only use specific instructions

966
00:50:18,966 --> 00:50:20,933
或者我们要限制指令的数量
or we're going to limit the number of instructions.

967
00:50:22,000 --> 00:50:25,133
这时候，你就要使用到这些了
And so now you're going to have to start using some of these

968
00:50:25,200 --> 00:50:27,533
例如，stp，ldp。
for instance, storing pairs, loading pairs.

969
00:50:27,766 --> 00:50:30,400
你会用到后索引，前索引
You're going to have to deal with that post index, pre index

970
00:50:30,466 --> 00:50:32,066
来优化你的汇编代码
to optimize your assembly

971
00:50:32,133 --> 00:50:37,233
这样原来你要用，比如10条指令，写的东西
so that something that you could write in say 10 instructions

972
00:50:37,500 --> 00:50:39,600
现在只需要4条了
you're now going to have to do in like four.

973
00:50:40,466 --> 00:50:44,600
一般来说，ARM的指令数量很少
In general, ARM has a small number of instructions

974
00:50:44,700 --> 00:50:47,900
但是一条指令可以做很多事情
but a single instruction will do a lot of things

975
00:50:48,066 --> 00:50:50,200
这取决于你如何构建它
depending upon how you structure it

976
00:50:50,300 --> 00:50:51,800
这让它变得很酷
which makes it kind of cool.

977
00:50:51,900 --> 00:50:56,733
这个道场的目的是希望让你利用上一些这样的概念
This dojo is designed to hopefully make you utilize some of those concepts.

978
00:50:57,600 --> 00:50:59,833
到此，我没有要讲的了
With that, I got nothing.

979
00:50:59,966 --> 00:51:01,800
如果你们没什么问题，我们就要结束了
If you got nothing, we're going to call it.

980
00:51:01,933 --> 00:51:08,033
我看看twich，看看有没有提问
I'll check Twitch and see if my favorite troll has hit me.

981
00:51:08,966 --> 00:51:10,333
我想他们在睡觉
I think they're sleeping.

982
00:51:11,866 --> 00:51:13,833
是的，在睡觉。
Yeah, the troll is sleeping.

983
00:51:13,900 --> 00:51:15,500
有人在Twitch上说
Somebody says on Twitch

984
00:51:15,600 --> 00:51:18,533
需要学习pwn学院上的哪条学习路线
what is the path on pwn College that I need to follow

985
00:51:18,633 --> 00:51:22,366
才能达到这门课的要求
to get the requirements for this course, CSE598?

986
00:51:22,666 --> 00:51:24,766
这是一个很普遍的问题
That's a fair general question.

987
00:51:25,066 --> 00:51:28,266
pwn学院作为一个网站是对所有人开放的
So pwn College as a site in general is open to everyone.

988
00:51:28,400 --> 00:51:29,800
如果我们到这里的dojos
If we go to dojos here

989
00:51:29,900 --> 00:51:33,066
你可以看到橙，黄，绿，蓝的进度。
you see this progression of orange, yellow, green, blue.

990
00:51:33,833 --> 00:51:37,633
这门课还不在这些进度中
This course is not in anywhere currently in this progression

991
00:51:37,700 --> 00:51:40,933
但它相当于这个蓝带的水平
but it would be equivalent to this blue belt level

992
00:51:41,633 --> 00:51:42,933
就期望而言
as far as the expectations.

993
00:51:43,066 --> 00:51:45,333
如果你想达到这门课预期的所需知识
so If you wanted to have the requisite acknowledged

994
00:51:45,433 --> 00:51:48,666
你需要学习橙、黄和绿带
you would want to go through orange, yellow, and green

995
00:51:48,933 --> 00:51:50,266
解释一下
for a little bit of perspective.

996
00:51:50,533 --> 00:51:56,700
这大约相当于ASU两个学期的300和400级的大学课程
That's roughly two semesters worth of university education at the 300 and 400 level here at ASU

997
00:51:56,733 --> 00:52:00,266
至于大家通常预计的所需知识
as far as what the general expectations going in are.

998
00:52:00,500 --> 00:52:02,166
就是说，橙带的所需知识
So to start the orange belt

999
00:52:02,266 --> 00:52:06,100
大致是你要有几年常规计算机科学的知识储备
it's kind of assuming you have a couple years of general computer science under your belt.

1000
00:52:07,766 --> 00:52:09,333
如果Twitch上没有别的问题的话
If there's nothing else on Twitch

1001
00:52:09,433 --> 00:52:10,766
我估计没了
which I don't believe there is

1002
00:52:10,833 --> 00:52:12,933
我们就讲到这里
we're going to wrap up there.

1003
00:52:13,000 --> 00:52:14,600
很感谢大家的参与
I appreciate everyone hanging out.

1004
00:52:15,366 --> 00:52:18,533
下周会是真正的亚当来讲
Next week should be the real Adam.

