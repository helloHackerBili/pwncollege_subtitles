1
00:00:01,466 --> 00:00:03,100
你好黑客
hello hackers

2
00:00:03,133 --> 00:00:04,566
欢迎来到pwn学院
welcome to pwn College

3
00:00:04,566 --> 00:00:09,866
我是Yan，今天要讨论的是程序交互方式
I'm Yan and today we're going to be talking about interacting with programs 

4
00:00:09,966 --> 00:00:13,400
这个模块全是关于程序交互方式的
this module is all about interacting with programs

5
00:00:13,666 --> 00:00:16,766
通过各种渠道和方式，输入数据
sending them input in various ways through various channels

6
00:00:17,533 --> 00:00:21,533
控制它们运行的环境等等
controlling the environment they run in etc etc and

7
00:00:21,933 --> 00:00:24,400
这个视频将是一个速成班
this video is going to be a crash course in

8
00:00:26,266 --> 00:00:28,866
我希望这些信息能用来复盘
information that I hope will be a review

9
00:00:29,800 --> 00:00:34,233
提醒你命令行的用法
to remind you how the command line works 

10
00:00:34,333 --> 00:00:37,500
以及如何启动程序，等等
and how programs are invoked and etc

11
00:00:37,700 --> 00:00:39,933
好了，我们开始吧
all right let's dive in

12
00:00:39,999 --> 00:00:44,833
希望你们都
so you've hopefully all ran at some point in your lives

13
00:00:44,966 --> 00:00:48,333
在linux命令行中执行过helloworld程序
a Hello World program from the Linux command line 

14
00:00:48,466 --> 00:00:50,100
执行./helloworld
you do ./helloworld

15
00:00:50,500 --> 00:00:52,266
会输出Hello World然后退出
prints out Hello World and exit

16
00:00:52,466 --> 00:00:55,600
那么这么做时，到底发生了什么
so what happens under the hood when you do that

17
00:00:55,700 --> 00:00:58,466
Linux做了很多事
well Linux does a bunch of stuff

18
00:00:58,733 --> 00:01:02,033
它提供了启动程序所需的环境
it facilitates the launching of your program 

19
00:01:02,066 --> 00:01:04,966
这会在以后的视频中学习
which we will learn about in future videos 

20
00:01:05,200 --> 00:01:13,700
它能恰当地调节处理
it figures out how to properly mediate interaction

21
00:01:13,700 --> 00:01:17,900
程序创建的进程与执行环境的关系
between the process that your program creates and the environment it runs in

22
00:01:18,600 --> 00:01:19,666
等等
and so on 

23
00:01:19,966 --> 00:01:21,200
Linux很重要
Linux is relevant 

24
00:01:21,300 --> 00:01:24,166
因为，它是这门课用的
because this is what we're using for this class

25
00:01:24,300 --> 00:01:28,233
而且，它可能是世上最流行的操作系统
it's probably the most popular operating system in the world 

26
00:01:28,333 --> 00:01:30,800
鉴于，路由器里运行的它
when you factor in the routers it runs in 

27
00:01:30,933 --> 00:01:35,933
Android手机等都是由它赋能的
the Android phones etc etc that it powers

28
00:01:36,000 --> 00:01:39,600
所以这门课我们将用Linux
so in this class we'll use Linux

29
00:01:39,800 --> 00:01:41,966
探讨各种网络安全概念
to explore these various cybersecurity concepts

30
00:01:42,033 --> 00:01:45,300
Linux的主要交互方式是命令行
and your main interaction with Linux will be the command line

31
00:01:45,300 --> 00:01:52,400
所以我们开启一个命令行快速入门之旅
so we're going to do a quick command line crash refresher

32
00:01:54,166 --> 00:01:55,066
什么是命令行
what is the command line

33
00:01:55,066 --> 00:01:57,400
命令行也被称为shell
well the command line also known as the shell

34
00:01:57,400 --> 00:01:59,866
它是计算机的一个强大接口
it's powerful interface to use a computer

35
00:01:59,866 --> 00:02:01,800
通常你会输入命令
generally you type in commands 

36
00:02:02,100 --> 00:02:07,500
shell会执行这些命令并显示结果
and the shell execute those commands and shows you results

37
00:02:07,700 --> 00:02:12,300
一条典型的命令，包含一个shell内置功能
a typical command contains either a built in functionality of the shell

38
00:02:12,400 --> 00:02:16,100
或程序名，即计算机上有的程序
or a program name a program that exists on your computer

39
00:02:16,333 --> 00:02:20,466
然后是空格分隔的程序参数
and then argument to that program separated by spaces

40
00:02:20,466 --> 00:02:23,566
这里我执行了cat flag
here I do a cat flag

41
00:02:24,300 --> 00:02:26,700
shell由此得知
what happens is the shell sees

42
00:02:26,700 --> 00:02:29,600
我想用flag参数，执行cat
I want to run the cat program with a flag argument

43
00:02:29,700 --> 00:02:32,200
shell启动cat程序
it invokes the cat program

44
00:02:32,333 --> 00:02:35,200
启动结果会创建一个进程
the process that results from that invocation

45
00:02:37,200 --> 00:02:40,900
等一下，我改一下这张幻灯片
hold on a second let me fix this slide 1 sec

46
00:02:42,300 --> 00:02:46,300
好了，原来多打了 /
there we go I add a slashes where there shouldn't have been slashes

47
00:02:46,333 --> 00:02:46,933
很抱歉
sorry about that

48
00:02:47,500 --> 00:02:53,400
启动cat flag时所创建的进程
what happened is the process that results from the invocation of cat flag

49
00:02:53,700 --> 00:02:57,133
会读取它的第一个参数，即flag
reads its first argument which is flag

50
00:02:57,600 --> 00:02:58,733
打开这个文件
opens that file 

51
00:02:58,966 --> 00:03:03,000
然后将它输出到标准输出，即终端屏幕
and prints it to standard output to the output of the terminal

52
00:03:04,266 --> 00:03:05,833
这就是cat的用途
that's what cat is designed to do 

53
00:03:06,033 --> 00:03:08,866
它能读出文件内容
it reads out files

54
00:03:09,000 --> 00:03:16,300
如果你从来没用过cat，该怎么知道如何使用
so how would you know what cat is supposed to do if you had never run cat before

55
00:03:17,100 --> 00:03:19,866
你应该知道cat的用法
well you should really know what cat does

56
00:03:19,866 --> 00:03:21,333
这是一个很基础的东西
that's a very basic thing

57
00:03:21,333 --> 00:03:22,366
如果你不知道
if you don't

58
00:03:23,400 --> 00:03:25,500
有很多途径可以学
there's a number of ways to get familiar

59
00:03:25,500 --> 00:03:29,533
一是，你可以玩一个叫Bandit的wargame
one is you can run through a war game called Bandit 

60
00:03:31,666 --> 00:03:37,200
它肯定能让你十分熟悉命令行，和一些其它概念
that familiarizes you forcefully with the command line and some other concepts

61
00:03:37,566 --> 00:03:39,566
你可以在网上搜索教程
you can search online for tutorials 

62
00:03:39,666 --> 00:03:41,766
或者你最该做的是
or really what you should be doing is 

63
00:03:41,800 --> 00:03:45,266
使用Linux系统上的优秀文档
using the awesome documentation that comes on Linux systems

64
00:03:45,266 --> 00:03:46,533
man 手册
the man pages 

65
00:03:46,766 --> 00:03:47,900
执行 man cat
you do man cat

66
00:03:48,300 --> 00:03:52,500
你会得到这个十分有用的cat帮助文档
you get this very helpful help output about cat

67
00:03:53,000 --> 00:03:56,000
对于我提过几次的shell内置命令
for shell builtins I mentioned this several times

68
00:03:56,366 --> 00:03:59,133
例如用于更改目录的cd
for example cd to change directories

69
00:03:59,266 --> 00:04:00,966
你可以执行 help cd
you can do help cd

70
00:04:02,733 --> 00:04:04,400
来了解它的用途
to read about what they do

71
00:04:04,400 --> 00:04:07,000
如果你真的被难住了，可以问
or if you really get stumped ask

72
00:04:07,200 --> 00:04:10,100
可以在pwn.college的Discord频到上问我们
ask us on the pwn College Discord

73
00:04:10,200 --> 00:04:13,500
我们总是很乐意提供一定帮助
we're always happy to help to an extent

74
00:04:14,100 --> 00:04:18,200
这是在学习这门课之前应该知道的
this is something that you should know before tackling the course in general

75
00:04:18,266 --> 00:04:19,066
好的
all right

76
00:04:19,700 --> 00:04:22,300
我提到了进程
so I mentioned processes

77
00:04:22,300 --> 00:04:23,833
我们快速地带一下
we're going to skim over this real quick 

78
00:04:24,033 --> 00:04:27,600
因为这是本模块之后视频的主题
because it will be the subject of future videos in this module

79
00:04:27,966 --> 00:04:30,300
进程是一个运行中的程序
a process is a running program

80
00:04:30,300 --> 00:04:33,333
程序实际上就是你电脑上的一个文件
and a program really is a file on your computer

81
00:04:33,500 --> 00:04:37,133
cat是我电脑上的一个可执行文件
cat exists somewhere in an executable file on my computer

82
00:04:37,200 --> 00:04:38,533
我们之后会讨论这个
we'll talk about that in a sec

83
00:04:39,066 --> 00:04:42,666
这些可执行文件位于文件系统中
and these executables files live in a file system

84
00:04:42,800 --> 00:04:47,166
web浏览器等电脑里所有的文件都在文件系统中
so your web browser every file in your computer lives in a file system

85
00:04:47,600 --> 00:04:53,000
我们将在以后的视频中深入介绍可执行文件本身
and we will cover the executables themselves in depth in a bit in future videos

86
00:04:53,100 --> 00:04:56,266
现在我们讨论一下文件系统
for now let's talk about the file system

87
00:04:56,933 --> 00:04:58,966
它是文件的居所
which is where files live

88
00:05:00,800 --> 00:05:02,866
你可能有使用Windows的经验
you might have experience with Windows

89
00:05:02,866 --> 00:05:03,733
大多数人都有
most people do 

90
00:05:03,900 --> 00:05:05,666
在Windows系统中，有一个C盘
in Windows you have a C drive

91
00:05:05,866 --> 00:05:07,100
如果你还有其它盘
if you have additional drives 

92
00:05:07,266 --> 00:05:09,866
或者像以前我们还用cd光驱
or back in the day when we had cd ROM drives

93
00:05:09,866 --> 00:05:12,766
你可能有D盘，E盘等等
you might have a D drive an E drive etc etc 

94
00:05:13,033 --> 00:05:14,533
插入一个闪存
you plug in a flash drive

95
00:05:14,533 --> 00:05:16,866
它会变成F盘之类的
it becomes an F drive whatever

96
00:05:18,100 --> 00:05:21,133
如果你接触过软盘
if you ever interacted with a floppy disk

97
00:05:21,333 --> 00:05:24,066
A盘和B盘就是为它准备的
that's where A and B were from 

98
00:05:24,366 --> 00:05:30,233
不管怎样，Windows把所有这些文件系统都分开
anyways Windows has all of these file systems separated out

99
00:05:30,433 --> 00:05:32,266
锚定在不同的字母上
anchored into different letters

100
00:05:32,266 --> 00:05:33,366
Linux不是这样的
Linux is not like that

101
00:05:33,366 --> 00:05:35,600
Linux提供统一的文件系统视图
Linux presents a unified file system view

102
00:05:35,600 --> 00:05:38,200
它锚定在 /
it is anchored at slash

103
00:05:38,600 --> 00:05:39,600
也叫root
also pronounced root 

104
00:05:39,800 --> 00:05:41,533
文件系统树的根
the root of the file system tree

105
00:05:43,300 --> 00:05:47,200
这个名字有点容易混淆
that's a little bit of a confusing nomenclature

106
00:05:47,233 --> 00:05:49,600
因为root也用于其他一些概念
because root is used for some other concepts

107
00:05:49,666 --> 00:05:52,166
但这没办法
but let's I mean there's no way around it

108
00:05:52,500 --> 00:05:57,300
它锚定在/或称为root
it's anchored at slash or root otherwise known

109
00:05:58,100 --> 00:06:03,300
在这棵树下有很多目录
and there's a bunch of directories in a crazy tree under that

110
00:06:03,566 --> 00:06:06,366
幻灯片上有些常见的
here are some common ones on the slides

111
00:06:06,400 --> 00:06:07,400
例如
for example

112
00:06:08,333 --> 00:06:10,200
/user，大家都这么读
/user that's how everyone pronounces it

113
00:06:10,200 --> 00:06:11,966
但它实际上不是指用户
but it's not actually user

114
00:06:11,966 --> 00:06:13,600
它代表Unix System Resource
it stands for Unix System Resource

115
00:06:13,600 --> 00:06:16,966
这里存储着Unix系统资源
that's where your Unix systems resources are stored

116
00:06:17,300 --> 00:06:21,500
包含了，ppt上写的是全部，但不是全部
and contains like well I say all on the slide but not all

117
00:06:21,533 --> 00:06:23,766
它包含许多系统文件
it contains many many many system files

118
00:06:23,866 --> 00:06:26,666
比如/usr/bin下的可执行文件
such as executable files in user bin

119
00:06:26,666 --> 00:06:28,200
如果你现在看看你的系统
if you look on your system right now

120
00:06:28,700 --> 00:06:31,100
剧透一下，这里放着cat
spoiler alert that's where cat lives

121
00:06:32,800 --> 00:06:37,900
在/usr/lib里还有库
it has libraries in user lib

122
00:06:38,200 --> 00:06:41,566
/usr/share下的程序共享资源
shared program resources in user share

123
00:06:42,600 --> 00:06:45,500
/etc有你的系统配置
/etc has your system configuration

124
00:06:45,733 --> 00:06:48,133
/var包含系统的日志和缓存
/var has logs and caches for the system

125
00:06:48,866 --> 00:06:50,733
/home放着你的数据
/home is where all your data is 

126
00:06:50,833 --> 00:06:53,766
特别是，PWN学院的设施中
specifically in the pwn college infrastructure 

127
00:06:53,800 --> 00:06:56,800
在/home/ctf下，是给你的持久home目录
in home ctf is your persistent home directory

128
00:06:58,400 --> 00:07:00,266
/proc，你可以看看
/proc you can go and look around and 

129
00:07:00,433 --> 00:07:04,866
里面有关于进程的，系统配置的信息
has information about processes about system configurations

130
00:07:04,933 --> 00:07:06,533
在/proc中有很多好东西
 a lot of good stuff in /proc

131
00:07:06,566 --> 00:07:10,366
还可在/tmp中查看缓存数据
 very interesting to dig around in the /tmp for temporary data storage 

132
00:07:10,533 --> 00:07:12,200
还有很多很多很多
and much much much much more

133
00:07:13,066 --> 00:07:15,300
这是一个惯例约定
this is kind of the convention

134
00:07:15,500 --> 00:07:19,800
实际上有一个Linux标准叫LSB
there is actually a Linux standard called the Linux Standard Base

135
00:07:20,000 --> 00:07:28,100
它指定了典型Linux系统中必须存在的目录
that specifies what directories really have to be there in a typical Linux system 

136
00:07:28,333 --> 00:07:31,966
但Linux实际上是很可自定义的
but a Linux is actually very very very configurable

137
00:07:31,966 --> 00:07:33,900
你可以自己创建一个Linux发行版
you could create a Linux distribution

138
00:07:33,900 --> 00:07:38,800
例如，有些Linux发行版具有完全不同的文件系统布局
there are Linux distributions that have a completely different filesystem layout for example

139
00:07:39,500 --> 00:07:43,400
但这个是Linux文件系统的典型组织结构
but this is kind of your typical organization of a Linux file system

140
00:07:44,500 --> 00:07:46,966
我刚刚列举的所有东西
and all of the things I just named off 

141
00:07:47,066 --> 00:07:48,933
所有的这些文件和目录
all of those files and directories

142
00:07:49,533 --> 00:07:52,533
目录保存文件。文件存储在目录中
directories hold files files are stored in directories

143
00:07:52,633 --> 00:07:56,433
这应该是非常普遍的观点
this should really hopefully be very much of view

144
00:07:56,900 --> 00:07:58,200
有趣的是
what is interesting is

145
00:07:58,600 --> 00:08:03,100
每个进程在某种意义上运行在一个目录中
each process runs in some sense in a directory

146
00:08:03,200 --> 00:08:09,100
每个进程都知道自己当前的工作目录
each process has a sense of what is my current working directory

147
00:08:09,300 --> 00:08:13,600
默认从这个目录开始找文件之类的
the directory where by default I'll start looking for files stuff like that

148
00:08:15,066 --> 00:08:17,033
shell只是个进程
your shell is just a process 

149
00:08:17,133 --> 00:08:18,100
一个命令解释器
your command interpreter 

150
00:08:18,333 --> 00:08:21,600
并且它知道自己的当前工作目录
and it has an understanding of its current working directory

151
00:08:21,700 --> 00:08:26,800
你可以用pwd查看当前的工作目录
and you can actually view what the current working directory is with the pwd

152
00:08:27,066 --> 00:08:28,933
内置的打印工作目录工具
built in print working directory

153
00:08:29,766 --> 00:08:32,466
它通常会展示在这里，提醒你
it also usually shows in your prompt like here

154
00:08:32,900 --> 00:08:36,200
最初，当前工作目录在这个波浪号
I start out current working directory is this tilde

155
00:08:36,266 --> 00:08:38,933
这是主目录的简写
that's a shorthand for I am in my home directory

156
00:08:39,133 --> 00:08:43,400
比如，如你执行pwd后所见，/home/yans
for example home yans as you can see from executing pwd

157
00:08:44,200 --> 00:08:46,533
可以用ls，列出目录中的文件
you can list the files in the directory with ls 

158
00:08:46,766 --> 00:08:49,000
这是我主目录下的文件
so here's files in my home directory

159
00:08:49,400 --> 00:08:51,766
我还可以移动到另一个目录
and I can move to another directory

160
00:08:51,800 --> 00:08:55,400
用内置的cd，修改当前工作目录
change my current working directory with the cd built in

161
00:08:56,600 --> 00:08:58,633
当我执行 cd /usr
and when I do cd /usr 

162
00:08:58,800 --> 00:09:01,366
当前工作目录变成了/usr
my current work directory becomes usr

163
00:09:01,500 --> 00:09:02,700
我能用ls查看一下
I can list that

164
00:09:02,800 --> 00:09:07,500
我可以进入到之前在主目录中看到的目录
I can go into this previous directory I'd seen in my home directory

165
00:09:07,600 --> 00:09:09,400
/home/yans/flags
home yans flags

166
00:09:09,566 --> 00:09:10,700
我能看到
I can see that

167
00:09:10,933 --> 00:09:12,766
能看到有一个TOPSECRET文件
I can see that there's a topsecret file

168
00:09:13,000 --> 00:09:16,400
我能用cat输出TOPSECRET文件
and I can cat out that topsecret file

169
00:09:16,800 --> 00:09:18,266
很酷
pretty cool

170
00:09:18,333 --> 00:09:21,466
目录可以保存文件和其他目录
directories hold files and other directories all right

171
00:09:23,366 --> 00:09:25,066
我们来讨论一下path
let's talk about paths for a sec 

172
00:09:25,233 --> 00:09:28,266
在前面的例子中，我
in that previous example I was

173
00:09:28,400 --> 00:09:31,300
我执行了cat /home/yans/flags
I did cat /home/yans/flags

174
00:09:31,300 --> 00:09:32,533
但这很冗长
but that's very tedious

175
00:09:32,533 --> 00:09:34,766
如果你总是从/开始
if you always have to start from slash

176
00:09:35,700 --> 00:09:40,000
目录会变得很深，特别是在一些复杂系统
directories get pretty deep especially in a complex system

177
00:09:41,800 --> 00:09:44,300
尤其是在做软件开发的时候
especially if you're doing software development

178
00:09:45,800 --> 00:09:48,500
有模块和子模块，它们都
when you have modules and submodules and all of them are

179
00:09:48,700 --> 00:09:51,900
所有的代码在不同的目录和子目录
all the source codes in different directories and subdirectories

180
00:09:51,900 --> 00:09:55,900
总是写绝对路径将是一个噩梦
it's a nightmare to always type what is called an absolute path

181
00:09:55,933 --> 00:09:57,600
它是以 / 开头的路径
a path that starts with slash

182
00:09:57,600 --> 00:10:01,700
从文件系统树的最开头开始指定的路径
a path that refers to the very beginning of the file system tree

183
00:10:03,500 --> 00:10:05,100
你不会想这么做的
you don't want to do that

184
00:10:05,200 --> 00:10:07,700
这就是为什么我们发明了相对路径
and that's why we invented relative path

185
00:10:08,100 --> 00:10:10,133
相对路径不以 / 开头
relative path don't start with a slash

186
00:10:10,133 --> 00:10:12,300
它们是相对于当前工作目录的
and they are relative to the current working directory

187
00:10:12,300 --> 00:10:16,200
所以前面讲的概念，每个进程的当前工作目录
so that previous concept talked about every process's current working directory

188
00:10:16,200 --> 00:10:20,800
的真正用处是，在进程尝试访问相对路径时
where that's really used is when the process tries to access a relative path

189
00:10:21,600 --> 00:10:25,166
该相对路径从当前工作目录开始
that relative path starts from that current working directory

190
00:10:25,466 --> 00:10:29,066
这里，我当前的工作目录在/home/yans
here my current work directory is in home yans

191
00:10:29,300 --> 00:10:31,300
我尝试cat TOPSECRET
 I try to cat topsecret

192
00:10:31,300 --> 00:10:33,800
/home/yans中没有TOPSECRET文件
there's no topsecret file in home yans

193
00:10:33,800 --> 00:10:35,966
它在/home/yans/flags中
it's in home yans flags

194
00:10:36,133 --> 00:10:39,666
如果我cd进flags，然后cat TOPSECRET
if I cd into flags and then cat topsecret

195
00:10:39,766 --> 00:10:40,933
就输出来了
then it comes out

196
00:10:45,700 --> 00:10:47,200
这些路径没有
these paths don't

197
00:10:49,300 --> 00:10:53,100
以 / 开头的路径是绝对路径
the paths that do start with slash again are absolute paths

198
00:10:53,266 --> 00:10:57,866
这三个不以斜杠开头的路径是相对路径
these are three paths that don't start with slash are relative paths

199
00:10:58,000 --> 00:10:59,800
它们相对于当前工作目录
relative to the current working directory

200
00:10:59,866 --> 00:11:02,533
我们仔细看看路径
let's take a closer look at paths

201
00:11:03,966 --> 00:11:07,900
一条路径有几个不同的组件，可能的组件
specifically there are several different components of a path possible components

202
00:11:07,966 --> 00:11:10,866
首先可能是开头的 /
first you might have that leading forward slash

203
00:11:11,000 --> 00:11:13,100
这创建了一个绝对路径
that creates an absolute path

204
00:11:13,400 --> 00:11:15,933
然后有一堆目录名
then you have a bunch of directory names

205
00:11:15,933 --> 00:11:18,666
我们认为这样比较易懂
we just kind of assumed that this was obvious

206
00:11:18,666 --> 00:11:21,500
/home表示home目录
slash home that is the home directory

207
00:11:21,500 --> 00:11:23,166
/yans表示yans目录
slash yans the yans directory

208
00:11:23,500 --> 00:11:26,600
每次一个目录后加上 / 表示
so every time I put a slash after a directory I signify

209
00:11:26,600 --> 00:11:29,266
要查看这个目录的内部
hey let's look inside that directory right

210
00:11:29,366 --> 00:11:32,400
我们要用这个目录内部的资源
we're referencing some resource inside the directory

211
00:11:32,866 --> 00:11:35,866
路径中也可能有一个点
there's also a dot that can be in the path 

212
00:11:36,100 --> 00:11:45,700
点是一个特殊条目，基本上表示它自己
a dot is a special entry in a directory that basically signifies itself

213
00:11:46,700 --> 00:11:50,500
我马上会解释为什么这很重要
and I'll explain why that is important in a second

214
00:11:51,300 --> 00:11:55,800
基本上你能用 ./blah/blah
but basically you can do dot slash blah blah blah blah

215
00:11:55,900 --> 00:11:59,000
它就和在你的当前工作目录 blah/blah 一样
and it's still your current directory slash something

216
00:11:59,466 --> 00:12:02,533
你可以在路径内的任意位置用 .
you can do dot at any point inside the path

217
00:12:06,000 --> 00:12:07,100
还能用 ..
or you can do a dot dot 

218
00:12:07,400 --> 00:12:08,600
这意味着退后一步
that means step back 

219
00:12:08,766 --> 00:12:14,400
往树上走，或者说向树根更近一步
step up the tree or closer to the anchor the root of the tree

220
00:12:15,466 --> 00:12:19,200
进入包含当前目录的目录
step into the directory that contains my directory

221
00:12:19,600 --> 00:12:22,700
当然，路径的末尾有一个文件名
and then of course at the end of the path you have a file name

222
00:12:23,200 --> 00:12:25,100
通常是你的最终目的地
often your final destination

223
00:12:25,100 --> 00:12:28,466
这些是访问同一个文件的不同方法
so these are different ways to access the same file 

224
00:12:28,700 --> 00:12:31,500
如果最初在/usr/bin
if you start out in user bin

225
00:12:31,500 --> 00:12:37,500
我们能用TOPSECRET的绝对路径找到它
we can reference this topsecret file using its full path

226
00:12:38,000 --> 00:12:42,400
也能用相对路径
we can do a relative walk basically 

227
00:12:42,566 --> 00:12:44,400
从/usr/bin出发的相对路径
a relative path from user bin

228
00:12:44,466 --> 00:12:46,966
到../../home
to dot dot slash dot dot slash home

229
00:12:46,966 --> 00:12:50,800
这2个../能带我们到根目录
and because this two dot dot slashes gets us into slash

230
00:12:51,400 --> 00:12:56,666
第一个../把我们带到/usr
the first dot dot slash puts us into or puts us references slash user

231
00:12:56,700 --> 00:13:00,400
第二个../把我们带到/
the second dot dot slash references slash

232
00:13:00,466 --> 00:13:02,900
然后跟着home/yans/flags/TOPSECRET
and then we have home yans flags topsecret

233
00:13:03,333 --> 00:13:09,233
还有这一长串也指的同一个文件
and then this all is also referencing the same file 

234
00:13:09,533 --> 00:13:13,300
看一下这个有趣的路径
so look this very interesting thing where

235
00:13:14,000 --> 00:13:17,000
最开始指向当前目录 
I started out referencing the current directory

236
00:13:17,100 --> 00:13:19,466
但因为../等等
but because I did dot dot slash etc etc

237
00:13:19,600 --> 00:13:21,500
最后又回到了老后面去了
I ended up way back up 

238
00:13:21,666 --> 00:13:22,900
一直回到root
all the way back to root 

239
00:13:23,166 --> 00:13:24,866
然后再到home/yans/等
and then into home yans etc 

240
00:13:25,066 --> 00:13:31,200
这实际上是一类被称为路径遍历的漏洞的起因
this is actually the source of a vulnerability class known as path traversal

241
00:13:32,000 --> 00:13:34,900
通常在一个不够小心的程序中
oftentimes in an application that is not careful

242
00:13:35,200 --> 00:13:41,100
有可能混入这些 ../../../等
it's possible to sneak in these dot dot slashes etc

243
00:13:41,300 --> 00:13:44,300
获取应用程序不想让你拿到的文件
to get at files that the application doesn't want you to get at

244
00:13:44,400 --> 00:13:47,266
但这要很后面才会讲
but that's looking way ahead 

245
00:13:47,500 --> 00:13:49,700
这不是我们这门课要深入研究的内容
and not actually something that we'll dig into in this course

246
00:13:49,866 --> 00:13:52,333
但这是一个有趣的安全问题
but it's an interesting security thing to know

247
00:13:53,100 --> 00:13:56,933
好了，这就是对路径的剖析
all right so this is the anatomy of a path

248
00:13:57,800 --> 00:14:03,200
现在我们执行过cat 路径
now we did cat some path 

249
00:14:03,233 --> 00:14:05,466
但cat本身在哪里呢
but where is cat itself

250
00:14:05,466 --> 00:14:08,200
cat是一个指向程序的相对路径吗
is cat a relative path to a program

251
00:14:08,366 --> 00:14:12,066
如果是，那执行cat flags/TOPSECRET时
if so when we did cat Flags topSecret

252
00:14:12,166 --> 00:14:16,100
当前目录下应该有一个cat文件
we would expect that there is a cat file in the current directory

253
00:14:16,200 --> 00:14:17,866
但能看到，这里没有
 but you can see there is not

254
00:14:17,866 --> 00:14:19,600
如果你尝试用cat 输出它
and if you try to cat it out 

255
00:14:19,833 --> 00:14:21,566
它不存在，对吧
it doesn't exist right 

256
00:14:21,833 --> 00:14:22,666
事实证明
it turns out that 

257
00:14:22,766 --> 00:14:26,900
如果命令的第一个字符不是/
if the first word of a command has no forward slash characters

258
00:14:26,900 --> 00:14:28,600
当然你可以用./cat
now of course you could do dot slash cat 

259
00:14:28,800 --> 00:14:32,133
尝试执行一个在当前目录中的cat
and try to execute a cat file in the local directory

260
00:14:32,133 --> 00:14:33,366
你可以给一个绝对路径
you can give an absolute path

261
00:14:33,533 --> 00:14:36,133
但如果命令的第一个字符不是/
but if the first word of the command has no forward slash characters

262
00:14:36,200 --> 00:14:39,900
shell就会去找该程序
the shell will search for that program

263
00:14:41,466 --> 00:14:45,866
或者找它的内置命令
or either it'll search its builtins stuff like cd 

264
00:14:46,933 --> 00:14:52,200
如cd之类的写入在shell解释器本身中的内置命令
and so on built in functionality programmed into the shell interpreter itself

265
00:14:52,300 --> 00:14:59,000
或在path变量指定的目录里
or it'll search its file system through a set of directories specified in the path variable

266
00:14:59,000 --> 00:15:00,066
寻找目标程序
for that program

267
00:15:00,166 --> 00:15:02,766
path变量到底是什么
so what the heck is a path variable

268
00:15:02,766 --> 00:15:04,566
一般的变量是什么
well what's a variable in general

269
00:15:05,400 --> 00:15:08,333
这里我指的是环境变量
here I'm referring to environment variables

270
00:15:08,533 --> 00:15:12,733
是一个在Linux和大多数操作系统中都有的概念
a concept in Linux and most operating systems actually

271
00:15:14,200 --> 00:15:20,000
基本上是每个进程启动时都会收到的一些信息
where basically every process will start with some information handed to it

272
00:15:20,000 --> 00:15:24,400
以后的视频会讨论，是怎么传给它，以及存在哪里
we'll talk later about how that information gets there where it's stored in future videos 

273
00:15:24,500 --> 00:15:30,600
现在可以认为是每个进程启动时都带有一组键值对
but for now consider that every process starts with a set of key value pairs

274
00:15:31,166 --> 00:15:32,333
在它启动时
when it's launched

275
00:15:36,700 --> 00:15:37,700
等一下
hold on a second

276
00:15:39,333 --> 00:15:41,000
我暂停，修正一下
let me pause and fix something

277
00:15:42,800 --> 00:15:44,133
我回来了，抱歉
I'm back sorry about that 

278
00:15:44,433 --> 00:15:47,766
不知道这个截图是怎么消失的，但它没了
I don't know how this screenshot disappeared but it disappeared

279
00:15:47,933 --> 00:15:49,166
好的，现在回来了
all right it's back now

280
00:15:49,400 --> 00:15:57,400
你可以打印出当前一直传递的环境变量
so you can print out the environment variables that you currently are passing around

281
00:15:57,600 --> 00:16:03,700
进程在启动别的进程时，传递给对方的环境变量
process pass these environment variables to each other as they execute each other 

282
00:16:03,766 --> 00:16:08,600
比如，shell会将它们传给你执行的命令
so your shell will pass them on to any commands you execute

283
00:16:08,900 --> 00:16:13,666
你可以用env命令，查看环境变量
you can check the environment variables you're currently logging around with the env command

284
00:16:13,900 --> 00:16:15,133
这是一个非常有用的命令
it's a very useful command

285
00:16:15,133 --> 00:16:16,766
你应该研究一下它的man手册
and you should study its manpage

286
00:16:16,766 --> 00:16:18,366
特别是在这个模块中
especially for this module

287
00:16:19,000 --> 00:16:22,400
总之，你能用env查看当前设置的环境变量
but you can use env to look at the environment variables that are set

288
00:16:22,500 --> 00:16:25,600
在这个截图中，有一些设置好的环境变量
so in this screenshot I have a bunch of environment variables set

289
00:16:25,800 --> 00:16:28,800
当然，你还可以更新修改环境变量
and then of course you can update your environment variables 

290
00:16:29,033 --> 00:16:34,266
比如，使用一些shell语法
by using some shell syntax for example

291
00:16:34,566 --> 00:16:38,200
或者，若不在shell中，可用其它api
or through other APIs if you're not in a shell

292
00:16:38,200 --> 00:16:39,933
比如你在写一个程序
for example you're writing a program

293
00:16:40,800 --> 00:16:43,866
现在环境变量变了
and now my environment variables are different

294
00:16:43,966 --> 00:16:47,366
比如我能修改PATH环境变量
so I can actually for example change the path environment variable

295
00:16:47,400 --> 00:16:50,600
让shell去另一个目录找cat
to make it search for cat in a different place

296
00:16:52,500 --> 00:16:56,066
回到路径
back to paths

297
00:16:56,466 --> 00:17:09,100
若想知道shell会在哪里找到给定程序
if you curious about where your shell will actually find a given program

298
00:17:09,100 --> 00:17:13,100
最终会执行哪个二进制文件
what actual binary will end up being executed

299
00:17:13,166 --> 00:17:14,933
可以使用which命令
you can use the which command 

300
00:17:15,166 --> 00:17:20,933
which会找遍你的PATH变量
which searches through your path and returns the

301
00:17:22,400 --> 00:17:24,433
会找遍你的PATH环境变量
searches through your path environment variable 

302
00:17:24,466 --> 00:17:29,333
并返回它找到的路径
and returns the file system path of the command wherever it finds it 

303
00:17:33,400 --> 00:17:36,066
我们更深入地了解一下文件本身
let's look deeper at files themselves

304
00:17:36,066 --> 00:17:39,166
关于文件我们已经讨论了很多，文件这，文件那
we've been talking a lot about files files files this and that

305
00:17:39,600 --> 00:17:42,133
但我们还没有真正深入研究什么是文件
but we haven't really dug into what a file is right

306
00:17:42,133 --> 00:17:45,533
原来有许多不同类型的文件
it turns out there are many different types of files

307
00:17:47,033 --> 00:17:50,266
我们熟悉的常规意义的文件
the regular concept of a file that you're used to 

308
00:17:50,433 --> 00:17:55,133
比如这几个例子中一直在cat输出的flag文件
the flag file you've been catting out in all of these examples that has data

309
00:17:55,200 --> 00:17:57,166
这只是一种类型的文件
that's just one type of files

310
00:17:57,166 --> 00:18:00,000
最常见的就是这种普通文件
the most common one is the normal regular file

311
00:18:00,300 --> 00:18:07,300
你可以用ls -ld命令检查文件
you can use the ls -ld command to look at your files

312
00:18:07,366 --> 00:18:14,433
实际上是ls -l输出了这种长的文件细节数据
really it's ls -l is what gives this long form output of details about files

313
00:18:14,566 --> 00:18:18,100
-d能让你查看目录的数据
-d allows you to also look at directories

314
00:18:18,100 --> 00:18:20,166
通常，ls会查看目录内部文件
normally ls will look inside directories 

315
00:18:20,300 --> 00:18:22,766
但用了-d，它就会看这个目录本身
with dash d it'll instead look at directories

316
00:18:24,000 --> 00:18:25,300
所以
so ls -ld 

317
00:18:25,600 --> 00:18:32,766
如果我们看一下内有flag的
if we look at the topsecret file that actually has our flag in it 

318
00:18:32,766 --> 00:18:34,500
截图中输出的TOPSECRET
that we've been catting out in these screenshots

319
00:18:34,500 --> 00:18:36,900
能看到它就是这种文件
you can see it's the type of the file

320
00:18:36,933 --> 00:18:39,166
这一行第一个字符是 -
the first character printed on the line is a dash

321
00:18:39,166 --> 00:18:41,200
如果你看一下包含它的目录
if you look at the directory containing it

322
00:18:41,200 --> 00:18:42,900
则是d
that is a D

323
00:18:43,400 --> 00:18:45,900
d代表目录
of course d stands for directory

324
00:18:45,900 --> 00:18:47,933
目录实际上是一种文件
directory is actually a type of file

325
00:18:48,700 --> 00:18:55,100
只是它里面记录了其它文件的条目
that just happens to have entries that refer to other files

326
00:18:56,700 --> 00:18:58,600
重申一下，- 代表普通文件
again a dash is just a regular file

327
00:18:58,600 --> 00:19:00,200
还有很多其他类型的文件
there are a lot of other files

328
00:19:00,200 --> 00:19:04,333
有符号链接，一会儿会讲到
there are symbolic links we'll talk about them in next

329
00:19:04,366 --> 00:19:05,300
有有名管道
there are named pipes

330
00:19:05,300 --> 00:19:06,700
我们稍后再讨论它们
we'll talk about them a little later

331
00:19:06,700 --> 00:19:08,200
还有一些奇特的东西
and then there's exotic stuff 

332
00:19:08,400 --> 00:19:11,000
比如，字符设备文件
like character device file

333
00:19:11,000 --> 00:19:14,333
这些文件代表硬件设备
these are files that represent a hardware device

334
00:19:14,333 --> 00:19:15,466
通常是硬件设备
usually a hardware device

335
00:19:15,700 --> 00:19:21,400
但也有些操作系统的支持文件
but any sort of device backed by the operating system itself

336
00:19:22,100 --> 00:19:25,300
当然，也会与硬件通信
which of course mediates communication with hardware as well

337
00:19:25,933 --> 00:19:27,766
这里的数据流
that streams data

338
00:19:28,200 --> 00:19:29,900
比如麦克风，对吧
such as a microphone right

339
00:19:30,300 --> 00:19:36,000
块设备是一种加载和存储数据块的设备
a block device is a device that loads and stores chunks of data 

340
00:19:36,133 --> 00:19:37,033
比如，硬盘
like a hard drive

341
00:19:38,633 --> 00:19:44,066
还有s，这也是一个奇特的装置（Unix套接字）
and then there's s which is an exotic device

342
00:19:44,400 --> 00:19:46,966
这是Unix中的一种联网方式
 that's a way to do networking in Unix 

343
00:19:47,066 --> 00:19:49,933
它不需要实际的网络地址
without actual network addresses through these files

344
00:19:50,100 --> 00:19:52,200
这门课我们不用管它
we won't worry about that really in this class 

345
00:19:52,466 --> 00:19:54,399
但有趣的是
but as a fun fact 

346
00:19:54,700 --> 00:19:57,333
pwn学院的大部分基础设施
much of the infrastructure of pwn College 

347
00:19:57,333 --> 00:20:00,966
都依赖这些Unix套接字，以及它们的通信能力
depends on these crazy Unix sockets and the abilities communicate with them

348
00:20:01,433 --> 00:20:05,166
这些是不同类型的文件
 so these are our different types of files

349
00:20:05,166 --> 00:20:07,266
我们看看符号链接
let's look at symbolic links

350
00:20:07,933 --> 00:20:10,100
符号链接也被称为软链接
a symbolic link is also known as a soft link

351
00:20:10,100 --> 00:20:14,900
它基本上是一种引用，指向其它文件
it's basically a type of file that references another file

352
00:20:15,166 --> 00:20:16,933
它就像转发地址
it's like a forwarding address

353
00:20:16,966 --> 00:20:19,599
当你尝试打开一个符号链接
you try to open a symbolic link 

354
00:20:19,600 --> 00:20:21,266
它会说，不不不，你想要的不是我
and says no no not me not me

355
00:20:21,266 --> 00:20:23,800
是我指向的这个文件
I'm actually pointing to this other file right

356
00:20:23,800 --> 00:20:27,800
用ln命令创建链接时
you create them with the ln command for links

357
00:20:27,933 --> 00:20:31,466
加上-s符号链接参数
link with -s symbolic argument

358
00:20:31,466 --> 00:20:32,800
读一下ln的帮助文档
read the man page of ln

359
00:20:32,800 --> 00:20:34,866
它很有用，有很多好东西
it's very useful there's a lot of good stuff

360
00:20:37,266 --> 00:20:39,199
你可以创建一个文件
and you can create a file

361
00:20:39,400 --> 00:20:43,600
这儿我们创建了符号链接link_to_the_flag
so here we're creating this symbolic link link_to_the_flag

362
00:20:43,600 --> 00:20:45,266
这是一个符号链接文件
this is a symbolic link file

363
00:20:45,266 --> 00:20:46,466
你能看到这个 l
you can see this l

364
00:20:46,933 --> 00:20:48,766
它指向
that points to

365
00:20:49,133 --> 00:20:52,466
我们在当前目录执行ls -l，能看到
when we do ls -l on the current directory

366
00:20:52,533 --> 00:20:55,199
它指向flags/topsecret
points to flags/topsecret

367
00:20:56,200 --> 00:20:57,566
这个相对路径
this relative path

368
00:20:58,333 --> 00:21:00,566
当我们用cat输出这个文件
and then when we cat out this file

369
00:21:00,633 --> 00:21:04,299
我们实际输出的是它的终点
what we're actually catting out is its destination

370
00:21:04,466 --> 00:21:06,566
就是它所引用的文件
it's the file it's referencing

371
00:21:07,100 --> 00:21:08,633
也可以链接到目录
you can also link directories 

372
00:21:08,933 --> 00:21:09,699
方法一样
same way 

373
00:21:09,933 --> 00:21:12,999
你只需要建立一个链接
you just make a link

374
00:21:13,100 --> 00:21:14,666
能看到
we can look at it 

375
00:21:14,966 --> 00:21:16,300
它指向flags目录
and it points to flags 

376
00:21:16,666 --> 00:21:20,466
我们可以执行 cat 链接/TOPSECRET
we can cat out the that linked directory slashtopsecret

377
00:21:20,733 --> 00:21:21,866
然后得到了flag
and we get our flag

378
00:21:23,000 --> 00:21:24,466
链接非常有用
links are super useful

379
00:21:24,466 --> 00:21:27,833
原因有很多
they're useful for many reasons and 

380
00:21:29,300 --> 00:21:32,500
以至于我想不出一个具体例子
they're so useful that I'm drawing a blank on an example

381
00:21:32,700 --> 00:21:40,733
但如果你在为一个项目构建目录结构
but if you're setting up a development file system 

382
00:21:40,733 --> 00:21:43,766
你想引入不同的项目依赖
and you want to link in different repositories

383
00:21:43,766 --> 00:21:45,333
方法a可能不好做
a you're probably doing it wrong

384
00:21:45,333 --> 00:21:48,899
但方法b，你可以用软连接实现
but b you can use symbolic links for that 

385
00:21:48,900 --> 00:21:50,000
还有很多其他的东西
and many other things

386
00:21:50,966 --> 00:21:53,100
讲一些符号链接问题
some symbolic link gotchas

387
00:21:53,466 --> 00:21:55,266
符号链接的一个怪的行为是
a crazy behavior of symbolic links is

388
00:21:55,266 --> 00:21:58,300
如果软链接指向一个相对路径
 if you have a symbolic link pointing to a relative path

389
00:21:58,666 --> 00:22:03,066
那这个相对路径是相对于软链接的
that relative path is relative to the symbolic link itself

390
00:22:03,066 --> 00:22:04,766
而不是你此时的工作目录
not to your current directory

391
00:22:05,266 --> 00:22:08,566
这里我在/home/yans创建了一个软连接
so here I create a symbolic link in home yans

392
00:22:08,566 --> 00:22:11,399
它指向flags/TOPSECRET
that is pointing to flags topsecret

393
00:22:11,766 --> 00:22:15,933
如果我把它移到tmp中
but if I move that symbolic link somewhere to tmp

394
00:22:15,933 --> 00:22:17,499
再cat输出它
and then I try to cat it out

395
00:22:17,733 --> 00:22:23,499
它实际上会去找/tmp/flags/TOPSECRET
what is actually trying to get at is tmp flags topsecret

396
00:22:24,400 --> 00:22:28,366
虽然我当前的工作目录还在/home/yans
even though my current directory is still in my home directory

397
00:22:28,366 --> 00:22:31,299
当然，它找不到那个文件
 and of course it can't find that file

398
00:22:31,600 --> 00:22:33,866
但它的错误提示不会
but rather than print 

399
00:22:34,133 --> 00:22:38,533
默认情况，cat打开无效软链接时
by default cat tries to open that file 

400
00:22:38,733 --> 00:22:40,899
会直接返回一个错误：文件不存在
and just gets an error that that file doesn't exist

401
00:22:41,300 --> 00:22:44,100
它不会调查它指向哪里等等
it doesn't investigate where it's pointing to etc etc

402
00:22:44,133 --> 00:22:48,400
它会直接告诉你这个链接文件不存在
it just tells you that this link does not exist

403
00:22:48,500 --> 00:22:51,466
这真的很令人困惑，因为这个链接确实存在
which is really confusing because that link very much exists

404
00:22:51,500 --> 00:22:53,100
它就在那里
because it's right here

405
00:22:53,133 --> 00:22:54,966
只是它指向的目标文件不存在
it's just its destination doesn't exist

406
00:22:55,133 --> 00:22:57,466
所以用相对路径时要小心
so be careful about relative paths 

407
00:22:57,566 --> 00:22:59,533
这种错误提示的不透明
and this sort of error opacity

408
00:22:59,733 --> 00:23:03,733
提示说符号链接的错误
where you will see errors about the symbolic link

409
00:23:03,800 --> 00:23:07,100
但实际是符号链接目标的错误
but they're really about the destination of the symbolic link

410
00:23:08,133 --> 00:23:11,066
当然，如果你坚持用绝对路径
of course if you just stick to absolute paths

411
00:23:11,066 --> 00:23:12,766
事情往往会好得多
things tend to work much better 

412
00:23:12,766 --> 00:23:17,433
但你可能会
but then you might actually

413
00:23:18,200 --> 00:23:20,366
绝对路径有时不是你想用的
this might not be the desired behavior

414
00:23:20,600 --> 00:23:27,033
例如，如果你把/home/yans改成/home/blah
for example if you just rename /home/yans to /home/blah

415
00:23:27,033 --> 00:23:30,099
这个相对路径仍然能用
this would still work with this relative path

416
00:23:30,100 --> 00:23:31,800
但绝对路径就用不了了
but absolute path would then not work

417
00:23:31,800 --> 00:23:33,666
所以取决于你的使用需求
so it depends on your use case

418
00:23:34,000 --> 00:23:35,933
可能会有些问题
there's some gotchas all right

419
00:23:40,300 --> 00:23:45,700
软链接的存在意味着有硬链接
the existence of soft links implies the existence of hard links

420
00:23:45,800 --> 00:23:47,600
它们确实存在
and they do exist 

421
00:23:47,700 --> 00:23:51,566
它们是用ln 不加-s参数创建的
they are created with ln without the dash s argument 

422
00:23:51,966 --> 00:23:57,866
它们完美地引用了原始文件指向的数据
and they are a perfect reference to the data pointed by the original file 

423
00:23:58,066 --> 00:24:00,199
用的和原始文件相同的方法
in the same way that the original file is 

424
00:24:00,200 --> 00:24:05,500
实际上，你可以将普通文件视为指向其内容的硬链接
actually you could view any normal file as a hard link to the contents

425
00:24:06,100 --> 00:24:08,766
创建一个硬链接只是多加了一个
and creating a hard link just adds another one right

426
00:24:09,200 --> 00:24:16,100
在这里，当我链接hard_link_to_flag到flags/TOPSECRET
in this case when I link hard_link_to_flag to point to flags/topsecret

427
00:24:16,333 --> 00:24:23,833
这个文件，很难判断它是不是原始文件
that is a file that is very hard to tell that it is not the original file

428
00:24:24,600 --> 00:24:26,000
它们共享相同的内容
they share the same content 

429
00:24:26,133 --> 00:24:29,366
如果我修改一个，另一个也会改变，等等
if I modify one the other one will change etc etc

430
00:24:29,366 --> 00:24:32,666
虽然软连接也这样，但硬链接
soft links are that same way but hard links

431
00:24:32,900 --> 00:24:38,200
硬链接与原始文件的路径没有关系
that hard link has no relationship with the original path of the original file

432
00:24:38,300 --> 00:24:39,400
只与数据有关
just with the data

433
00:24:39,866 --> 00:24:41,166
不像软链接
unlike a soft link

434
00:24:43,133 --> 00:24:46,499
如果你对它的原理感兴趣
if you are really interested in how this works

435
00:24:47,199 --> 00:24:51,899
这节课中，我不会详细讲inode是什么等等
I'm not going to go into inodes what they are and etc etc in this lecture

436
00:24:51,933 --> 00:24:54,233
但如果你对它的原理感兴趣
but if you're interested in how this works 

437
00:24:54,366 --> 00:24:58,933
你可以深入研究这篇文章，能获得很多信息
you can dig into this post and get a lot of information

438
00:25:00,866 --> 00:25:02,866
我们转到管道
let's move on to pipes 

439
00:25:03,066 --> 00:25:05,799
管道是另一种类型的文件
pipes are another type of file

440
00:25:06,800 --> 00:25:10,833
p类型文件，表示有名管道
a p file it represents a named pipe

441
00:25:11,200 --> 00:25:15,466
但在你使用Linux时，计算机上的大多数管道
but most pipes on your computer when you're using Linux 

442
00:25:15,533 --> 00:25:17,299
实际上是无名的
actually not named

443
00:25:17,533 --> 00:25:21,033
它们是暂时的单向通道
they are ephemeral channels of unidirectional

444
00:25:21,600 --> 00:25:25,866
在管道一侧写入信息
information where one side of the pipe writes to it 

445
00:25:25,866 --> 00:25:27,733
另一边读出信息
and the other side reads to it

446
00:25:29,066 --> 00:25:30,133
这有一个例子
this is an example

447
00:25:30,133 --> 00:25:31,233
如果我cat输出flag
if I cat out the flag 

448
00:25:31,333 --> 00:25:33,399
然后计算它的md5值
and I try to compute MD5 sum of it

449
00:25:33,600 --> 00:25:35,000
我输出flag
I can cat the flag out 

450
00:25:35,133 --> 00:25:35,833
把它放到管道
I can pipe it 

451
00:25:36,066 --> 00:25:39,366
用md5sum计算输入值
I can md5sum that input

452
00:25:40,166 --> 00:25:43,199
所以这个会流入到md5sum
so this flows input into md5sum 

453
00:25:43,400 --> 00:25:51,200
同样的，我可以将输入流到shell脚本或shell中
in the same way I can flow input into a shell script or into a shell

454
00:25:51,600 --> 00:25:53,800
我展示一下
let me show you 

455
00:25:53,933 --> 00:25:55,466
我们看看这是否可行
let's see if this will work

456
00:25:55,766 --> 00:25:57,666
我展示一下效果
let me show you how this will go

457
00:26:03,533 --> 00:26:05,000
好的，可以
all right this kind of works

458
00:26:05,400 --> 00:26:08,966
我可以执行echo echo hi
I can do echo echo hi

459
00:26:09,200 --> 00:26:11,200
这将输出echo hi
so this will output echo hi

460
00:26:11,366 --> 00:26:14,566
如果我把它用管道输给bash
if I pipe that into a bash shell

461
00:26:14,566 --> 00:26:15,866
bash会执行它
it'll actually execute it 

462
00:26:16,100 --> 00:26:18,700
因为bash是shell解释器
because bash is my shell interpreter 

463
00:26:19,100 --> 00:26:23,866
它从输入中读取命令
that reads commands from its input 

464
00:26:24,133 --> 00:26:28,966
我现在把它作为输入
which I am now making as its input 

465
00:26:29,366 --> 00:26:33,333
echo echo hi的输出，即echo hi
the output of echo echo hi which is echo hi

466
00:26:33,333 --> 00:26:34,833
好吧，疯狂的东西
all right crazy stuff 

467
00:26:35,033 --> 00:26:39,099
在这个模块中你要非常熟悉它
you'll have to get very familiar with it in this module 

468
00:26:39,233 --> 00:26:41,299
这里还只是个预告
but that was a sneak peek

469
00:26:42,000 --> 00:26:47,300
有名管道，因为他们的行为，也被称为fifo
named pipes also known as FIFOs for their behavior

470
00:26:47,533 --> 00:26:49,499
叫做先进先出
it's called first in first out

471
00:26:49,500 --> 00:26:52,300
收到的第一个数据就是输出的第一个数据
so the first data that's received is the first data that's output

472
00:26:52,466 --> 00:26:54,533
后面的数据排到后面
later data goes next and so on

473
00:26:55,300 --> 00:27:00,300
它们是存在于文件系统上的文件
they are a file that exists on the file system that

474
00:27:02,000 --> 00:27:04,933
作用与无名管道相同
acts the same as a pipe

475
00:27:05,166 --> 00:27:10,599
它是个单向的信息流通道
 it's a unidirectional channel for information flow

476
00:27:10,933 --> 00:27:13,366
你们也要熟悉这些
and you will have to get familiar with those as well

477
00:27:13,366 --> 00:27:15,066
还有mkfifo命令的使用
and with the mkfifo command 

478
00:27:15,066 --> 00:27:16,233
多读man手册
read the man page

479
00:27:21,166 --> 00:27:23,166
我们讨论一下输入和输出重定向
let's talk about input and output redirection

480
00:27:23,466 --> 00:27:29,133
我刚刚很轻松的将一个命令的输出
I very casually redirected output from one command 

481
00:27:29,200 --> 00:27:30,933
用管道输入给了另一个命令
into the input of another command with a pipe

482
00:27:30,933 --> 00:27:33,066
但你也可以重定向文件
but you can also redirect files

483
00:27:33,533 --> 00:27:36,199
它的语法基本就是
and the syntax to do so is just tacking on 

484
00:27:36,333 --> 00:27:39,366
基本就是<，用于重定向输入
basically a less than for redirecting to the input

485
00:27:39,366 --> 00:27:43,366
> 用于重定向输出
or a greater than for redirecting output to the command itself 

486
00:27:43,366 --> 00:27:46,966
可以把另一个文件重定向成输入
I can redirect the input from a different file

487
00:27:46,966 --> 00:27:48,500
把输出重定向到另一个文件
I can redirect output into a file

488
00:27:48,500 --> 00:27:50,266
可以将输出追加到一个文件
I can append output to a file

489
00:27:50,300 --> 00:27:53,366
可以重定向程序的错误输出
I can redirect errors printed by the program

490
00:27:53,500 --> 00:27:57,000
当然，程序会恰当地输出这些错误
course the programs to be care properly print these errors and so forth

491
00:27:57,100 --> 00:28:03,266
但我能用2>把错误输出重定向了
but I can redirect errors written in a program with this 2 greater than syntax

492
00:28:03,266 --> 00:28:04,566
你必须理解
you will have to understand

493
00:28:05,966 --> 00:28:08,666
你需要查阅文档
and you would have to look up documentation 

494
00:28:08,833 --> 00:28:17,399
找到这个2>是什么意思
and find why that 2 greater than is a 2 greater than in the course of this module

495
00:28:19,900 --> 00:28:28,300
这基本上就能让你重定向程序的输入和输出
and this allows you basically to redirect input and output of your program

496
00:28:28,700 --> 00:28:33,000
这对脚本、自动化等非常重要
which is super important for scripting automating and etc

497
00:28:35,400 --> 00:28:36,200
好的
alright

498
00:28:36,400 --> 00:28:42,266
这就是我为你们准备的命令行速成课
that is the crash course that I have for you about the command line 

499
00:28:42,533 --> 00:28:45,499
如果这是很多新信息
if this was a lot of new information 

500
00:28:45,666 --> 00:28:48,799
我强烈推荐
I highly recommend that good cat 

501
00:28:49,133 --> 00:28:55,066
我强烈建议你上网查找相关资料
I highly recommend that you look online for resources 

502
00:28:55,366 --> 00:28:58,599
以便快速上手命令行
to get up to speed with using the command line

503
00:28:58,900 --> 00:29:02,000
网上有很多教程
there's a lot a lot of tutorials all over the place

504
00:29:02,000 --> 00:29:10,300
比如在YouTube，文档，?挑战系列等等
on YouTube、documentation、？、 challenge series etc etc etc

505
00:29:10,400 --> 00:29:13,000
都能帮你熟悉命令行
on getting very familiar with the command line

506
00:29:13,333 --> 00:29:14,966
本模块需要你熟悉它
you will need it for this module

507
00:29:14,966 --> 00:29:16,900
后面的课程也需要
and you will need it for the rest of the class

508
00:29:16,900 --> 00:29:20,100
这也是为什么有这个模块
and that is why this module exists

509
00:29:22,133 --> 00:29:23,666
在本模块中后面的内容
through the rest of the module 

510
00:29:23,766 --> 00:29:27,333
我们将讨论Linux中的程序是如何工作的
we'll talk about how programs work in Linux

511
00:29:28,000 --> 00:29:29,100
如何启动的
how they start up

512
00:29:29,100 --> 00:29:30,500
如何与系统交互的
how they interact with an environment

513
00:29:30,500 --> 00:29:31,566
如何关闭的
how they shut down

514
00:29:32,133 --> 00:29:38,933
这也会帮助你在任务中获得高分
that as well will help you out in your quest to get the top of the scoreboard

515
00:29:39,066 --> 00:29:39,999
祝你好运
good luck

