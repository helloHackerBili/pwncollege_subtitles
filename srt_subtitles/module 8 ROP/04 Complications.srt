1
00:00:01,766 --> 00:00:03,266
你好黑客
hello hackers

2
00:00:03,666 --> 00:00:05,766
欢迎回到pwn学院
welcome back to pwn College 

3
00:00:06,133 --> 00:00:12,566
这是面向返回编程模块的第四个视频
this is the fourth video in the return oriented programming module

4
00:00:12,566 --> 00:00:16,999
我们将讨论ROPing时会遇到的问题
we're going to be talking about complications you run into when ROPing

5
00:00:17,533 --> 00:00:18,333
好吧
all right

6
00:00:19,266 --> 00:00:21,299
我要介绍一些问题
I'm just going to go through a bunch of issues

7
00:00:21,300 --> 00:00:26,900
谈谈影响
talk about how this impact you and

8
00:00:27,900 --> 00:00:31,900
以及如何绕过这些问题
how you might bypass these issues

9
00:00:32,533 --> 00:00:35,266
问题一，有限的栈控制
issue No. 1 limited stack control

10
00:00:35,266 --> 00:00:39,899
有时候你能溢出的范围是相当少的
right sometimes your amount that you can overflow is actually fairly low

11
00:00:40,000 --> 00:00:42,733
也许你只能溢出返回地址
maybe you can just overflow the return address

12
00:00:42,866 --> 00:00:44,133
这就是你能控制的全部
and that's all you get

13
00:00:47,100 --> 00:00:48,400
这种情况经常发生
this happens a lot

14
00:00:48,400 --> 00:00:50,166
有几种方法可以处理
there are several ways to deal with it

15
00:00:50,566 --> 00:00:53,266
一种处理方法是
one way to deal with it is

16
00:00:59,600 --> 00:01:01,166
我先理一下
let me actually go through that alright

17
00:01:01,166 --> 00:01:02,566
为什么会出现这种情况
so why might this occur

18
00:01:02,733 --> 00:01:04,966
一个原因是
one reason it could occur is that

19
00:01:05,066 --> 00:01:06,266
有些漏洞只能溢出有限的范围
 there're still limited overflow

20
00:01:06,400 --> 00:01:13,700
假设在一个每元素8字节的数组中有一个off by one漏洞
 off by one that lets you in let's say an array of eight byte elements 

21
00:01:13,800 --> 00:01:16,200
只能让你重写返回地址
that let's you overwrite just the return address

22
00:01:16,266 --> 00:01:17,066
或
or

23
00:01:17,400 --> 00:01:19,800
你无法输入空字节
maybe you can't input any null bytes

24
00:01:19,800 --> 00:01:25,400
当你要输入amd64中地址的最高有效位时
when you input  the most significant bytes of an address on amd64

25
00:01:25,500 --> 00:01:28,200
它们大部分都是00
they're null for the most part

26
00:01:29,000 --> 00:01:31,066
那你的溢出将被00截断
then your overflow ends

27
00:01:31,066 --> 00:01:33,866
这样你就只能触发一个gadget
and then you can only trigger one gadget right

28
00:01:35,100 --> 00:01:39,666
事实证明你只用一个gadget就能成功
turns out you can win with just one gadget and

29
00:01:40,066 --> 00:01:41,499
有几种方法可以做到这一点
there are several ways to do it

30
00:01:41,800 --> 00:01:49,000
一种方法是触发所谓的神奇gadget
one way is to trigger what is called a magic gadget

31
00:01:49,200 --> 00:01:52,300
当你调用system库函数时
when you call the system library call

32
00:01:55,300 --> 00:01:58,000
设置好execve的参数
you set up a call to execve

33
00:01:58,100 --> 00:02:03,400
/bin/sh -c和想让系统执行的命令
/bin/sh -c and whatever command you set to system

34
00:02:03,700 --> 00:02:07,733
如果你很幸运，跳到了system中
if you are lucky and you jump part way into system

35
00:02:08,566 --> 00:02:14,533
你可以触发execve /bin/sh
you could trigger execve /bin/sh right

36
00:02:14,933 --> 00:02:17,766
这实际上能行，这个就叫神奇gadget
and it actually works this called the magic gadget

37
00:02:17,766 --> 00:02:18,799
有工具
there are tools

38
00:02:19,333 --> 00:02:21,366
其中一个在我的CTF工具库中
one of them is on my CTF tools repository

39
00:02:21,800 --> 00:02:26,300
它会帮你找到这些gadget的地址
 that will find the address of these gadgets for you

40
00:02:27,000 --> 00:02:28,166
问题是这些gadget
the problem is that these gadgets 

41
00:02:28,300 --> 00:02:34,633
对执行环境有要求
have requirements on how the the stage should look like 

42
00:02:34,766 --> 00:02:42,166
RAX、RSI或RDI需要是特定值
what RAX or RSI or RDI need to be

43
00:02:42,266 --> 00:02:45,099
例如，RDX可能需要为空
for example RDX might need to be null

44
00:02:45,166 --> 00:02:49,066
那么这个env可以传入一个null
so that this environment can be passed in as null 

45
00:02:49,233 --> 00:02:52,999
然后
and then you know

46
00:02:53,700 --> 00:02:56,000
这个system调用将成功
the execve system will succeed

47
00:02:56,500 --> 00:02:59,266
这并不总是那么简单
so it's not always super simple

48
00:03:00,766 --> 00:03:01,699
有时
and sometimes

49
00:03:02,600 --> 00:03:13,433
尝试跳到system的不同偏移
it's easier to just try jumping into every different offset of system on your machine and libc 

50
00:03:13,566 --> 00:03:14,566
看看会发生什么更容易
 and see what happens

51
00:03:14,566 --> 00:03:18,033
例如，你可以执行一些随机的事情
for example you might be able to execute some random thing 

52
00:03:18,200 --> 00:03:20,600
它只是执行一些文件
that just execve some file

53
00:03:20,600 --> 00:03:25,000
然后你可以在那个文件里放一些东西
and then you can put something in that file

54
00:03:25,066 --> 00:03:27,766
你在shellcoding模块中完成了此操作
you've done this again in the shellcoding module

55
00:03:27,866 --> 00:03:30,699
你在那里只能给execve传一个字符
where you were able to execve 1 letter

56
00:03:31,600 --> 00:03:36,800
创建一个名字只有一个字母的程序
but of course by creating a program with that one letter name

57
00:03:36,866 --> 00:03:38,333
你就能够执行它
you were able to execute it

58
00:03:40,533 --> 00:03:42,266
这是一个值得思考的例子
just an example to think about

59
00:03:42,266 --> 00:03:43,799
就神奇gadget而言
in terms of a magic gadget

60
00:03:44,500 --> 00:03:50,466
当然，神奇gadget通常都是必备之物
of course the magic gadget is often the go to thing 

61
00:03:50,833 --> 00:03:57,766
因为想获得shell，想调用system
because people want a shell people want to run system right

62
00:03:58,100 --> 00:03:59,366
想获得flag
you want the flag

63
00:03:59,366 --> 00:04:01,466
您不一定非得运行system
you don't necessarily need to run system

64
00:04:01,500 --> 00:04:03,066
chown就够用
chown is great for you

65
00:04:05,533 --> 00:04:07,966
还有很多其他的东西
and a whole lot of other things right

66
00:04:08,300 --> 00:04:09,633
事实上，system是不好的
in fact system is bad 

67
00:04:09,733 --> 00:04:12,899
因为默认情况下bin sh会丢掉特权
because bin sh will drop privileges by default

68
00:04:12,966 --> 00:04:15,799
所以你需要的是
so what you want to do is

69
00:04:19,333 --> 00:04:22,266
找到一个适合你的神奇gadget
find a magic gadget that works for you

70
00:04:22,266 --> 00:04:27,699
例如，这个神奇gadget可能是chown库函数的一部分
that magic gadget might be part way into the chown library call for example

71
00:04:28,200 --> 00:04:30,000
好的，问题2
all right issue 2

72
00:04:32,066 --> 00:04:34,933
地址空间布局随机化
address space layout randomization

73
00:04:34,933 --> 00:04:38,166
这实际上也与问题1有关
this actually has to do also with issue 1

74
00:04:41,100 --> 00:04:43,533
你也只能触发一个gadget
 where you can only do one gadget

75
00:04:43,700 --> 00:04:44,900
我会讲为什么
I'll talk about why

76
00:04:46,333 --> 00:04:48,333
如果你不知道内存中各部分的位置
if you don't know where anything is in memory

77
00:04:48,333 --> 00:04:50,733
你就无法写出有用的返回地址链
you can't write intelligent return addresses

78
00:04:50,733 --> 00:04:51,966
这是行不通的
it just won't work

79
00:04:52,100 --> 00:04:55,066
对，其实你们已经遇到过这个问题了
right but you've already seen this problem

80
00:04:55,066 --> 00:04:56,599
你在babymem中遇到过
you've seen this in babymem

81
00:04:56,700 --> 00:04:59,666
你通过覆盖部分返回地址解决了这个问题
and you solved it with a partial return pointer overwrite 

82
00:04:59,700 --> 00:05:01,733
在这里也能这样做
and you can do the same thing here

83
00:05:01,933 --> 00:05:05,233
你可以只覆盖返回地址的最低几位
you can override just the lowest bits of the return address

84
00:05:05,366 --> 00:05:07,466
或者最低的两个字节
 or the lowest two bytes

85
00:05:07,566 --> 00:05:09,999
成功的几率是1/16
you have a 1 and 16 chance of surviving that

86
00:05:10,000 --> 00:05:12,333
当程序返回时
or the program does when it returns 

87
00:05:12,600 --> 00:05:15,666
你可以重写它指向某个有趣的地方
and you can override it to point somewhere interesting

88
00:05:15,666 --> 00:05:18,699
通常想做的是
often what you want to do

89
00:05:19,100 --> 00:05:23,900
覆盖返回地址让它跳回开头
is override it to loop the program back to the beginning

90
00:05:23,933 --> 00:05:25,966
也许稍微修改了进程环境
maybe with a slightly corrupted state

91
00:05:26,766 --> 00:05:27,566
这样
so that

92
00:05:28,500 --> 00:05:30,866
当它执行了某些行动
when it takes certain actions

93
00:05:34,266 --> 00:05:38,333
之后，进程状态会被修改的越来越多
later on it'll start corrupting more and more and more

94
00:05:40,500 --> 00:05:44,633
循环程序类似于babymem中的重复后门
looping a program is similar to the repeat backdoor in babymem

95
00:05:44,766 --> 00:05:48,999
当时你用它来获取软件信息
 that you used to retrieve information about the software

96
00:05:49,966 --> 00:05:53,166
只要你能让这个程序保持运行
as long as you can keep the program alive

97
00:05:53,600 --> 00:05:58,900
让它做你想做的事的几率就不为零
your chance that you can get it to do what you wanted to do stay non zero

98
00:05:59,333 --> 00:06:00,999
好的，循环程序的次数越多
alright the longer you can loop the program

99
00:06:01,166 --> 00:06:03,466
循环一遍又一遍
 loop it again loop it again

100
00:06:03,766 --> 00:06:06,966
一点一点地泄露信息
 try to leak information little by little

101
00:06:09,266 --> 00:06:10,599
你的胜算就越大
the better odds you are

102
00:06:13,933 --> 00:06:14,666
另一个
the other

103
00:06:14,666 --> 00:06:19,199
这是处理ASLR的一种方法
so that's one way of of kind of starting to deal with ASLR

104
00:06:21,066 --> 00:06:23,866
顺便说一下，如果你是从main返回
if by the way you are returning from main

105
00:06:23,900 --> 00:06:27,500
返回地址指向libc中的libc_start_main里
so the return address is into libc_start_main which is in libc

106
00:06:27,700 --> 00:06:29,400
覆盖部分返回地址
with a partial return point overwrite

107
00:06:29,400 --> 00:06:31,933
你也许能命中一个神奇gadget
you might be able to hit a magic gadget 

108
00:06:32,133 --> 00:06:36,299
它会帮你做你想做的事
that will do what you wanted to do for you

109
00:06:40,566 --> 00:06:42,966
另一种绕过ASLR的方法是
the other way of course to work around the ASLR is

110
00:06:43,100 --> 00:06:45,000
泄露地址空间
a disclosure address space

111
00:06:45,366 --> 00:06:46,133
或者说
or

112
00:06:46,133 --> 00:06:47,566
利用信息泄露漏洞
an information disclosure

113
00:06:47,700 --> 00:06:49,666
把地址泄露给你
that will leak out an address to you

114
00:06:49,800 --> 00:06:51,766
但这是非常看情况的
but that's very situational

115
00:06:52,133 --> 00:06:53,533
不是通用的
not as as general

116
00:06:53,533 --> 00:06:56,733
当然，方法一也不是那么通用
of course workround one isn't so general either

117
00:06:56,800 --> 00:07:05,600
方法1这种循环程序的想法也适用于有限栈控制
workaround 1 this idea of looping the program also works for a limited stack right

118
00:07:05,600 --> 00:07:07,700
另一个适用于有限栈控制的方法
the other thing that works for a limited stack right

119
00:07:07,800 --> 00:07:09,766
我们在上个视频中讨论过
that we talked about in the last video

120
00:07:09,933 --> 00:07:11,099
是栈pivot
is a stack pivot

121
00:07:11,100 --> 00:07:12,533
你只用一个gadget
you use your single gadget

122
00:07:12,533 --> 00:07:16,066
如果你只能找到一个gadget来旋转栈
if you only had to get one gadget to pivot the stack to

123
00:07:16,866 --> 00:07:19,533
例如交换RSP和RAX
for example exchange RSP and RAX

124
00:07:19,533 --> 00:07:24,299
并且RAX可能指向你有更多控制的输入缓冲区
and RAX might point to an input buffer that you control more of

125
00:07:24,800 --> 00:07:26,133
另一种方法是
another thing you could do

126
00:07:26,500 --> 00:07:29,966
不从头开始循环
is loop the program not quite to the beginning 

127
00:07:30,600 --> 00:07:34,200
而从read函数调用准备开始
but to the setup of the read function call

128
00:07:34,766 --> 00:07:35,699
但现在
but now

129
00:07:35,966 --> 00:07:38,666
因为你修改了某些进程状态
because you've corrupted some part of the state 

130
00:07:39,100 --> 00:07:41,766
让它读取的量更大
the amount that it reads is bigger

131
00:07:43,200 --> 00:07:46,466
然后你可以读取更大的ROP链
and then you can read in a larger ROP chain 

132
00:07:47,100 --> 00:07:49,866
然后实施你的攻击
and carry out your attack

133
00:07:51,366 --> 00:07:53,499
好吧，无论如何，ASLR是个问题
okay anyways ASLR is a problem

134
00:07:53,500 --> 00:07:57,033
这些小方法可以让你尝试绕过
there are these little ways that you can kind of still survive with it

135
00:07:57,233 --> 00:08:01,799
但实际上，这并不好用
 but realistically it is not good

136
00:08:02,900 --> 00:08:08,500
你可能需要某种程度上的内存泄露来绕过它
and you'll likely need a memory disclosure somehow to get by it

137
00:08:09,866 --> 00:08:11,599
下一个问题是栈金丝雀
next issue stack canaries

138
00:08:11,666 --> 00:08:14,699
这些对ROP来说是残酷的
these are brutal against ROP

139
00:08:14,700 --> 00:08:19,000
ROP需要覆盖返回地址
ROP requires a return pointer overwrite

140
00:08:20,266 --> 00:08:23,866
这通常会覆盖栈金丝雀
which often requires an overwriting of the stack canary

141
00:08:24,300 --> 00:08:26,600
你得想个办法绕过它
you'll need to figure out a way to bypass it

142
00:08:27,200 --> 00:08:29,333
和在babymem中的做法类似
similar to how you did in babymem

143
00:08:29,566 --> 00:08:31,866
是的，没有一劳永逸的办法（银弹）
right there's no silver bullet

144
00:08:32,133 --> 00:08:34,066
栈金丝雀非常有效
stack canaries are extremely effective

145
00:08:35,466 --> 00:08:37,133
记住这些
just keep those in mind

146
00:08:39,333 --> 00:08:43,433
还有一些有趣少见的学术解决方案
there are also interesting exotic academic solutions

147
00:08:43,666 --> 00:08:47,099
用于尝试防御ROP
 that have been attempted to solve ROP

148
00:08:47,900 --> 00:08:52,300
使ROP不那么强大
to make ROP less powerful

149
00:08:52,400 --> 00:08:55,633
这些解决方案有
these solutions range from

150
00:08:55,766 --> 00:08:58,299
去除ROP gadget
removing ROP gadgets

151
00:08:58,966 --> 00:09:01,866
确保函数中没有
so you know making sure that functions don't have

152
00:09:02,000 --> 00:09:06,933
pop RDI; RET之类的
pop RDI; RET

153
00:09:07,533 --> 00:09:09,199
但是那些真的很繁重
right but those are really onerous

154
00:09:09,900 --> 00:09:13,800
除了学术论文之外，我从未见过它们被实际应用
I've never seen them actually deployed outside of academic papers

155
00:09:13,800 --> 00:09:18,700
即使是学术论文也无法消除所有ROP gadget
and even the academic papers don't eliminate all ROP gadgets

156
00:09:18,766 --> 00:09:20,566
实际上你不需要那么多ROP gadget
and you don't actually need that many ROP gadgets

157
00:09:20,566 --> 00:09:22,333
来成功实施攻击
to carry out these successful attack

158
00:09:23,300 --> 00:09:28,500
可以尝试检测何时发生ROP攻击
you can try to detect when a ROP attack is happening

159
00:09:28,500 --> 00:09:30,866
你说，好吧，没关系，我们会被ROP攻击
you say okay that's fine we'll have a ROP attack

160
00:09:30,866 --> 00:09:32,866
但是当系统调用发生时
but when a syscall occurs 

161
00:09:33,300 --> 00:09:35,000
就检查一下栈
you'll go through the stack 

162
00:09:35,133 --> 00:09:38,733
看看它是什么样子
and see what what it looks like

163
00:09:38,733 --> 00:09:40,833
是否看起来像ROP攻击
if it looks like a ROP attack 

164
00:09:41,133 --> 00:09:42,999
或者你会记日志
or you will keep a log

165
00:09:43,800 --> 00:09:46,500
查看处理器指令日志
you look at the processor instruction log

166
00:09:46,500 --> 00:09:49,700
看看在最后一百条指令中执行了多少ret
 and see how many RETs were executed in the last hundred instructions

167
00:09:49,800 --> 00:09:51,600
你会说，这看起来像ROP
and you say okay this looks like ROP

168
00:09:51,700 --> 00:09:52,800
然后终止程序
and then kill the program

169
00:09:52,800 --> 00:09:56,100
这实际上在Windows中得到了应用
this is actually deployed in practice in Windows

170
00:09:56,100 --> 00:09:58,266
例如，Windows为保护自己免受ROP
for example Windows protects itself against ROP 

171
00:09:58,266 --> 00:10:00,599
使用了KBouncer技术
using this KBouncer technique

172
00:10:02,500 --> 00:10:05,633
它被应用了，但是可以绕过
it's used but it's bypassable right 

173
00:10:05,900 --> 00:10:09,700
如果你控制了足够的程序用来ROP
if you have enough controlled program to be comfortably ropping

174
00:10:09,900 --> 00:10:13,700
然后你就可以隐身了
then you can likely stealth yourself 

175
00:10:14,200 --> 00:10:15,866
你可以创建一个ROP链
you can create a ROP chain 

176
00:10:17,000 --> 00:10:19,333
并且掩盖它是ROP链的事实
that tries to hide the fact that it's a ROP chain

177
00:10:19,500 --> 00:10:22,466
比如，通过运行其他良性代码等等
by running other benign code etc etc

178
00:10:22,600 --> 00:10:23,500
对吧
right and

179
00:10:24,100 --> 00:10:30,000
最终使系统误以为ROP没有发生
in the end fools the system into thinking that ROP isn't happening

180
00:10:30,600 --> 00:10:34,500
还有一类学术解决方案叫做
and then there's this category of academic solutions called

181
00:10:34,566 --> 00:10:36,166
控制流完整性
control flow integrity

182
00:10:36,900 --> 00:10:39,866
控制流完整性是在十多年前提出的
control flow integrity was proposed over a decade ago now

183
00:10:40,400 --> 00:10:43,700
一群研究人员
by a bunch of researchers

184
00:10:43,700 --> 00:10:45,666
他们中的许多人仍然活跃在这个领域
many of whom are still active in the field

185
00:10:46,200 --> 00:10:48,700
在一篇名为《控制流完整性》的论文中
in a paper called Control Flow Integrity

186
00:10:48,800 --> 00:10:50,166
它的核心思想是
the core idea is that 

187
00:10:52,933 --> 00:10:55,566
对于任何间接跳转，任何返回
for any indirect jump any return 

188
00:10:57,500 --> 00:11:05,600
任何以寄存器作为参数的调用
any call that takes a register as an argument

189
00:11:05,600 --> 00:11:09,700
任何攻击者可以控制的间接跳跃
an indirect jump  something that an attacker could control

190
00:11:11,533 --> 00:11:13,299
我们输入一些代码
we put in some code 

191
00:11:13,466 --> 00:11:18,699
确保在运行时跳转的目标是预计的
to make sure that the target of that jump at run time is what it's supposed to be

192
00:11:18,766 --> 00:11:21,133
当然很难知道目标都是什么
of course you don't know the target

193
00:11:23,900 --> 00:11:28,200
在运行时很难知道所有目标应该是什么
it's hard to know at run time what all the targets are supposed to be

194
00:11:28,266 --> 00:11:29,599
代码非常复杂
code is very complex 

195
00:11:29,900 --> 00:11:31,133
但可以尽力而为
but you do your best

196
00:11:31,233 --> 00:11:35,533
这催生了一场技术军备竞赛
and this spawned a whole arms race of techniques that

197
00:11:35,600 --> 00:11:36,900
一方防御ROP
try to prevent ROP 

198
00:11:37,100 --> 00:11:41,533
一方绕过ROP防御
and techniques that try to bypass techniques that try to prevent ROP

199
00:11:42,566 --> 00:11:44,766
那是一段疯狂的时光
it was a wild time

200
00:11:44,766 --> 00:11:47,866
大概在2015 - 2016年左右
this is around 2015 2016

201
00:11:47,933 --> 00:11:50,766
那时每一篇学术论文的主题
it is every other academic paper coming out with about

202
00:11:51,066 --> 00:11:52,966
不是防止ROP
either preventing ROP 

203
00:11:53,533 --> 00:11:55,133
就是ROP防御绕过
or preventing the prevention of ROP

204
00:11:55,266 --> 00:11:57,333
太疯狂了，然后我们有了很多技巧
it was insane and we had tons of techniques

205
00:11:57,333 --> 00:11:59,999
我们有面向块的编程，这是可以的
we had block oriented programming and this is okay

206
00:12:00,000 --> 00:12:02,800
还可以进行ROP但是是以代码块为单位
we can ROP but on a block level

207
00:12:03,266 --> 00:12:06,499
非常高层的指令
like on a very high level of instructions

208
00:12:06,700 --> 00:12:11,000
有点像我们在一开始的介绍中的例子
kind of like what we did in our example intro in the beginning

209
00:12:11,200 --> 00:12:14,600
用程序的这些大块
say okay you take these huge chunks of the program

210
00:12:14,700 --> 00:12:18,500
通过精心设计状态和状态间的过渡
and by carefully crafting the state and transition between them 

211
00:12:18,766 --> 00:12:19,866
而不是用小gadget
instead of little gadgets

212
00:12:19,900 --> 00:12:23,900
我们可以用这些程序的大块来构建攻击
we can build our attack out of large parts of the program

213
00:12:24,066 --> 00:12:26,466
来绕过某些技术
 to bypass certain techniques

214
00:12:26,466 --> 00:12:26,899
事实上
in fact

215
00:12:26,900 --> 00:12:29,800
这些程序块甚至可以以
these large parts of the program could even start on 

216
00:12:30,100 --> 00:12:32,900
间接控制流转移的合法目标开始
valid targets for indirect control flow transfers

217
00:12:34,100 --> 00:12:35,666
还有面向跳转编程
there was jump oriented programming

218
00:12:35,666 --> 00:12:37,799
只是不再用RET了
says we just don't use returns right

219
00:12:37,800 --> 00:12:39,333
我们使用跳转指令代替RET
we use indirect jumps instead

220
00:12:39,333 --> 00:12:42,399
这样能绕过KBounce或RoPecker之类的东西
this bypass of stuff like KBounce or RoPecker and so forth

221
00:12:42,466 --> 00:12:44,399
这些系统层面
these sort of system level

222
00:12:44,400 --> 00:12:47,800
允许ROP，但会检测对系统调用的调用
let people ROP but then detect when they try to make syscalls

223
00:12:48,800 --> 00:12:50,966
还有面向call编程、面向sigreturn编程等
there's call oriented program sigreturn

224
00:12:50,966 --> 00:12:58,099
出现了各种疯狂的ROP变体
all sorts of you know crazy ROP variants that have come up

225
00:12:58,266 --> 00:12:59,666
面向数据编程, 很酷
data oriented program is kind of cool

226
00:12:59,666 --> 00:13:00,199
它表示
it says alright

227
00:13:00,200 --> 00:13:02,566
不劫持控制流
instead of hijacking any control flow at all

228
00:13:02,933 --> 00:13:06,266
我们来修改程序数据吧
let's just carefully corrupt the program's data

229
00:13:07,100 --> 00:13:11,300
这样我们就可以控制程序了
so that we can pop it the program

230
00:13:11,400 --> 00:13:13,933
当然，这取决于程序是做什么的
of course this depends on what the program does and

231
00:13:13,933 --> 00:13:15,066
不管你能不能做到
whether you can do that or not

232
00:13:15,066 --> 00:13:16,999
但是你可以想象
but you can imagine that

233
00:13:17,366 --> 00:13:19,366
如果你攻击的程序是
if the program you're attacking is

234
00:13:19,900 --> 00:13:22,466
Bash或 /bin/sh
bash or bin you know /bin/sh

235
00:13:22,533 --> 00:13:24,199
通过修改它的数据
then by corrupting its data

236
00:13:24,200 --> 00:13:27,100
你可以让它做任何你想做的事
you can get it to do anything you want on your behalf

237
00:13:28,000 --> 00:13:29,733
因为它是一个命令处理器
because it is a command processor

238
00:13:29,733 --> 00:13:32,133
处理数据，执行命令
process that data and that execute that commands

239
00:13:32,333 --> 00:13:38,499
好了，控制流完整性最近变成了现实
all right control flow integrity was recently made an actual reality

240
00:13:38,566 --> 00:13:42,766
到目前为止，所有这些学术技术
up until now all of these academic techniques

241
00:13:42,899 --> 00:13:44,699
支持控制流完整性的
for control flow integrity

242
00:13:44,766 --> 00:13:46,066
反对控制流完整性的
 against control flow integrity 

243
00:13:46,200 --> 00:13:49,300
大部分都没有真正被使用
for the most part were not really used

244
00:13:49,333 --> 00:13:51,499
有时它们会被部署在Windows系统中
sometimes they'd be deployed in Windows

245
00:13:51,500 --> 00:13:53,266
但是还能绕的过
but by passable and so forth

246
00:13:55,366 --> 00:13:58,966
最近，我是说非常近，2020年9月
recently and I mean very recently September 2020

247
00:13:59,100 --> 00:14:02,300
英特尔发布了一系列新的处理器
Intel released a series of new processors

248
00:14:02,666 --> 00:14:06,799
支持CET即控制流强制技术
that has CET Control flow Enforcement Technology

249
00:14:07,566 --> 00:14:08,699
这是什么意思?
what does this mean

250
00:14:09,133 --> 00:14:12,366
用我们熟悉的话讲
it means in terms of relevance for us

251
00:14:12,533 --> 00:14:15,933
CET增加了endbr64指令
CET adds the endbr64 instruction

252
00:14:15,933 --> 00:14:19,399
这可能看起来很熟悉
this likely sounds familiar to you 

253
00:14:22,566 --> 00:14:28,399
如果你objdump过最近编译的二进制文件
if you objdump any recently compiled binary

254
00:14:28,466 --> 00:14:30,199
比如？？？
for example on the boons 2004

255
00:14:30,500 --> 00:14:36,000
在每个函数的开头都有这个endbr指令
at the beginning of every function is this endbr instruction

256
00:14:36,200 --> 00:14:39,100
endbr告诉处理器
endbr tells the processor

257
00:14:39,200 --> 00:14:42,566
任何启用了CET的处理器
any processor enabled that has CET enabled

258
00:14:42,733 --> 00:14:44,199
告诉处理器嘿
tells that processor hey

259
00:14:44,700 --> 00:14:47,900
这是间接控制流切换的合法目标
this is a valid target of an Indirect control flow transfer

260
00:14:48,300 --> 00:14:51,200
处理器确保当Ret时
and the processor make sure that when you do a Ret

261
00:14:51,800 --> 00:14:54,266
你执行的下一条指令是endbr
the next instruction you execute is endbr

262
00:14:54,266 --> 00:14:55,766
否则它将终止程序
otherwise it kills the program

263
00:14:57,900 --> 00:15:01,500
没启用CET的处理器就什么也不做
processors without CET those instructions simply do nothing

264
00:15:03,066 --> 00:15:04,599
就和nop一样
they're literally a nop

265
00:15:06,666 --> 00:15:07,766
所以
and so

266
00:15:08,700 --> 00:15:12,700
这会让ROP更难实现
what this does is make ROP a lot harder

267
00:15:12,766 --> 00:15:13,933
你不能再
you can no longer

268
00:15:14,900 --> 00:15:17,600
一旦这些处理器被广泛采用
you know as soon as these processors become widely adopted

269
00:15:17,600 --> 00:15:20,200
你再也不能把这些gadget连在一起了
you'll no longer be able to chain these little gadgets together

270
00:15:20,366 --> 00:15:22,166
你必须串联各个函数
you'll really have to chain whole functions

271
00:15:22,166 --> 00:15:23,566
或者函数的片段了
or pieces of functions

272
00:15:23,600 --> 00:15:27,300
它们是这些控制流切换的合法目标
that are valid targets for these control flow transfers

273
00:15:27,700 --> 00:15:28,966
这将会很棘手
it's gonna be tricky

274
00:15:29,066 --> 00:15:30,966
它不能彻底防止ROP
it won't block ROP

275
00:15:30,966 --> 00:15:32,366
仍然有一些高级技术可以使用
there's still advanced techniques

276
00:15:32,366 --> 00:15:34,999
比如面向块的编程，这还是可行的
like block oriented programming that will be viable

277
00:15:35,700 --> 00:15:39,866
但这会使他们的开发变得更加复杂
but it'll complicate their exploitation quite a lot

278
00:15:41,000 --> 00:15:41,566
事实上
in fact

279
00:15:41,566 --> 00:15:45,499
可能这几年需要完全重做这个模块
I'll probably have to completely redo this module within a couple years 

280
00:15:45,733 --> 00:15:50,399
随着这些处理器的普及
as these processors become common place

281
00:15:50,400 --> 00:15:51,866
或者至少增加模块内容
or at least augment the module

282
00:15:51,866 --> 00:15:53,366
这将是非常有趣的
it'll be very interesting to see

283
00:15:54,133 --> 00:15:54,933
好吧
all right

284
00:15:55,466 --> 00:15:56,999
最后的终极挑战
the final ultimate challenge

285
00:15:57,000 --> 00:15:58,266
如果你什么都没有怎么办
what if you don't have anything

286
00:15:58,466 --> 00:15:59,566
你不知道东西在哪里
you don't know where things are

287
00:15:59,566 --> 00:16:00,699
ASLR开启了
ASLR is on 

288
00:16:00,866 --> 00:16:06,199
你甚至不知道你正在利用的是什么程序
but you also don't even know what the program is that you are exploiting right

289
00:16:06,700 --> 00:16:09,933
事实证明，你能做到盲打
turns out you can hack completely blind

290
00:16:09,933 --> 00:16:13,166
而且你们已经做过了
and you have done much of this right

291
00:16:13,200 --> 00:16:16,900
就像你做babymem题时熟悉的
the intuition as you well know from babymem

292
00:16:17,066 --> 00:16:19,899
只有在程序开始时才随机化
that things are only randomized at program start

293
00:16:19,900 --> 00:16:21,066
在内存错误模块
in the memory error module

294
00:16:21,066 --> 00:16:22,266
在最后一关
in the final level

295
00:16:22,300 --> 00:16:25,900
你一点一点地破解了程序
you broke a program piece by piece

296
00:16:25,966 --> 00:16:28,799
因为它每次处理请求都会fork子进程
because it kept forking at every request

297
00:16:28,933 --> 00:16:30,666
这样程序会启动
so the program would start up

298
00:16:30,766 --> 00:16:33,199
会fork一个请求处理进程
it would fork off a request handler

299
00:16:33,733 --> 00:16:34,933
你将和它互动
and you would interact with it

300
00:16:34,933 --> 00:16:36,733
然后你溢出金丝雀
you would overflow the canary 

301
00:16:36,833 --> 00:16:41,233
你用1溢出金丝雀，程序崩溃
and you would overflow it with one and it crash

302
00:16:41,733 --> 00:16:43,299
你用2溢出它，程序崩溃
 you overflowed it with two and it would crash

303
00:16:43,300 --> 00:16:45,700
最终你会得到正确的第一个字节
eventually you would get that first byte correct

304
00:16:45,700 --> 00:16:47,933
程序不会崩溃，然后你开始暴破第二个字节
it won't crash and then you go onto the second byte

305
00:16:47,933 --> 00:16:49,699
你可以暴力破解出金丝雀值
you can brute force the canary

306
00:16:50,566 --> 00:16:54,533
返回地址甚至整个栈
the return address and the entire stack

307
00:16:54,633 --> 00:16:59,399
一个字节一个字节地泄漏出所有控制流的相关信息
 byte by byte to leak out all control flow relevant information

308
00:17:01,666 --> 00:17:03,833
你在babymem中做过
you did that in babymem 

309
00:17:03,966 --> 00:17:07,799
在babyrev的最后一关，如果你还记得
and then in babyrev if you remember the last level 

310
00:17:07,866 --> 00:17:12,666
你对一个随机的Yan85指令集进行了盲攻击
you did a blind attack against a randomized Yan85 instruction set

311
00:17:12,900 --> 00:17:15,200
你不了解这些指令
that you didn't have the mapping for

312
00:17:15,733 --> 00:17:18,299
你通过发送一些输入来实现
and you did that by sending some input

313
00:17:18,333 --> 00:17:20,166
等待一个响应信号
and waiting for a survival signal

314
00:17:20,800 --> 00:17:22,366
解读这个信号，然后说好
interpreting that signal and saying okay

315
00:17:22,366 --> 00:17:25,799
我发出的一定是即时指令
what I sent must have been an immediate instruction

316
00:17:25,933 --> 00:17:30,499
你可以在这个奇怪的ROP机器上做同样的事情
you can do the same thing on this weird machine of ROP

317
00:17:30,700 --> 00:17:34,600
所以一旦你一个字节一个字节地泄露出ASLR
 right so once you byte by byte leak out ASLR

318
00:17:35,466 --> 00:17:37,599
或者栈金丝雀值，任何你需要的
or the stack canaries everything that you need

319
00:17:37,766 --> 00:17:38,933
然后你就可以开始
then you can start

320
00:17:39,400 --> 00:17:44,800
尝试对奇怪机进行分析
doing this crazy weird machine introspection of blindly leaking out

321
00:17:45,666 --> 00:17:49,299
使用泄露Yan85的相同方法
in the same way that you leaked out Yan85

322
00:17:53,733 --> 00:17:57,166
一种理解程序各部分功能的方法
a way to understand what part of the program do what

323
00:17:57,533 --> 00:18:00,366
你要做的是找到一个合适的系统调用
all you really need to do is find a right system call

324
00:18:00,666 --> 00:18:02,566
或者一些合适的函数
or some right functionality

325
00:18:02,666 --> 00:18:04,899
他们能让你泄露出程序
that will then let you leak out the program

326
00:18:05,533 --> 00:18:06,799
然后让你们解出来
and then let you solve it

327
00:18:07,966 --> 00:18:10,666
这种技术被称为盲ROP
this technique is called Blind ROP

328
00:18:10,666 --> 00:18:15,399
它于2014年由Andrea Bittau提出
it was published by Andrea Bittau in 2014

329
00:18:16,166 --> 00:18:18,166
不幸的是安德烈
unfortunately Andrea

330
00:18:19,266 --> 00:18:20,399
在过去的几年里
in the last couple of years

331
00:18:20,400 --> 00:18:22,066
死于一场摩托车事故
died in a motorcycle accident

332
00:18:22,300 --> 00:18:27,300
但他创造的技术是不可思议的
but the technique that he created was incredible and

333
00:18:29,200 --> 00:18:31,300
他的演讲很精彩
the talk was amazing

334
00:18:31,300 --> 00:18:33,866
我不确定是否有记录
I'm not sure if it's recorded somewhere

335
00:18:34,200 --> 00:18:35,600
但真的很酷
but it was really cool

336
00:18:35,600 --> 00:18:46,000
他在台上运行的是最新版本打好补丁的Apache
he on stage you know ran a fully patched up to date version of Apache

337
00:18:46,200 --> 00:18:48,300
或者Nginx，我不记得具体是什么web服务器了
or Nginx I don't remember some web server

338
00:18:49,200 --> 00:18:53,300
除了一个控制流的漏洞
except for with one vulnerability which with a control flow

339
00:18:55,000 --> 00:18:59,600
一个允许劫持控制流的栈溢出漏洞
a stack overflow that allowed control flow hijacking

340
00:18:59,900 --> 00:19:04,766
然后他使用盲ROP泄漏出了不光是ASLR
and then he used blind ROP to leak out not just ASLR

341
00:19:05,533 --> 00:19:07,866
还有金丝雀，还有整个二进制程序
and the canary but also the whole binary

342
00:19:07,866 --> 00:19:08,766
然后利用它
and then exploited it

343
00:19:08,766 --> 00:19:10,099
这是非常酷的
it was very cool to see

344
00:19:10,666 --> 00:19:11,999
非常酷的演讲
a very cool presentation

345
00:19:12,533 --> 00:19:13,333
嗯
um

346
00:19:13,900 --> 00:19:15,800
好了，这些是一些复杂的问题
alright so those are some complications

347
00:19:15,800 --> 00:19:19,400
可以说是可能遇到的非常困难的问题
like very difficult complications you might run into um

348
00:19:19,500 --> 00:19:23,166
在你的ROP探险过程中
when you are on your roping adventures

349
00:19:23,366 --> 00:19:23,999
希望
 hopefully 

350
00:19:24,133 --> 00:19:28,699
这让你具备了对付他们的能力。祝你好运
this has equipped you to deal with them good luck

