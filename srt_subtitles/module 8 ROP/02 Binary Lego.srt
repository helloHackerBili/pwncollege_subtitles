1
00:00:00,733 --> 00:00:01,933
你好黑客
hello hackers

2
00:00:02,200 --> 00:00:07,600
欢迎来到PWN学院面向返回编程模块的第2个视频
welcome to video 2 of the return oriented programming module of pwn college

3
00:00:08,200 --> 00:00:12,500
标题很奇怪，叫二进制乐高
strangely enough called binary Lego

4
00:00:14,000 --> 00:00:15,266
乐高是什么?
what is Lego

5
00:00:15,500 --> 00:00:20,900
是的，我说的是乐高，就是你用来搭东西的塑料积木
yes I am talking about Lego the plastic blocks with which you build stuff

6
00:00:21,400 --> 00:00:24,800
因为它是面向返回编程的完美比喻
because it is a perfect analogy for return oriented programming

7
00:00:26,600 --> 00:00:30,600
当你拿到一组乐高积木
when you acquire Lego set

8
00:00:31,200 --> 00:00:35,100
它附带了一堆积木和一本说明书
it comes with a bunch of blocks an instruction booklet

9
00:00:38,333 --> 00:00:42,166
按照说明书上的指令操作
by following the instruction booklets instructions

10
00:00:42,800 --> 00:00:46,600
并以特定的方式将积木组合在一起
and putting blocks together in a specific way

11
00:00:46,800 --> 00:00:51,700
你能创造一个东西，比如乐高汽车
you create a Lego structure like a car

12
00:00:52,533 --> 00:00:53,933
然后呢
now what happens

13
00:00:54,000 --> 00:00:56,900
如果你离开房间
if you leave the room

14
00:00:57,533 --> 00:01:06,966
你的室友、兄弟姐妹或者对手跑了进来
and your roommate sibling adversary runs in

15
00:01:07,000 --> 00:01:10,600
在你的乐高说明书上乱改一通
 and scribbles all over your Lego instruction booklet

16
00:01:11,100 --> 00:01:12,200
你回来了
you come back

17
00:01:12,500 --> 00:01:13,666
你没有注意到
you don't notice

18
00:01:14,100 --> 00:01:15,600
你继续建造
and you keep building

19
00:01:15,700 --> 00:01:20,100
如果你遵循一个恶意制作的乐高说明书
if you follow a maliciously crafted lego instruction booklet

20
00:01:20,133 --> 00:01:21,899
用同样的乐高积木
with the same Lego pieces

21
00:01:22,866 --> 00:01:25,333
你会建造一些完全不同的东西
you could build something completely different

22
00:01:25,400 --> 00:01:27,966
一些和你想的完全不同的东西
something that will blow up your plans

23
00:01:29,500 --> 00:01:32,800
因为它们是专门恶意制作
because they're specifically maliciously crafted 

24
00:01:33,100 --> 00:01:35,966
来实现一个不同于原来乐高指令的目标
to achieve a different goal than the original lego instructions

25
00:01:36,400 --> 00:01:39,066
这是面向返回的编程的比喻
this is the analogy of return oriented programming

26
00:01:39,000 --> 00:01:45,300
在这个比喻中，积木块是二进制文件text段中的字节
in this analogy the blocks are bytes in the text section of your binary

27
00:01:46,266 --> 00:01:47,899
也就是可执行数据
executable data

28
00:01:49,266 --> 00:01:50,666
说明书是
the instruction book that is the 

29
00:01:50,866 --> 00:01:56,899
存储着可被溢出覆盖的函数返回地址的栈
stack with its stored return addresses that can be overwritten by a stack based overflow

30
00:01:57,400 --> 00:02:05,800
遵照指示努力的结果
and the result of the effort of following the instructions

31
00:02:06,133 --> 00:02:08,599
是程序采取的行动
are the actions taken by the program

32
00:02:08,900 --> 00:02:12,700
通过覆盖返回地址，额，覆盖栈，额
and by overwriting the return address umm overwriting the stack

33
00:02:12,700 --> 00:02:14,200
覆盖存储的返回地址
overwriting store to return addresses

34
00:02:14,300 --> 00:02:16,566
攻击者可以强制CPU
the attacker can force the CPU

35
00:02:17,766 --> 00:02:19,866
用这些积木
to take those blocks

36
00:02:19,866 --> 00:02:22,599
text段中的原始字节
the raw bytes in the text segment

37
00:02:22,600 --> 00:02:25,200
把它们构建成不同的东西
and build them into something different

38
00:02:25,200 --> 00:02:28,500
一些本没打算构建的东西
something that wasn't intended to be built by the program

39
00:02:29,066 --> 00:02:33,099
好，让我们看一下这个类比对应的源代码
all right let's take a look at a conceptual analogy on source code 

40
00:02:33,266 --> 00:02:34,499
然后会深入研究
and then I'll actually dive in

41
00:02:34,500 --> 00:02:38,300
并在二进制级别上进行这种攻击
and do this exact attack that I'm talking about on binary level

42
00:02:39,800 --> 00:02:44,900
这是一个要求你输入名字的程序，仅此而已
here's a program that asks for your name and that's it

43
00:02:45,300 --> 00:02:49,800
它还碰巧在二进制文件中有打开flag文件的代码
it also happens to have code in the binary that will open the flag file

44
00:02:50,333 --> 00:02:51,366
但没有读写flag
do nothing with it

45
00:02:51,500 --> 00:02:57,200
它还有代码是打开其它文件
it also has code in the binary that will open something that is not the flag file

46
00:02:57,700 --> 00:03:00,766
然后输出文件内容
and send you the output

47
00:03:00,766 --> 00:03:05,133
这些都不能让你得到flag
right none of this quite gets you the flag

48
00:03:05,800 --> 00:03:07,900
但这里也存在一些问题
but there are problems here

49
00:03:07,900 --> 00:03:09,733
最明显的是缓冲区溢出
the obvious one is a buffer overflow

50
00:03:09,700 --> 00:03:13,000
可以用它覆盖返回地址
with which you can overwrite the return address

51
00:03:14,166 --> 00:03:16,699
你不仅可以覆盖返回地址
and you can overwrite not just the return address 

52
00:03:16,700 --> 00:03:22,200
还可以覆盖返回地址之后的数据
but the data address after that return address

53
00:03:22,200 --> 00:03:26,500
通常，该数据可能包含libc_start_main的栈局部变量（被调是main）
normally that data might contain stack local variables of libc_start_main

54
00:03:26,600 --> 00:03:27,766
或者其它情况（不同c运行环境等）的主调函数
or what have you

55
00:03:28,133 --> 00:03:30,799
但这不是必须的
right but it doesn't have to

56
00:03:31,400 --> 00:03:35,600
一旦你溢出覆盖了它，栈就不记得之前它是什么了
the stack has no memory of what it used to be once you overflow it

57
00:03:36,733 --> 00:03:39,499
一旦溢出并触发第一次返回
once you overflow it and trigger that 1st return

58
00:03:39,933 --> 00:03:43,199
程序将按照您的指示继续运行
your program continues according to your instructions

59
00:03:43,200 --> 00:03:45,266
你已经重写了乐高手册
you have overwritten the Lego manual

60
00:03:47,100 --> 00:03:51,400
手册不再记得在一个特定的步骤中涉及多少个部件
the manual no longer remembers how many pieces are involved in one specific step

61
00:03:51,933 --> 00:03:55,266
原来返回地址指向哪里已经无所谓了
where the return addresses used to be is irrelevant

62
00:03:55,466 --> 00:03:58,366
重要的是现在栈上有什么
what's relevant is what is on the stack and 

63
00:03:58,566 --> 00:04:00,666
这将告诉CPU要做什么
what that is telling the CPU to do

64
00:04:00,800 --> 00:04:06,700
我们先看幻灯片上的这个然后再看一个实际的例子
so let's take a look at this 1st on the slide and then in an actual example

65
00:04:07,600 --> 00:04:13,500
在幻灯片上我们用a覆盖了16字节的name
on the slide we override you know the name 16 bytes with a

66
00:04:13,866 --> 00:04:16,333
然后是这个返回地址
and then we have this return address

67
00:04:18,100 --> 00:04:21,000
我们用第6行的地址重写它
and we override it with line 6

68
00:04:21,466 --> 00:04:23,033
所以当main返回时
right and so when main returns

69
00:04:23,266 --> 00:04:29,333
它将返回到打开flag文件的这一行，然后返回
it will return into this line that opens the flag file and then returns

70
00:04:30,100 --> 00:04:33,700
当它返回时，它将跳转到第10行
and when this returns it will jump into line 10

71
00:04:34,900 --> 00:04:37,766
这将发送一个文件
that will send a file

72
00:04:38,300 --> 00:04:44,400
某个文件描述符，到标准输出
some file descriptor into a standard out

73
00:04:45,100 --> 00:04:48,700
从文件中的位置0到位置1024
from location 0 to location 1024 in that file

74
00:04:48,700 --> 00:04:52,300
我们的标准打开发送文件shellcode
 our standard open send file shellcode

75
00:04:52,300 --> 00:04:54,366
通过精心制作返回地址
by crafting return addresses carefully

76
00:04:54,500 --> 00:04:59,800
我们成功执行了打开发送文件shellcode
we've managed to essentially execute what is the open send file shellcode

77
00:05:00,733 --> 00:05:02,366
通过ROP
 using return oriented programming

78
00:05:02,366 --> 00:05:04,366
我们来实际做一下，看一下
so let's actually do it let's take a look

79
00:05:05,000 --> 00:05:08,633
我创建了rop-example.c
I actually created rop-example.c

80
00:05:08,900 --> 00:05:10,733
这里很神奇
 here it is amazing

81
00:05:11,000 --> 00:05:12,466
让我们来编译它
let's compile it

82
00:05:13,900 --> 00:05:16,366
实际上我已经写了这个命令
I already in fact wrote the command

83
00:05:19,066 --> 00:05:21,699
你会立刻注意到的两件事
2 things that you will immediately notice

84
00:05:21,766 --> 00:05:24,099
我们必须禁用栈金丝雀
we have to disable stack canaries

85
00:05:24,733 --> 00:05:28,066
这样我们在溢出的情况下不会被强制退出
so that we can survive the overflow here

86
00:05:28,100 --> 00:05:36,100
我们必须禁用地址空间布局随机化，只针对二进制本身
and we have to disable address space layout randomization just for the binary itself

87
00:05:37,100 --> 00:05:43,000
这对这个简单的例子来说也是很重要的
that's also an important piece for this simple example right

88
00:05:44,000 --> 00:05:48,066
但是在这个模块的习题中
but in your in the practice problems for the module 

89
00:05:48,133 --> 00:05:51,599
有些题目是不禁用的
you will have examples where that is not disable

90
00:05:51,600 --> 00:05:53,066
好了，我们编译
alright so we compile this

91
00:05:53,766 --> 00:05:54,766
运行它
and we run it

92
00:05:55,000 --> 00:06:00,200
当然，它不打印任何东西，它只是接收名字
and of course it doesn't print anything it just takes the name

93
00:06:00,200 --> 00:06:02,733
如果我们给它超过16个字节，它就会出现段错误
if we give it more than 16 bytes it'll SEG fault

94
00:06:03,700 --> 00:06:08,200
如果我们GDB并运行
if we gdb and run

95
00:06:08,666 --> 00:06:11,199
然后给它超过16个字节
and then give it more than 16 bytes

96
00:06:11,466 --> 00:06:14,566
它会在返回时出现段错误
it'll SEG fault on the ret

97
00:06:15,066 --> 00:06:18,166
你可以看到它已经溢出了
and you can see that that is overflowed

98
00:06:18,266 --> 00:06:19,466
这说得通，然后
that makes sense and then

99
00:06:20,166 --> 00:06:22,166
下一个数据字节也被溢出
the next data bytes are also overflowed

100
00:06:22,166 --> 00:06:24,266
我输入了相当多
I gave it quite a lot right

101
00:06:24,266 --> 00:06:25,066
好吧
alright

102
00:06:26,700 --> 00:06:27,700
让我们开始ROP
let's ROP

103
00:06:28,800 --> 00:06:29,600
所以
so

104
00:06:29,800 --> 00:06:30,600
首先
1st

105
00:06:30,666 --> 00:06:31,466
让我们
let's

106
00:06:32,600 --> 00:06:35,900
反汇编 rop_example
disassemble the ROP example

107
00:06:36,666 --> 00:06:38,499
有几件事
and there's a couple of things

108
00:06:39,100 --> 00:06:40,266
是我们感兴趣的
that we are interested in

109
00:06:40,266 --> 00:06:42,966
第一，这是main
1st here's main

110
00:06:43,133 --> 00:06:44,399
这是read
 here's the read

111
00:06:46,000 --> 00:06:49,333
我们可以看到栈帧的大小是16字节
we can see that the stack frame is 16 bytes in size

112
00:06:49,800 --> 00:06:58,500
然后是保存的RBP，保存的基指针
 and then there is the saved RBP the saved base pointer

113
00:07:01,700 --> 00:07:03,266
然后是保存的返回地址
and then the saved return address

114
00:07:03,200 --> 00:07:08,200
对于溢出，我们需要发送16个填充字节
so for the overflow we need to send 16 padding bytes whatever is

115
00:07:08,666 --> 00:07:13,466
然后还有8个字节放入保存在栈上的RBP
then 8 more to that'll get put into RBP

116
00:07:13,533 --> 00:07:16,099
接下来的8个字节是返回地址
and then the next 8 is gonna be the return address

117
00:07:16,100 --> 00:07:23,000
很好，我们对这个程序有两件事很感兴趣
cool and then there are the 2 things that we were interested in in the program

118
00:07:23,200 --> 00:07:24,566
一个在函数foo中
 one is in function foo

119
00:07:24,933 --> 00:07:28,733
在函数foo中，它将加载一些东西到RDI中
and in function foo it will load something into RDI

120
00:07:28,733 --> 00:07:31,566
我们当然知道这是/flag
of course we know so that this is slash flag

121
00:07:32,000 --> 00:07:33,333
然后，对了
then it will alright

122
00:07:33,333 --> 00:07:36,299
在那之前，它会将RSI归零
before that it'll zero out RSI

123
00:07:36,300 --> 00:07:38,933
这是打开它的模式
that's the mode to open it with 

124
00:07:39,200 --> 00:07:40,433
0是只读
0 is read only 

125
00:07:40,633 --> 00:07:43,266
这很好，然后它就会调用open
that's great  and then it'll call open 

126
00:07:43,300 --> 00:07:44,666
然后返回
and then it'll return

127
00:07:45,066 --> 00:07:49,699
当然，open会将文件描述符放入RAX中
of course open puts the file descriptor into RAX

128
00:07:49,700 --> 00:07:51,866
现在我们在RAX中有了目标文件描述符
so now we have the file descriptor in RAX

129
00:07:52,133 --> 00:07:54,399
我们弹栈
we pop something off the stack

130
00:07:54,400 --> 00:07:57,766
所以我们发送中的这部分会被重新填到rbp中
so you just send something to be popped again into RBP

131
00:07:57,966 --> 00:07:59,066
然后返回
and we return

132
00:07:59,900 --> 00:08:04,666
当然，我们想跳到bar函数
all right of course we want to then return to bar

133
00:08:05,000 --> 00:08:08,700
在那里sendfile被调用
where we have our sendfile call

134
00:08:09,133 --> 00:08:12,299
如果我们在sendfile调用处往上看
and if we go back upwards from the sendfile call

135
00:08:13,166 --> 00:08:15,933
我们可以看到sendfile
we can see that send file

136
00:08:16,600 --> 00:08:18,500
第一个参数被设置为1
the 1st argument is set to one

137
00:08:18,500 --> 00:08:21,600
它会发送到标准输出
it's going to send to standard output

138
00:08:21,666 --> 00:08:22,933
第二个参数
the 2nd argument

139
00:08:23,566 --> 00:08:26,699
我们非常幸运，它被设置为EAX
we've got very lucky is set to EAX

140
00:08:27,333 --> 00:08:30,266
RAX的低32位
the lower 32 bits of RAX

141
00:08:30,466 --> 00:08:33,499
foo把文件描述符放在那里
which is where foo put the file descriptor

142
00:08:33,733 --> 00:08:37,099
它是完美的，然后第三个参数是0
it's perfect and then 3rd argument is 0 

143
00:08:37,233 --> 00:08:41,533
第四个参数是十六进制400，也就是1024
4th argument is hex 400 that is 10 24

144
00:08:41,733 --> 00:08:43,466
所以基本上如果你跳到这里
so basically if you jump here

145
00:08:43,500 --> 00:08:46,200
我们将设置4个参数来发送文件，然后调用它
we'll set the 4 arguments to send file and then call it

146
00:08:48,100 --> 00:08:50,100
一个计划应运而生
a plan comes together

147
00:08:51,000 --> 00:08:56,500
让我们进入screen会话
so let's jump into a screen session

148
00:08:57,200 --> 00:09:02,100
因为我们将从pwntools运行GDB
because we'll run GDB from pwntools um

149
00:09:05,333 --> 00:09:06,133
所以
so

150
00:09:06,900 --> 00:09:08,900
让我们创建一个脚本
let's create a script

151
00:09:11,700 --> 00:09:13,600
不好意思
excuse me um

152
00:09:16,800 --> 00:09:18,300
启动rop-example
will be a launch rop example

153
00:09:19,866 --> 00:09:20,666
然后
and then

154
00:09:22,000 --> 00:09:25,000
然后我们会给它发送一
and then we're going to send it a

155
00:09:29,500 --> 00:09:30,466
一堆数据
a bunch of data

156
00:09:30,466 --> 00:09:33,699
首先我们要发送16个A
1st we're going to send our 16 A's

157
00:09:34,300 --> 00:09:35,200
这是name变量
that's our name

158
00:09:35,700 --> 00:09:37,466
然后我们要发送
then we're going to send

159
00:09:37,800 --> 00:09:40,466
好吧，我们在这里添加注释
so we can say okay let's let's add comments here

160
00:09:40,700 --> 00:09:44,500
这是我们要填充的name
this is our name that we will fill up

161
00:09:45,100 --> 00:09:53,100
然后重写保存的main的基指针
then we overwrite the saved base pointer of main

162
00:09:55,900 --> 00:10:01,300
好了，或者说在main的栈帧中
okay or in main in main's stack frame

163
00:10:01,500 --> 00:10:09,800
好了，现在我们覆盖保存的返回地址
alright then now we are overwriting the saved return address

164
00:10:09,900 --> 00:10:11,766
我们想用什么来覆盖它
what do we want to override it with

165
00:10:12,066 --> 00:10:13,933
我们想用
we want to override it with 

166
00:10:19,566 --> 00:10:22,366
bar中的这个地址重写它
this address  right here in bar

167
00:10:22,966 --> 00:10:25,899
我们要从main直接跳到这里
from main we want to immediately jump into here

168
00:10:26,133 --> 00:10:29,466
这是一个加载，哦，这里
this is a load oh into here

169
00:10:29,500 --> 00:10:32,000
这会将open的第二个参数设置为0
this sets the 2nd argument to 0 for open

170
00:10:32,000 --> 00:10:33,766
/flag作为第一个参数
the 1st argument to slash flag

171
00:10:34,200 --> 00:10:35,800
我们假设是/flag
um we're assuming that slash flag

172
00:10:35,800 --> 00:10:37,300
但是我们已经看到了源代码
but we've seen the source code

173
00:10:37,300 --> 00:10:38,933
它就是
um and it is

174
00:10:39,000 --> 00:10:40,366
所以我们想要跳到这里
so we want to jump here

175
00:10:41,066 --> 00:10:42,566
这很好
right so this is nice

176
00:10:43,166 --> 00:10:45,666
这里我们当然会
so here we will of course

177
00:10:48,900 --> 00:10:51,733
将其打包成8个字节
pack that into 8 bytes

178
00:10:51,733 --> 00:10:53,366
好的，现在呢?
okay now what

179
00:10:53,766 --> 00:10:56,966
现在我们跳过去
now we jump there oops

180
00:11:01,400 --> 00:11:04,133
我们跳过去，那很好
we'll jump there and that's great

181
00:11:05,266 --> 00:11:06,966
我们将开始执行
we will start executing

182
00:11:07,333 --> 00:11:08,999
最终我们会弹出栈顶数据填充到RBP
eventually we'll pop RBP

183
00:11:09,600 --> 00:11:14,300
所以我们在写的时候需要在栈上放一些东西
right so we need to put something on the stack as we're writing right

184
00:11:14,333 --> 00:11:17,966
这将会出现在RBP中
that will get popped into RBP so

185
00:11:19,700 --> 00:11:27,300
保存返回地址，我们让他指向foo中的open调用
save return address let's just put in to point to foo's open call

186
00:11:29,066 --> 00:11:30,566
当然还有调用前的设置
and setup of course

187
00:11:31,000 --> 00:11:36,300
现在这个会被Foo弹出
now this is going to get popped by Foo

188
00:11:36,866 --> 00:11:39,166
在返回之前注入RBP
into RBP before it returns

189
00:11:39,166 --> 00:11:40,333
我们就放一些垃圾
so we'll just put some garbage

190
00:11:40,333 --> 00:11:41,466
我们不关心这是什么
we don't care what this is

191
00:11:43,966 --> 00:11:44,766
好吧
okay

192
00:11:44,900 --> 00:11:46,900
现在呢?
now what now this

193
00:11:47,200 --> 00:11:50,166
这是foo返回的位置
this is where foo will return to

194
00:11:50,200 --> 00:11:54,500
那么你想从foo返回到哪里
so where do you want to return to from foo 

195
00:11:54,533 --> 00:11:57,899
当然，我们想回到这段漂亮的代码
of course we want to return to this beautiful piece of code

196
00:11:58,000 --> 00:12:03,000
这将设置sendfile调用并调用它
that will set up the sendfile call and call it

197
00:12:03,500 --> 00:12:05,066
我们想回到这里
we want to return to here

198
00:12:05,700 --> 00:12:06,933
所以我们想
so we want to do

199
00:12:07,300 --> 00:12:13,300
返回sendfile调用并在bar中设置
return to the sendfile call and set up in bar

200
00:12:14,300 --> 00:12:19,200
我们在这里打包
and we pack it here

201
00:12:21,200 --> 00:12:22,533
就好了
and we should be good

202
00:12:23,500 --> 00:12:25,200
然后我们调用p.readall
and then we p.readall

203
00:12:27,933 --> 00:12:28,733
打印出来
print it

204
00:12:30,800 --> 00:12:34,600
首发。启动有效载荷。得到flag
1st shot. rock payload. gets the flag

205
00:12:34,600 --> 00:12:36,700
让我们更深入地看看发生了什么
let's see what happens more in depth

206
00:12:36,933 --> 00:12:39,999
执行p.gdb.呃
let's do this p.gdb. uh

207
00:12:40,600 --> 00:12:44,133
pwn.gdb.attach (p)
pwn.gdb.attach(p)

208
00:12:44,966 --> 00:12:47,099
好的，让我们运行到main
okay let's run until main

209
00:12:51,066 --> 00:12:51,999
好了，开始吧
okay here we go

210
00:12:59,766 --> 00:13:01,999
为什么它已经从main返回了
why is it already returning from main

211
00:13:02,000 --> 00:13:03,800
为什么我们到main里这么多了
why are we so far into main

212
00:13:14,366 --> 00:13:15,866
好吧，有点奇怪
okay something went weird

213
00:13:15,866 --> 00:13:17,466
我们，我们开始吧
let's uh let's do this

214
00:13:18,666 --> 00:13:20,166
已经成功了
it all all already succeeded

215
00:13:20,166 --> 00:13:21,799
好吧，我们再来一次
alright let's do this again

216
00:13:25,100 --> 00:13:27,366
现在在read中
and here we are in read

217
00:13:27,466 --> 00:13:30,999
哦，有趣的是，它没有
oh interesting it did not

218
00:13:32,533 --> 00:13:33,799
pwntools做
pwntools did

219
00:13:33,900 --> 00:13:37,166
pwntools只在read时捕获程序
okay so pwntools only caught the program at the read

220
00:13:37,166 --> 00:13:39,333
没关系，没问题
that's fine not a problem

221
00:13:39,866 --> 00:13:41,066
这是有道理的
that actually makes sense

222
00:13:41,066 --> 00:13:42,966
因为它是在事后重新附加上的
because it reattached after the fact

223
00:13:43,500 --> 00:13:46,700
好了，我们完成了读取和溢出操作
okay so we did our read we did our overflow

224
00:13:47,733 --> 00:13:50,766
我们进入read
let's step step into the read

225
00:13:51,466 --> 00:13:54,166
让我们看看我们要回到哪里
let's see where we're about to return to

226
00:13:54,533 --> 00:13:55,466
等等
actually hold on

227
00:13:55,466 --> 00:13:56,099
很抱歉
sorry about this

228
00:13:56,100 --> 00:13:59,133
让我们重新开始，我想向你们展示我们溢出了
let's restart I want to show you that we overflowed

229
00:14:06,333 --> 00:14:07,799
我们成功溢出了
boom we overflowed

230
00:14:07,900 --> 00:14:12,133
看看栈上有什么
let's see what's on the stack

231
00:14:12,533 --> 00:14:13,666
一堆a
 a bunch of A's

232
00:14:14,300 --> 00:14:17,300
好了，我们离开这个
okay once we leave that

233
00:14:17,433 --> 00:14:20,466
回退到前一个栈帧
 restores the previous stack frame

234
00:14:20,933 --> 00:14:22,066
The The
the the the

235
00:14:22,466 --> 00:14:26,766
它将RBP赋值到RSP中以消除或释放
it moves RBP into RSP to eliminate to deallocate

236
00:14:27,000 --> 00:14:28,933
现有函数栈帧
the existing functions stack frame

237
00:14:28,933 --> 00:14:30,699
然后弹出保存的RBP值到rbp
and then it pops RBP

238
00:14:31,066 --> 00:14:33,866
来恢复上一个函数的基指针
to restore the base pointer the previous function

239
00:14:33,866 --> 00:14:35,399
当然我们重写了RBP
of course we overwrote RBP

240
00:14:36,566 --> 00:14:40,399
RBP现在全是B
RBP is now B all b's

241
00:14:40,800 --> 00:14:43,066
好，如果我们看看接下来是什么
 okay if we look at what is next

242
00:14:43,066 --> 00:14:44,799
是我们写的那个地址
it's that address we wrote

243
00:14:44,800 --> 00:14:46,533
这是foo中的地址
this is the address in foo

244
00:14:46,766 --> 00:14:48,533
如果我们继续 boom
if we step boom 

245
00:14:48,933 --> 00:14:51,099
我们正在foo中准备调用open
we are in foo setting up the open call

246
00:14:51,800 --> 00:14:53,166
我们开始设置好open调用
let's set up the open call

247
00:14:53,166 --> 00:14:56,666
好的，调用。open被调用
alright call. open has been called 

248
00:14:56,933 --> 00:14:59,599
Rax现在是3。第4个文件描述符
Rax is now 3. 3rd file descriptor

249
00:14:59,900 --> 00:15:04,666
我们将在foo栈帧释放中弹出RBP
and we're about to pop RBP and in foo's function cleanup

250
00:15:05,700 --> 00:15:07,966
rbp变成了全c
that's gonna go become all C's

251
00:15:09,766 --> 00:15:12,866
RBP的值无关紧要
RBP doesn't really matter what values are in there

252
00:15:12,866 --> 00:15:13,966
我们只是确认一下
we just need to make sure

253
00:15:13,966 --> 00:15:16,066
我们正确地设置了栈
that we are properly setting up the stack

254
00:15:16,200 --> 00:15:17,866
如果你把返回地址写在这里
if you had put our return I just wrote there

255
00:15:17,866 --> 00:15:18,899
它会被填充到rbp中
would have been popped into RBP

256
00:15:18,900 --> 00:15:21,000
然后程序会跳到一些垃圾中
and then the program would have returned to some garbage

257
00:15:21,200 --> 00:15:22,766
这样就不好了
so that would have been no good

258
00:15:22,866 --> 00:15:25,266
好吧
all right and um

259
00:15:28,300 --> 00:15:34,700
我们将来到利用的下一部分，也就是bar函数
we're about to return to the next part of our exploits  which is in bar

260
00:15:35,466 --> 00:15:37,233
boom，我们到了bar函数
boom here we are in bar 

261
00:15:37,466 --> 00:15:40,999
这是sendfile调用前的设置
and this is the setup of sendfile

262
00:15:42,466 --> 00:15:45,366
现在我们要调用sendfile
and we're now about to call send file

263
00:15:46,500 --> 00:15:47,766
和
and

264
00:15:51,300 --> 00:15:52,466
最终程序崩溃
eventually the program crashes

265
00:15:52,400 --> 00:15:54,900
因为我们之后没有费心去修复栈
because we didn't bother fixing up the stack afterwards

266
00:15:55,000 --> 00:15:59,633
但是我们获得了美丽的flag
but we have our beautiful flag

267
00:16:00,033 --> 00:16:05,599
这就是面向返回编程
 all right so that's return oriented programming

268
00:16:05,700 --> 00:16:11,100
简而言之，你看到我们通过劫持它的返回地址来控制程序
you saw we were controlling the program by hijacking its return address in a nutshell

269
00:16:12,466 --> 00:16:14,366
但真正的利用要复杂得多，对吧
but real exploits are more complicated right

270
00:16:14,366 --> 00:16:16,099
首先你溢出了栈
1st you overflow the stack

271
00:16:17,100 --> 00:16:19,266
这是我们将要进行的第0步
a step 0 that we're kind of going to go

272
00:16:19,266 --> 00:16:23,399
我们将过一遍ROP的步骤
kind of going to go through return oriented programming by induction

273
00:16:23,533 --> 00:16:25,866
溢出栈，我们做到了。然后
you overflow the stack we did that

274
00:16:26,500 --> 00:16:29,266
通过控制第一个返回地址
by controlling that 1st return address

275
00:16:29,266 --> 00:16:31,366
触发了所谓的gadget
you trigger what is called a gadget

276
00:16:31,700 --> 00:16:33,900
就是foo被触发的那部分
that part of foo that be triggered

277
00:16:33,900 --> 00:16:35,133
它打开了flag
that opened the flag

278
00:16:35,300 --> 00:16:36,133
它就是gadget
that was a gadget

279
00:16:36,133 --> 00:16:39,699
这是一个比你通常触发的更大的gadget
it's a much bigger gadget than you would normally trigger actually

280
00:16:39,700 --> 00:16:41,866
但它确实是个gadget
but it was a gadget right

281
00:16:42,600 --> 00:16:44,300
通常gadget都是超级小的
normally gadgets are super tiny

282
00:16:44,300 --> 00:16:45,933
你们稍后会讲到它们
you'll talk about them in a bit

283
00:16:45,933 --> 00:16:47,999
只有一条指令，然后返回
just one instruction and then a return

284
00:16:48,000 --> 00:16:49,800
但是当那个gadget返回时
but when that gadget returns

285
00:16:49,800 --> 00:16:52,333
我们还控制该gadget的返回地址
we also control the return address of that gadget

286
00:16:52,766 --> 00:16:54,833
这就是一般步骤
and that is the inductive step 

287
00:16:55,066 --> 00:16:59,133
我们可以通过组合这些gadget保持对程序的控制，就像刚刚做的那样
where we retain control by combining these gadgets like we did

288
00:16:59,133 --> 00:17:00,266
用两个gadget
with the 2 gadgets

289
00:17:00,366 --> 00:17:03,399
我们可以实现任意的动作
we can achieve arbitrary actions

290
00:17:04,200 --> 00:17:07,133
这就是链式rop gadget
and that's chain of rop gadgets

291
00:17:07,133 --> 00:17:08,699
我躲起来给你看
I hide myself to show you

292
00:17:08,700 --> 00:17:11,666
这叫做ropchain
that word is called a ropchain

293
00:17:12,133 --> 00:17:13,499
很酷，好吧
very cool all right

294
00:17:14,400 --> 00:17:15,833
最重要的是什么
what's the bottom line 

295
00:17:16,233 --> 00:17:17,399
最重要的是
the bottom line is that 

296
00:17:17,766 --> 00:17:22,933
这个ropchain基本上就是shellcode
your ropchain is basically shellcode

297
00:17:23,300 --> 00:17:25,366
当你创造了所有这些gadget，而你
when you create all of these gadgets and you

298
00:17:26,500 --> 00:17:29,700
我为这张幻灯片的样子道歉
I apologize for how this slide looks

299
00:17:29,733 --> 00:17:32,599
当你创造了这些gadget
but when you create all of these gadgets and

300
00:17:33,166 --> 00:17:34,466
把它们放在一起
put them all together

301
00:17:34,566 --> 00:17:37,466
您实际上是在创建shellcode
you're essentially creating shellcode

302
00:17:37,700 --> 00:17:41,500
但你能得到的指令很奇怪
but the instructions available to you are really weird

303
00:17:41,500 --> 00:17:42,566
我们使用了2条指令
we use 2 instructions

304
00:17:42,566 --> 00:17:44,799
其中一条指令打开flag文件
one of those instructions open the flag file

305
00:17:45,000 --> 00:17:46,566
或者叫元指令
or meta instructions right

306
00:17:47,066 --> 00:17:48,899
一个gadget打开flag文件
2 gadgets one gadget open the flag file

307
00:17:48,900 --> 00:17:50,700
另一个gadget执行sendfile
the other gadget did sendfile

308
00:17:52,300 --> 00:17:56,700
在黑客术语中，这被称为weird machine
in in hacker terms this is called a weird machine

309
00:17:57,400 --> 00:18:04,100
通过编排返回地址进行ROP
you are programming using return oriented program by writing return addresses 

310
00:18:04,200 --> 00:18:07,900
机器指令集无所谓
a machine whose instruction set makes no sense

311
00:18:08,300 --> 00:18:10,733
它是由元指令组成的
it's made up of meta instructions that are

312
00:18:10,900 --> 00:18:17,300
元指令是程序原本的部分
you know parts pieces of what the original program actually wanted to do

313
00:18:17,333 --> 00:18:19,466
我们要把它们拆开
and we're taking them apart

314
00:18:19,666 --> 00:18:21,599
把它们组合成别的东西
putting them together into something else

315
00:18:21,600 --> 00:18:24,300
就像你玩乐高积木一样
like you might do again with a Lego set

316
00:18:26,300 --> 00:18:33,000
实际上还有一个相关的概念叫做意外图灵完备性
there's actually a related concept called accidental Turing completeness

317
00:18:33,200 --> 00:18:34,666
如果你点击这个链接
if you check out this link

318
00:18:35,066 --> 00:18:36,266
或者百度相关概念
or Google for the concept 

319
00:18:36,500 --> 00:18:47,500
有很多很多东西都是图灵完备的
there are tons and tons of things that actually turned out to accidentally be Turing complete

320
00:18:47,533 --> 00:18:51,066
《magic:the gathering》这款游戏便是一个很好的例子
a good example is the game magic:the gathering

321
00:18:51,100 --> 00:18:53,900
你可以进行计算
you can make computation

322
00:18:53,900 --> 00:18:57,800
你可以创建一个足够复杂的牌组来执行算法
you can create a deck that is complex enough to actually carry out algorithms

323
00:18:57,900 --> 00:19:01,200
基于游戏规则
through the rules of magic gathering the game

324
00:19:02,300 --> 00:19:07,900
还有很多其他的东西也是意外图灵完备的
and there's a lot of other stuff that are also Turing complete by accident 

325
00:19:07,966 --> 00:19:12,799
这是一个与weird machine相关的有趣概念
which is an interesting concept related to these weird machines right

326
00:19:12,866 --> 00:19:13,566
很明显
obviously

327
00:19:13,566 --> 00:19:16,866
《magic the gathering》中的牌组就是一种weird machine
a deck in magic the gathering is quite a weird machine

328
00:19:16,900 --> 00:19:23,200
将程序分开，有针对性的重组，也是如此
but so is pieces of program taken apart and stuff back together carefully in a targeted way

329
00:19:24,766 --> 00:19:28,933
核心要点是，rop是有趣的
the core takeaway though is rop is fun

330
00:19:29,533 --> 00:19:31,533
你是个雕刻家
you are a sculptor

331
00:19:31,666 --> 00:19:33,733
你拿到一个无聊的程序
you're taking a boring program

332
00:19:34,133 --> 00:19:37,133
你看到那个程序什么都没做
you saw that program be started with did nothing

333
00:19:37,800 --> 00:19:42,900
通过利用一个漏洞来拆解这个程序
and by exploiting a vulnerability to break that program apart

334
00:19:43,133 --> 00:19:45,066
然后把它们拼在一起
and crafting it back together

335
00:19:45,600 --> 00:19:51,100
通过在栈上小心构建ropchain
by carefully creating a chain of return addresses on the stack

336
00:19:51,666 --> 00:19:55,133
这导致原始程序的部分
that caused pieces of that original program

337
00:19:55,900 --> 00:20:01,200
执行了最初设计中没有的操作
to perform operetions that it was not originally designed to do

338
00:20:02,000 --> 00:20:03,933
我们正在建造一些新的东西
we are building something new

339
00:20:04,866 --> 00:20:09,266
我们是在程序中展示艺术的雕塑家
we're sculptors exposing the art in the program

340
00:20:10,000 --> 00:20:15,900
我希望当你们在享受模块接下来的内容时能想到这个
that's what I would encourage you to think about as you suffer through the rest of the module

341
00:20:16,300 --> 00:20:17,266
这很有趣
this is fun

