1
00:00:00,733 --> 00:00:01,933
你好黑客
hello hackers

2
00:00:02,100 --> 00:00:06,000
欢迎来到PWN学院内存错误模块的第2个视频
welcome to video 2 of the memory errors module of pwn college

3
00:00:06,066 --> 00:00:08,733
我是Yan，今天我们要谈论的是
I'm Yan and today we're going to be talking about

4
00:00:08,966 --> 00:00:12,199
使用问题导致的内存错误
high level problems that lead to memory errors

5
00:00:13,066 --> 00:00:16,666
在之前的视频中我讲过
as a reminder in the previous video I talked about how

6
00:00:18,066 --> 00:00:19,099
丹尼斯·里奇
Dennis Ritchie

7
00:00:19,266 --> 00:00:22,166
幻灯片右边的这个人
this man on the right of the slide here

8
00:00:22,166 --> 00:00:24,133
创建了C编程语言
created the C programming language

9
00:00:24,100 --> 00:00:27,800
他创建它是为了为Unix操作系统编写程序
he created it to create utilities for the Unix operating system

10
00:00:27,900 --> 00:00:30,900
unix是他在这之前与别人合作创建的
which he had co created just several years earlier

11
00:00:33,300 --> 00:00:42,600
C语言的设计兼顾了对底层的控制和
and C was designed to give low level control and power to the developer

12
00:00:42,600 --> 00:00:45,966
让程序员能够写出高效的代码
to allow them to write fast code 

13
00:00:46,500 --> 00:00:49,600
同时只要使用便捷的高级语言 的能力
but still use a source code a high level language to write it

14
00:00:49,666 --> 00:00:51,566
而不是直接用汇编写
rather than writing it directly in assembly

15
00:00:53,100 --> 00:00:59,800
不幸的是，与冯·诺依曼架构的结合
unfortunately in combination in a way with the Von Neumann architecture

16
00:00:59,800 --> 00:01:04,800
带来了图像左边的三个约翰
brought to us by the three Johns on these figures on the left um

17
00:01:06,566 --> 00:01:09,199
以及冯命名的结构
and von nominement's architectures

18
00:01:11,066 --> 00:01:14,533
看起来有点不考虑安全问题
kind of seeming thoughtlessness about security

19
00:01:16,700 --> 00:01:21,966
C语言的兴起和惊人的传播导致了一个状态
the rise and amazing spread of C has led to a state

20
00:01:22,500 --> 00:01:27,500
直到今天，我们仍然被内存错误所困扰
where we are plagued with memory errors and software even now to this day

21
00:01:28,100 --> 00:01:33,800
那么让我们来看看导致这些错误的一些使用问题
so let's look at some of the high level problems  that lead to these errors

22
00:01:34,333 --> 00:01:36,266
整体上最大的问题
the biggest problem kind of the overall

23
00:01:36,333 --> 00:01:38,499
是C信任开发人员
general summary is that C trusts the developer

24
00:01:38,500 --> 00:01:40,666
在python中
 in python

25
00:01:40,600 --> 00:01:43,900
如果你创建一个包含三个元素的列表
if you create a list of with three elements in it

26
00:01:43,933 --> 00:01:46,133
你试着访问第11个元素
and you try to access the 11th element

27
00:01:46,366 --> 00:01:47,999
python会告诉你不行
python will tell you no

28
00:01:48,766 --> 00:01:50,199
这个列表只有三个元素
this list only has three elements

29
00:01:50,200 --> 00:01:51,666
你不能访问第11个元素
you're not accessing the 11th

30
00:01:51,666 --> 00:01:52,799
绝对不可能
absolutely no way

31
00:01:53,266 --> 00:01:54,699
它会抛出一个异常
um it'll throw an exception

32
00:01:55,200 --> 00:01:57,566
然后你就会意识到
and uh then you will realize oh

33
00:01:57,700 --> 00:02:00,566
我正在访问一个我不应该访问的元素
I'm accessing an element that I shouldn't be accessing

34
00:02:00,566 --> 00:02:01,933
你可以修改你的代码
and you can fix your code

35
00:02:02,166 --> 00:02:03,133
C不会那样做
C won't do that

36
00:02:03,333 --> 00:02:05,333
事实上，C不能那样做
in fact C cannot do that

37
00:02:05,600 --> 00:02:07,066
C被设计成
C is designed again

38
00:02:07,100 --> 00:02:11,300
要尽可能和汇编对应
to be as low level as as direct translation as possible

39
00:02:11,300 --> 00:02:17,100
C语言只是让你不用再为寄存器管理操心了
all C really does is take the burden of register management away from you

40
00:02:18,200 --> 00:02:23,700
并且在函数调用等方面更便捷
and handle calling functions and so forth in a nicer way than assembly might

41
00:02:25,266 --> 00:02:27,566
你可以创建数据结构等等
let you create structures and etc etc

42
00:02:27,566 --> 00:02:28,599
当然c做了很多
of course c does a lot

43
00:02:28,600 --> 00:02:32,500
但是C语言不会去隐式记录
but what C doesn't do is implicitly track things

44
00:02:32,566 --> 00:02:34,533
比如数组中元素的数量
like the number of elements in an array

45
00:02:34,533 --> 00:02:37,533
如果您想跟踪数组中元素的数量
if you want to track the number of elements in an array

46
00:02:37,600 --> 00:02:41,700
在访问数组之前，要注意不要越界访问
and be very careful to check if the array is big enough before you access it

47
00:02:41,766 --> 00:02:43,399
当然你可以用C来实现一个这样的功能
of course you can write that in C

48
00:02:43,700 --> 00:02:46,500
您可以创建一个同时具有数组和大小的结构
you can create a structure that has both an array and a size

49
00:02:46,600 --> 00:02:49,000
但现实上
 but realistically

50
00:02:50,700 --> 00:02:53,100
如果人们不这样做
if people do not do that and 

51
00:02:53,333 --> 00:02:56,299
它们只是?？的访问内存 C允许这样
they just access memory ？？ C will let them do that

52
00:02:56,700 --> 00:03:00,500
问题就会出现
and problems will arise

53
00:03:01,866 --> 00:03:03,333
会出现的问题
the problems that will arise

54
00:03:03,900 --> 00:03:08,700
和我要讲的其他使用问题有关系
have to do with some of these other high level problem causes that I'll talk about

55
00:03:08,700 --> 00:03:09,600
首先
to begin with

56
00:03:10,300 --> 00:03:15,700
C将控制信息和数据混合在一起
C mixes control information and data in the same place

57
00:03:15,733 --> 00:03:16,999
你应该
you should be um

58
00:03:17,166 --> 00:03:18,933
应该记得栈
should remember the stack

59
00:03:19,100 --> 00:03:26,300
你们已经学过了，希望做了之前逆向的课后题
you Learned about it and hopefully had to deal with it a lot in the previous module in reverse engineering

60
00:03:26,333 --> 00:03:28,099
栈保存了大量的用户数据
the stack holds a lot of user data

61
00:03:28,100 --> 00:03:29,200
我的意思是有用户数据
I mean there's user data

62
00:03:29,200 --> 00:03:31,700
实际上，栈一开始保存了大量的用户数据
actually the stack starts out holding a lot of user data

63
00:03:31,766 --> 00:03:33,699
用户数据在程序执行过程
but user data throughout executional program

64
00:03:33,700 --> 00:03:35,133
传的到处都是
spreads all over the place

65
00:03:35,333 --> 00:03:36,666
不幸的是
unfortunately

66
00:03:36,900 --> 00:03:39,900
在相同的内存区域
in those same general memory regions

67
00:03:40,300 --> 00:03:43,333
程序存储大量的控制信息
programs store a lot of control information

68
00:03:44,300 --> 00:03:51,900
他们把这些控制数据和普通数据存储在一起
and they store this together with the non controlled data that

69
00:03:53,200 --> 00:03:55,266
包括用户数据
including user data that is stored

70
00:03:55,700 --> 00:03:57,600
以栈为例
recall the stack for example

71
00:03:58,333 --> 00:04:00,266
栈上的所有东西都混在一起
everything on the stack is to jumble together

72
00:04:00,400 --> 00:04:04,500
函数在栈上有包含了返回地址的函数栈帧
functions have their function frames on the stack containing the return address

73
00:04:05,266 --> 00:04:06,699
我们开始吧
or let's start actually

74
00:04:07,066 --> 00:04:08,333
从左边开始
from the left here

75
00:04:08,400 --> 00:04:10,800
函数的局部变量
the local variables of the active function

76
00:04:10,800 --> 00:04:15,100
其中一些是用户控制的，可能是攻击者控制的
some of which are user controlled potentially attacker controlled

77
00:04:15,800 --> 00:04:17,900
指向内存中其他位置的指针
saved pointers to other places in memory

78
00:04:18,400 --> 00:04:25,100
例如，指向栈中别的位置的基指针
 for example the saved base pointer for the stack points elsewhere in the stack

79
00:04:25,166 --> 00:04:26,866
指向代码段的指针
save pointers to code

80
00:04:27,500 --> 00:04:32,200
稍后用于从函数返回的指针
pointers that are later used to return from the function

81
00:04:32,600 --> 00:04:33,400
而且
and

82
00:04:33,700 --> 00:04:36,800
再向右一点，再往上一点
further to the right and the stack further up the stack

83
00:04:37,200 --> 00:04:39,266
调用方函数的局部变量
local variables of the caller function

84
00:04:39,733 --> 00:04:41,933
调用当前函数的函数
the function that called that function

85
00:04:41,933 --> 00:04:43,933
调用调用方函数的函数，依此类推
the function that called that function and so on

86
00:04:43,933 --> 00:04:46,999
栈上有很多数据
there's a lot of data on the stack and it's all

87
00:04:49,800 --> 00:04:53,133
储存在一起，处理方式完全相同
store together and it's all treated exactly the same

88
00:04:53,733 --> 00:04:57,133
具有严重的安全影响
which is has serious secured implications

89
00:04:57,100 --> 00:05:01,000
前面我们讨论了访问3元素数组的第11个元素
earlier we talked about accessing the 11th element of 3 element array

90
00:05:01,266 --> 00:05:04,399
当你在C语言中这样做时会
what happens when you do that in C

91
00:05:04,700 --> 00:05:08,100
如果你的本地缓冲区是一个数组
if your local buffer is this a array

92
00:05:08,766 --> 00:05:10,899
你最终会访问这里的某个地方
you end up accessing somewhere in here

93
00:05:10,933 --> 00:05:12,733
并且直接往那里写入数据
and writing data directly there

94
00:05:12,866 --> 00:05:15,333
这是个坏消息
that's really bad news right

95
00:05:15,366 --> 00:05:17,599
你能利用它做很多事
what can you do with that you can do a lot with that

96
00:05:17,600 --> 00:05:20,700
例如，你可以获取一个返回地址
you can for example take a return address

97
00:05:20,900 --> 00:05:28,100
指向程序.text代码段的某个地方
that was pointing somewhere in the .text segment section into the code of the program

98
00:05:28,266 --> 00:05:30,333
然后把它指向别的地方
and change it to point somewhere else

99
00:05:30,900 --> 00:05:34,800
比如将其更改为指向你注入的shellcode
or change it to point to some shell code that you injected

100
00:05:35,133 --> 00:05:37,066
如果您还记得shellcode模块
if you recall the shellcoding module

101
00:05:38,666 --> 00:05:39,933
这是个大问题
this is a big problem

102
00:05:40,000 --> 00:05:43,266
事实上，在一个阳光明媚的日子这个问题
and in fact this problem on one sunny day

103
00:05:43,700 --> 00:05:46,500
起码在1988年地球的某个地方可能是晴朗的
probably was sunny somewhere in 1988

104
00:05:47,800 --> 00:05:54,700
罗伯特·泰彭·莫里斯利用了
Robert tepen Morris used this exact situation 

105
00:05:55,366 --> 00:05:59,733
一个基于堆栈的缓冲区溢出
a stack based buffer overflow where 

106
00:05:59,766 --> 00:06:01,366
他从栈缓冲区溢出
he overflowed from some buffer on the stack

107
00:06:01,400 --> 00:06:03,966
并且覆盖了返回地址
and and overwrote the return address

108
00:06:04,000 --> 00:06:10,800
据我所知，他创建了第一个有记录的内存破坏漏洞利用
he used this to create the 1st documented memory corruption exploit as far as I know

109
00:06:11,500 --> 00:06:15,800
推出了第一款蠕虫病毒，搞瘫了整个网络
launched the 1st designed worm and brought down the entire net

110
00:06:15,800 --> 00:06:18,300
我们在讲shellcode的时候讲过这个
we talked about this back when we talked about shellcoding

111
00:06:18,300 --> 00:06:25,800
这正是他意外创造这么大危害所利用的漏洞
but these are the exact bugs that he used to do all this damage accidentally

112
00:06:26,866 --> 00:06:28,533
损失是如此之大
the damage was so great that

113
00:06:29,100 --> 00:06:33,600
互联网基本上被关闭
the internet had to be basically shut down disconnected

114
00:06:34,100 --> 00:06:36,266
修好所有的机器
fixed all of the machines

115
00:06:36,866 --> 00:06:38,699
然后再接入网络
and then plug back in

116
00:06:38,700 --> 00:06:41,366
想象一下，现在这么做简直是疯了
imagine doing that now it would be insane

117
00:06:42,000 --> 00:06:42,800
对于这个
for this

118
00:06:42,800 --> 00:06:45,200
当然我之前提到过
of course I mentioned before 

119
00:06:45,700 --> 00:06:48,666
他被根据1986年的计算机欺诈和滥用法案定罪
he was convicted under the 1986 computer fraud and abuse act

120
00:06:49,400 --> 00:06:52,200
但我没有提到他后来成了一名计算机科学教授
 but I didn't mention that he has since become a CS professor

121
00:06:53,100 --> 00:06:55,800
麻省理工学院的计算机科学教授
computer science professor at MIT and 

122
00:06:55,966 --> 00:06:58,099
联合创立了combinator和其他一些企业
co founded y combinator and a bunch of other ventures

123
00:06:58,100 --> 00:07:02,200
所以他过得很好
so he is doing quite well

124
00:07:03,000 --> 00:07:05,700
尽管他有不光彩的过去
despite his shady past

125
00:07:07,400 --> 00:07:10,166
好，我们接着看问题三
all right let's move on to problem 3 right

126
00:07:10,300 --> 00:07:13,266
C混合了控制数据和非控制数据
C mixes control data non control data

127
00:07:13,333 --> 00:07:16,566
以同样的方式C混合了数据和元数据
in the same way C mixes data and metadata

128
00:07:16,733 --> 00:07:18,933
这也是有问题的
right and this is also problematic

129
00:07:18,933 --> 00:07:20,566
非常相似，但也有问题
very similar but also problematic

130
00:07:20,566 --> 00:07:23,299
最简单的例子是字符串
considered the simplest example is strings

131
00:07:23,566 --> 00:07:25,566
你们都应该知道字符串是以null结尾的
you should all know strings are null terminated

132
00:07:25,566 --> 00:07:28,666
在C语言中，当你有一个字符串时，比如
in C when you have a string you say you know

133
00:07:28,966 --> 00:07:30,466
名字叫Yan
the name is Yan

134
00:07:31,300 --> 00:07:36,100
在这个例子中，初始值为Yan的10个字符数组
in this case this 10 character array with initial value of Yan

135
00:07:36,166 --> 00:07:37,666
占了10个字节
hold 10 bytes

136
00:07:37,766 --> 00:07:39,966
Yan和7个空字节
Yan and then 7 null bytes

137
00:07:40,866 --> 00:07:43,366
其中三个字节是数据y a和n
three of these bytes are data y a and n

138
00:07:43,400 --> 00:07:46,500
null字节实际上是元数据
and the null byte actually is metadata

139
00:07:46,900 --> 00:07:49,933
它表示，嘿，这是字符串的结尾
it encodes it says hey this is the end of the string

140
00:07:49,933 --> 00:07:52,266
这简单地编码了字符串的大小
this simplicitly encodes the size of the string

141
00:07:52,533 --> 00:07:54,533
只使用一个字节
using just a single byte right

142
00:07:55,900 --> 00:07:58,500
字符串的大小基本上是
and the size of the string is basically

143
00:07:58,666 --> 00:07:59,733
字符串的开始
the beginning of the string

144
00:07:59,733 --> 00:08:01,466
直到null字节所在的位置
up to where the null byte is

145
00:08:02,700 --> 00:08:04,333
这是有问题的
this is problematic

146
00:08:04,300 --> 00:08:13,100
考虑一下，假如你用read获取一个名称
consider if you are just inputting a name using the read system call that just gets a bunch of data

147
00:08:13,933 --> 00:08:15,333
你可以这样做
and you do something like

148
00:08:15,466 --> 00:08:18,266
从标准输入读入数据到名称变量
read from standard input into name

149
00:08:18,600 --> 00:08:21,500
有一个C宏，它能获取变量大小
and then there's a macro C that gives you the size of a variable

150
00:08:21,766 --> 00:08:23,266
比如名字的大小
say the size of name

151
00:08:23,266 --> 00:08:26,166
乍一看，这很合理
this this looks reasonable at 1st glance

152
00:08:26,866 --> 00:08:27,666
但
but

153
00:08:28,366 --> 00:08:29,666
有一些问题
there are some problems

154
00:08:29,600 --> 00:08:33,500
首先，这允许用户在任何他们想要的地方注入空字节
1st of all it allows a user to inject null bytes anywhere they want 

155
00:08:33,500 --> 00:08:35,300
read会接受他们
read will happily take them

156
00:08:35,300 --> 00:08:37,800
所以我可以用一个空字节来代替Yan的a
so I could put a null byte instead of the a of the Yan 

157
00:08:38,600 --> 00:08:43,300
突然不是一个10长度的字符串
and suddenly instead of a 10 length string

158
00:08:44,100 --> 00:08:48,700
我在一堆其他数据中输入了1个长度的字符串
I have inputted 1 length string in a bunch of other data

159
00:08:48,800 --> 00:08:52,066
其现状值得怀疑
 the status of which is questionable

160
00:08:52,400 --> 00:08:56,900
因为任何字符串操作都会在空字节上终止
because any string operations will terminate on that null byte

161
00:08:57,666 --> 00:08:59,399
同样，如果没有空字节会怎样
likewise what if there are no null bytes

162
00:08:59,400 --> 00:09:00,500
这更糟糕
this is even worse

163
00:09:00,533 --> 00:09:03,066
如果我把10个变量都填满
if I just fill all 10 variables

164
00:09:03,300 --> 00:09:06,133
所有10个字节，不好意思，那个变量数据
all 10 bytes excuse me and that variable with data

165
00:09:08,700 --> 00:09:10,100
这个字符串有多长？
how long is that string

166
00:09:10,400 --> 00:09:14,100
C不存储长度信息
C as a reminder stores no other length information

167
00:09:14,166 --> 00:09:15,999
它不可能知道这是
it has no way to know that this is

168
00:09:17,100 --> 00:09:23,700
在编译完代码之后，它没有办法知道
after compiling the code it has no way to know

169
00:09:24,066 --> 00:09:27,699
这里应是10字节长
that this used to be 10 bytes long

170
00:09:28,300 --> 00:09:30,900
接下来对这个变量的操作
so further operations on this variable

171
00:09:31,200 --> 00:09:34,100
因为缺乏空字节记录字符串的长度
lacking that null byte encodes its length that the strings length

172
00:09:35,500 --> 00:09:40,400
可能会做一些奇怪和疯狂的事情
 might do weird and crazy things

173
00:09:41,933 --> 00:09:44,699
好的，最后一个使用问题
alright final high level problem will cover

174
00:09:45,566 --> 00:09:48,466
初始化和清理
um initialization and cleanup right

175
00:09:48,533 --> 00:09:49,966
C是非常接近底层的
again C is very low level

176
00:09:49,966 --> 00:09:51,333
除非你让它做
unless you tell it to

177
00:09:51,333 --> 00:09:53,533
否则它不会进行任何初始化
it will not do any initialization

178
00:09:53,733 --> 00:09:55,566
或者任何的清理工作
or mostly any cleanup

179
00:09:55,566 --> 00:09:58,999
就清理而言，它所做的就是
all it will do in terms of cleanup for example is

180
00:09:59,400 --> 00:10:06,100
抬高栈指针来打引号的释放栈帧
add to your stack pointer to quote unquote deallicate the stack frame

181
00:10:06,100 --> 00:10:08,400
我在上一模块讲过
and I talked about in the previous module

182
00:10:08,500 --> 00:10:12,000
释放栈帧实际上不删除任何数据
how deallicate the stack frame doesn't actually remove any data

183
00:10:12,000 --> 00:10:17,200
在清理阶段C只是移动栈指针
in the cleanup stage C just moves the stack pointer

184
00:10:17,200 --> 00:10:18,700
那些旧数据还在那里
that old data still there

185
00:10:18,766 --> 00:10:21,133
只是现在在栈指针的左边
it's just now to the left of the stack pointer

186
00:10:21,133 --> 00:10:21,933
所以它不会
so it doesn't

187
00:10:22,166 --> 00:10:26,166
真正概念上存在于正常的程序操作中
really conceptually exist in normal program operation

188
00:10:26,533 --> 00:10:27,733
但它还在那里
but it's still there

189
00:10:27,700 --> 00:10:33,500
如果程序中有内存错误，仍然可以访问它
you might still be able to access it if there was a memory error in the program

190
00:10:33,700 --> 00:10:34,533
同样的
likewise

191
00:10:35,500 --> 00:10:36,500
对于初始化
initialization

192
00:10:36,500 --> 00:10:38,766
它不会初始化任何东西，除非你告诉它
so you won't initialize anything unless you tell it to

193
00:10:38,766 --> 00:10:40,733
除非你显式地初始化它
unless you explicitly initialize it

194
00:10:43,733 --> 00:10:45,299
看看这个例子
if you look at this example

195
00:10:45,300 --> 00:10:48,133
有一个字符数组叫 myVariable
there's a character array called my variable

196
00:10:48,133 --> 00:10:49,366
它大小为8
and it's of size 8 

197
00:10:49,666 --> 00:10:50,933
当我开始
when I start

198
00:10:51,000 --> 00:10:52,600
当这个程序启动时
when this program launches

199
00:10:53,400 --> 00:10:55,066
抱歉，当这个函数被调用时
sorry when this function is called

200
00:10:55,100 --> 00:10:58,800
myVariable的值是多少
what will be the value of my variable

201
00:10:59,733 --> 00:11:01,133
它不会是空
it won't be nulls

202
00:11:01,700 --> 00:11:07,700
在前面的例子中，我设置了初始值
in the previous example I had this initial value

203
00:11:07,700 --> 00:11:14,100
这是显式地将myName初始化为内存中的这个值
this is an initialization that explicitly initialized my name to this value in memory

204
00:11:14,266 --> 00:11:15,666
这个没有初始值
this has no initial value

205
00:11:16,166 --> 00:11:19,666
我相信你也用c代码试过
 and I'm sure that you have created code in C

206
00:11:20,100 --> 00:11:22,500
它也没有初始值
that had no initialization either

207
00:11:23,000 --> 00:11:24,200
不初始化
without initialization

208
00:11:25,366 --> 00:11:28,533
它只会是恰好在那里的值
it will simply have the value that happened to be there

209
00:11:28,600 --> 00:11:31,900
前一个函数在栈上留下的值
on the stack left over by a previous function

210
00:11:32,533 --> 00:11:33,366
你可以试试
you can try it

211
00:11:33,366 --> 00:11:34,999
创建一个这样的程序
create a program like this

212
00:11:35,200 --> 00:11:37,666
运行它，看看它会告诉你什么
run it and see what it tells you

213
00:11:37,600 --> 00:11:40,500
实际上，在以后的视频中会更深入地讨论它
actually you'll also go through it in the future video more in depth

214
00:11:40,500 --> 00:11:45,100
但它是C程序面临的一个主要问题
but it is a major issue facing C programs

215
00:11:45,166 --> 00:11:48,399
这些就是主要的形式问题
so these are the form major problems

216
00:11:48,466 --> 00:11:49,899
初始化
initialization

217
00:11:50,066 --> 00:11:52,466
元数据、控制数据
metadata control data

218
00:11:53,600 --> 00:11:58,100
和开发者搬起石头砸自己脚的能力
and basically the ability of a developer to shoot themselves in the foot

219
00:11:59,000 --> 00:12:01,933
有可能编写安全的C代码吗？完全可以
 is it possible to write secure C code absolutely

220
00:12:01,933 --> 00:12:04,333
C并不是一种不安全的语言
it's not that C is an insecure language

221
00:12:04,800 --> 00:12:08,400
C只是提供了以不安全的方式使用它
C gives you the tools to use it in an insecure way

222
00:12:08,400 --> 00:12:11,066
如果你真的想
if you so want to do um

223
00:12:12,500 --> 00:12:15,500
这是我希望你们从这门课中学到的一点
that's kind of one takeaway I'd like you to take from this course

224
00:12:15,600 --> 00:12:16,566
另一个结论
the other takeaway

225
00:12:17,133 --> 00:12:18,299
或者从这个模块
or from this module

226
00:12:18,300 --> 00:12:19,400
另一个结论是
the other takeaway though

227
00:12:19,400 --> 00:12:22,066
在很多很多很多情况下
is in many many many many cases

228
00:12:22,200 --> 00:12:28,800
C和其他低级语言非常非常容易被误用
it is very very very very easy to misuse C and other low level languages

229
00:12:29,200 --> 00:12:36,300
最终会创建不安全的代码
in a way that ends up in the creation of insecure code

230
00:12:36,966 --> 00:12:39,133
之后的视频见
I'll see you in future videos of this module

231
00:12:39,100 --> 00:12:41,700
我们将深入探讨
we'll go in depth into

232
00:12:41,700 --> 00:12:43,900
几个不同的内存破坏的例子
a couple of different examples of memory corruption

233
00:12:43,900 --> 00:12:44,966
然后我们会谈到
and then we'll talk about

234
00:12:45,000 --> 00:12:47,366
内存损坏的缓解措施
mitigations of memory corruptions
