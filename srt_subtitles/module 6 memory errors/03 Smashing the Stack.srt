1
00:00:00,800 --> 00:00:03,800
你好，黑客们，欢迎来到pwn大学，我是Yan
hello hackers welcome to pwn college I'm Yan

2
00:00:03,800 --> 00:00:06,266
在这个视频中，我们将讨论
and in this video we're going to be talking about

3
00:00:06,566 --> 00:00:07,499
内存错误
memory errors

4
00:00:07,500 --> 00:00:10,666
特别是一种非常简单的内存错误
specifically a very simple type of memory error

5
00:00:11,066 --> 00:00:13,966
经典的栈溢出
kind of the the classic stack overflow

6
00:00:14,500 --> 00:00:18,200
嗯，我们要谈谈针对栈的攻击
um we're gonna talk about smashing the stack

7
00:00:19,200 --> 00:00:22,400
让我们从一个简单的例子开始
let's start with a simple example

8
00:00:22,466 --> 00:00:23,999
就是本次视频中的例子
this will be the example of the video

9
00:00:25,500 --> 00:00:30,800
如果你有一个程序，这个程序从用户
let's see if you have a program and the program takes input from the user

10
00:00:30,900 --> 00:00:33,333
通过命令行获得命令行参数作为输入
on the command line as a command line argument

11
00:00:33,666 --> 00:00:35,299
就在这里
that's right here right

12
00:00:35,800 --> 00:00:38,800
然后把它传递给这个print_quoted函数
and it passes it into this print quoted function

13
00:00:39,100 --> 00:00:45,300
该函数打印出一个带引号的字符串
and the print quoted function prints out a quoted version of the string

14
00:00:45,500 --> 00:00:47,533
字符串的引号版本长什么样？
what does the quoted version of the string look like

15
00:00:47,700 --> 00:00:52,900
这个quote函数
we have this quote function

16
00:00:53,200 --> 00:00:59,000
它有一个输出缓冲区
that has an output buffer and 

17
00:00:59,100 --> 00:01:04,700
它用sprintf将引号括起来的字符串填充到输出缓冲区
it uses sprintf to fill the output buffer with a version of the string that we passed in surrounded by quotes

18
00:01:06,600 --> 00:01:08,666
这个程序有许多bug
this program has a number of bugs in it

19
00:01:08,700 --> 00:01:14,300
在这个视频里，将讨论程序中出现的栈溢出
and in this video we're going to talk about the stack overflow that's present in this program

20
00:01:15,866 --> 00:01:19,299
栈溢出发生在这个sprintf中
and the stack overflow occurs in this sprintf

21
00:01:19,300 --> 00:01:22,000
这个sprintf是不安全的
this sprintf is unsafe

22
00:01:22,000 --> 00:01:25,600
它无法知道缓冲区有多大
it has no way of understanding how big the buffer is

23
00:01:25,666 --> 00:01:28,199
所以问题就来了
and so there are problems

24
00:01:28,666 --> 00:01:30,533
用户输入是不受限制的
and of course the user input is not limited

25
00:01:30,500 --> 00:01:35,700
让我们看看当恶意用户
so let's see what happens when a malicious user

26
00:01:35,800 --> 00:01:40,400
将一个很长的字符串传给参数1
passes in a very long argument into argue 1, a very long string

27
00:01:42,300 --> 00:01:43,266
会发生什么
what happens of course

28
00:01:43,766 --> 00:01:45,599
当sprintf运行时
when sprintf runs

29
00:01:45,600 --> 00:01:47,866
它在栈上分配了一些空间
it allocates some space on the stack

30
00:01:47,800 --> 00:01:54,600
创建它的元数据或它需要的任何局部变量
creates its metadata or whatever local data that it needs to have

31
00:01:55,366 --> 00:01:56,799
当它启动时
and when it launches

32
00:01:56,800 --> 00:01:59,900
栈上有函数返回地址
there's this return address that is pushed 

33
00:02:00,100 --> 00:02:04,066
返回地址表示，当sprintf返回后
and the return address says when you return from sprintf 

34
00:02:04,200 --> 00:02:06,333
回到代码的第14行。当然，我们看的是源代码
go to this line 14 in the code of course we're looking at source code

35
00:02:06,333 --> 00:02:08,399
实际上是二进制的
in reality this will be binary

36
00:02:10,200 --> 00:02:14,300
然后sprintf写入一个引号
then sprintf writes one quote

37
00:02:14,933 --> 00:02:15,966
然后是输入
then the input

38
00:02:16,000 --> 00:02:18,100
然后另一个引号到栈上
and then another quote onto the stack

39
00:02:18,100 --> 00:02:21,100
写到输出缓冲区所在的位置
onto specifically where this output buffer was

40
00:02:21,100 --> 00:02:26,500
quote函数栈帧中的输出缓冲区
an output buffer was in the stack frame of the quote function

41
00:02:26,900 --> 00:02:31,600
当输出缓冲区填满时
and when the output buffers filled

42
00:02:31,900 --> 00:02:35,900
因为对命令行参数的大小没有限制
because there is no limit on the size of a command line argument

43
00:02:35,966 --> 00:02:38,799
实际上是有，但是是65kb
or I mean there is but it's like 65 KB

44
00:02:42,000 --> 00:02:49,000
但整个输出缓冲区只用16字节就被填满了
there the entire output buffer which was only 16 bytes long is completely filled up

45
00:02:49,066 --> 00:02:49,999
如果你注意到
and if you notice

46
00:02:50,100 --> 00:02:53,366
当您将output传给sprintf时
when you passing this output into sprintf

47
00:02:53,400 --> 00:02:56,600
它所需要的只是一个字符指针
all that it takes is a character pointer

48
00:02:56,600 --> 00:02:59,500
让我们在命令行里看看
let's take a look on the command line here

49
00:03:00,200 --> 00:03:01,566
man sprintf
man sprintf

50
00:03:03,166 --> 00:03:06,199
因为printf只接收一个字符指针
as printf takes a character pointer

51
00:03:06,866 --> 00:03:08,699
所以对于它的输出缓冲区
and for its output buffer 

52
00:03:09,800 --> 00:03:16,600
它没有办法知道缓冲区的大小
it has no way of knowing the size of that character of buffer

53
00:03:18,100 --> 00:03:22,600
所以如果没有额外的信息提供给它，它就别无选择
and so it has no choice without any additional information provided to it

54
00:03:22,700 --> 00:03:25,100
当然，在一个完善的程序中，你可以这样做
and of course in a well formed program you could

55
00:03:25,400 --> 00:03:27,700
例如，在这里设置一个大小限制
put a size limit here for example

56
00:03:27,700 --> 00:03:29,333
或者你可以用一个更安全的函数
or you could use a more safe function

57
00:03:29,333 --> 00:03:30,666
比如snprintf
such as snprintf

58
00:03:31,533 --> 00:03:33,499
它别无选择，只能复制整个字符串
it has no choice but to copy the whole string

59
00:03:33,500 --> 00:03:35,400
当然，如果整个字符串太长
and of course if the whole string is too long

60
00:03:35,400 --> 00:03:36,466
它会溢出
it'll overflow

61
00:03:36,466 --> 00:03:37,699
这里是什么
and what was over here

62
00:03:38,000 --> 00:03:46,500
这里是返回地址，它决定
over here used to be the return address from quote which said 

63
00:03:47,100 --> 00:03:50,000
当quote返回时，转到源代码print_quoted的第9行
when quote returns go to line 9 in the source code in print quote 

64
00:03:50,533 --> 00:03:52,499
或者任何与之对应的二进制指令
or whatever binary instruction corresponded to that

65
00:03:52,733 --> 00:03:54,699
结果是
so what happens is

66
00:03:54,800 --> 00:03:59,600
攻击者的输入会覆盖缓冲区里和后的所有内容
the attacker input overwrites everything over the buffer 

67
00:03:59,933 --> 00:04:01,733
然后覆盖返回地址
and writes over that return address

68
00:04:02,200 --> 00:04:05,400
然后当返回地址
then when that return address

69
00:04:05,466 --> 00:04:07,499
当函数返回时
when the return from the function happens

70
00:04:08,333 --> 00:04:11,399
会有不好的结果
there are bad effects so

71
00:04:13,766 --> 00:04:15,566
所以这里出了什么问题？
what went wrong here right

72
00:04:15,500 --> 00:04:20,500
有两处出了问题。一种是懒惰的编程习惯
two things went wrong. one is a kind of lazy programming practice

73
00:04:21,066 --> 00:04:25,166
很容易搞砸对sprintf的调用
it's very easy to screw up a call to sprintf

74
00:04:25,400 --> 00:04:32,600
因为你的栈溢出了，不好的事情会发生
and cause your stacks who get overflowed and bad things happen

75
00:04:33,533 --> 00:04:35,499
但还有一个更微妙的问题
but there's a more subtle problem

76
00:04:35,533 --> 00:04:39,333
在这个程序中更微妙的问题是
the more subtle problem is in this program 

77
00:04:41,000 --> 00:04:45,900
指向大小可变数据结构的指针被传参时
there were pointers being passed around to variable size data structures

78
00:04:46,400 --> 00:04:49,133
数据结构的大小没有被一起传
without the size also being passed around

79
00:04:49,133 --> 00:04:51,366
如果不是字符数组
if instead of a character array

80
00:04:51,966 --> 00:04:53,399
如果不是output字符指针
instead of a character pointer of output

81
00:04:53,400 --> 00:04:55,133
被单独传入，没有大小信息
 being passed in alone with no size information 

82
00:04:56,333 --> 00:04:59,133
而是
if instead

83
00:05:00,133 --> 00:05:02,899
这个程序使用了类似snprintf的函数
the program used something like snprintf

84
00:05:02,900 --> 00:05:05,366
让我们再看一下我们的手册
let's take a look at our man pages again

85
00:05:05,366 --> 00:05:08,299
Snprintf接受字符指针
snprintf takes the character pointer

86
00:05:10,100 --> 00:05:14,100
字符缓冲区指针并且还有大小
 the character buffer pointer and a size right

87
00:05:14,100 --> 00:05:16,266
如果使用了这个，大小被传递进来
if this was used and the size was passed in

88
00:05:16,400 --> 00:05:18,266
这个bug是可以避免的
this bug could have been avoided

89
00:05:18,866 --> 00:05:20,799
不幸的是，通常在C语言中
unfortunately oftentimes in C

90
00:05:20,866 --> 00:05:24,099
因为没有任何隐式元数据
because there is no implicit metadata to anything

91
00:05:24,300 --> 00:05:32,700
在代码中会看到很多这类导致缓冲区溢出的内存错误
you see a lot of these sorts of memory errors leading to buffer overflows in real code 

92
00:05:37,966 --> 00:05:39,866
可以利用这种内存损坏做什么？
what can you do with this memory corruption

93
00:05:39,866 --> 00:05:41,366
自问一下
right let's ask this for yourself

94
00:05:41,366 --> 00:05:42,899
你可以做很多的事情
well you can do a lot of stuff right

95
00:05:42,900 --> 00:05:43,600
当然可以
you could of course

96
00:05:43,600 --> 00:05:46,066
覆盖不影响任何事情的内存
overwrite memory that doesn't influence anything

97
00:05:46,066 --> 00:05:49,166
栈上有很多用来对齐的填充内存
there's plenty of memory uh padding on the stack etc

98
00:05:49,166 --> 00:05:50,666
这很无聊，对吧
that's boring right

99
00:05:50,666 --> 00:05:53,266
但还有一些更有趣的
but then there are a couple of more interesting

100
00:05:53,400 --> 00:05:59,100
可以用栈溢出做的一些像大家讨论的那种事情
things that you can do with a stack overflow like they're discussing right 

101
00:05:59,966 --> 00:06:02,766
可以覆盖堆栈上的其他内存
you could overwrite some other memory on the stack

102
00:06:02,900 --> 00:06:05,600
例如在同一个函数中的其他局部变量
other local variables for example in that same function

103
00:06:05,800 --> 00:06:11,200
用来影响一些数学运算
that are used to influence some mathematical operations

104
00:06:11,200 --> 00:06:13,533
一些条件跳转等等
some conditional jumps etc right

105
00:06:14,400 --> 00:06:17,800
你可能还记得那场胜利
you might remember the win

106
00:06:19,333 --> 00:06:21,166
我猜你们还没看到
well I guess you wouldn't have seen that yet

107
00:06:21,166 --> 00:06:24,999
在你的本模块的挑战问题
in your the the challenge problems for this module

108
00:06:25,500 --> 00:06:31,700
你会看到这些你可以覆盖和影响的变量
 you'll see these sort of variables that you can overwrite  and influence

109
00:06:31,866 --> 00:06:33,699
您还可以覆盖一些
you could also overwrite some memory

110
00:06:33,700 --> 00:06:37,900
用作读指针或读指针偏移量的内存
that is used as a read pointer or an offset of a read pointer

111
00:06:37,966 --> 00:06:40,333
这样你就可以让程序
that will allow you to forge the program

112
00:06:40,333 --> 00:06:43,599
去访问一些本不会访问的内存
to access some memory that wasn't supposed to right

113
00:06:43,666 --> 00:06:45,399
对于写指针也可以这样做
you can do the same for a write pointer

114
00:06:45,400 --> 00:06:47,800
导致所谓的任意内存覆盖漏洞
allowing for what is called an arbitrary write um memory overwrite vulnerability

115
00:06:51,200 --> 00:06:56,200
你可以用类似但更直接的方法
and you can use something similar but even more brutal

116
00:06:56,366 --> 00:06:58,299
就是覆盖代码指针
which is overriding a code pointer

117
00:06:58,300 --> 00:07:03,400
稍后程序将用于更改控制流的指针
a pointer that the program will later used to transfer control flow

118
00:07:03,900 --> 00:07:05,733
比如说
um for example

119
00:07:05,766 --> 00:07:08,466
我们在这里看到的返回地址
the return address that we saw being over within

120
00:07:08,466 --> 00:07:12,999
这个例子叫做控制流劫持漏洞利用
the example this is um called a control flow hijack exploit 

121
00:07:13,300 --> 00:07:15,700
嗯嗯
uh and um

122
00:07:15,700 --> 00:07:19,266
这是一种非常非常强大的利用方式
it's a very very powerful type of exploit 

123
00:07:19,400 --> 00:07:22,000
因为你控制了程序
because you take control of the program

124
00:07:22,333 --> 00:07:23,466
嗯通常
um typically

125
00:07:24,100 --> 00:07:28,700
当然，你也可以实现多个这样的效果
of course you might be able to do multiples of these effects

126
00:07:28,733 --> 00:07:31,566
通过多次触发相同的bug
by either triggering the same bug multiple times

127
00:07:36,100 --> 00:07:40,800
或者按顺序覆盖多个不同的东西
 or the overwriting multiple different things that are used in sequence for example

128
00:07:42,133 --> 00:07:44,066
当然终极力量
but of course the ultimate power

129
00:07:44,000 --> 00:07:45,900
我们将重点关注的
and what we'll focus on

130
00:07:45,900 --> 00:07:48,366
尤其是在后面的作业中
and especially the later parts of the homework

131
00:07:49,066 --> 00:07:52,066
是覆盖返回指针
is return pointer overriding

132
00:07:52,000 --> 00:07:56,800
溢出栈缓冲区以覆盖返回指针
you overflow a stack buffer to override the return pointers

133
00:07:56,800 --> 00:07:58,500
现在有各种各样的补救方式
and there's all sorts of complications and

134
00:07:58,500 --> 00:08:01,500
在很多很多情况下，这种利用已经过时了
and in in many many cases this is now obsolete

135
00:08:01,500 --> 00:08:06,500
这一模块中我们会讲到
but we'll roll into that in this module

136
00:08:06,700 --> 00:08:09,533
你还可以做其他有趣的事情
um other things you could do that are very interesting

137
00:08:09,500 --> 00:08:16,700
你在返回地址覆盖时不仅可以跳转到其它函数
you can jump not just to a different function in your return point overwrite

138
00:08:16,800 --> 00:08:18,600
还可以跳转到任何指令
you can jump to any instruction

139
00:08:19,766 --> 00:08:21,166
这是一个非常强大的能力
this is a very powerful capability 

140
00:08:23,266 --> 00:08:26,866
你可以将功能链式组装起来
and you can actually chain functionality

141
00:08:26,800 --> 00:08:29,200
你会深入了解这方面
you'll dive into this

142
00:08:29,500 --> 00:08:31,933
在下一模块会对这方面非常深入
you have extreme depth in the next module

143
00:08:31,933 --> 00:08:33,566
在面向返回编程模块中
actually in return oriented programming

144
00:08:33,700 --> 00:08:36,200
你也可以在指令之间切换
and you can jump between instructions as well

145
00:08:36,200 --> 00:08:40,300
这也是一种非常有趣的能力
this is also a very interesting sort of capability 

146
00:08:41,300 --> 00:08:46,800
特别是在x86和AMD64上
especially on x86 and AMD64

147
00:08:47,700 --> 00:08:51,500
我们将在下一模块中探讨这三个概念
and we'll explore these three concepts in the next module

148
00:08:51,566 --> 00:08:54,199
但是现在让我们回到我们的例子
but for now let's look back at our example

149
00:08:54,266 --> 00:08:55,299
并考虑
and consider

150
00:08:55,500 --> 00:09:00,400
覆盖返回地址以指向其他函数
overwriting the return address to point to some other function

151
00:09:02,500 --> 00:09:03,600
这里是我们的攻击点
and specifically here we have our attack 

152
00:09:03,900 --> 00:09:07,900
在这里我们覆盖返回地址
where we override the return address

153
00:09:07,900 --> 00:09:11,500
我们可以用我们控制的返回地址覆盖它
we could override it with a return address that we control

154
00:09:11,600 --> 00:09:15,400
特别是如果有一个win函数之类的
and specifically if there's for example a win function or whatever

155
00:09:15,400 --> 00:09:22,900
执行任意命令的函数，是一个非常理想的目标
a function that execute arbitrary commands  that is a very desirable function 

156
00:09:23,000 --> 00:09:26,800
要跳转到代码，我们可以用目标地址覆盖返回地址
to jump to the code we can override the return address with the location of that function

157
00:09:26,900 --> 00:09:35,200
当quote返回时，将执行我们想要执行的函数
and then when quote returns we will execute the function that we want to execute

158
00:09:35,900 --> 00:09:41,400
快速地看一下在实际中是如何工作的
let's take a quick look at the terminal how this actually works in practice

159
00:09:41,400 --> 00:09:43,500
首先让我们在 Binary Ninja上看看
actually 1st let's look on binary ninja

160
00:09:43,500 --> 00:09:48,400
我编译了这个程序
so I compiled this program

161
00:09:48,733 --> 00:09:52,566
这里是main，它调用了print_quoted
here is main which of course calls print quoted

162
00:09:52,566 --> 00:09:55,466
print_quoted调用quote
print quoted calls quote 

163
00:09:57,733 --> 00:10:00,199
quote调用sprintf，然后返回
quote calls sprintf and then returns

164
00:10:00,366 --> 00:10:06,066
好的，来到终端，我们用GDB调试它
all right let's jump to the terminal and we will GDB this 

165
00:10:08,066 --> 00:10:11,666
这是加载了插件的GDB
so this is GDB with split mind and stuff

166
00:10:11,600 --> 00:10:13,300
你可以自己配置环境
you can of course set it up

167
00:10:13,300 --> 00:10:17,900
或者使用PWN学院的环境
or use the pwn college infrastructure which has this available to you

168
00:10:21,666 --> 00:10:23,066
这种预先设置
kind of preset up

169
00:10:24,066 --> 00:10:26,966
在quote函数下断点
so let's break at the quote function

170
00:10:27,533 --> 00:10:30,533
然后用一个正常的
and then run with a normal

171
00:10:35,733 --> 00:10:37,366
正常的，正常的什么
normal what's it called normal

172
00:10:38,100 --> 00:10:40,700
额，输入，不好意思我愣了一下
input sorry on my mind went blank

173
00:10:40,800 --> 00:10:42,133
我们在quote处中断
so we broke out quote

174
00:10:42,900 --> 00:10:47,500
你可以在栈上看到
and you can see on the stack here

175
00:10:47,533 --> 00:10:50,566
实际上，让我们跳过栈的建立
actually let's let's step through the stack setup

176
00:10:52,133 --> 00:10:52,933
好了
okay

177
00:10:54,200 --> 00:10:56,866
现在我们已经设置好栈了
now we should have the stack all set up

178
00:10:57,000 --> 00:11:00,800
如果我们看RSP
if we look at RSP 

179
00:11:01,166 --> 00:11:05,366
在RSP或者栈上中还没有任何东西
we have nothing in RSP yet or nothing on on our stack

180
00:11:05,533 --> 00:11:07,333
这里应该是我们写入引号输入的地方
this should be where we write the quoted version of our input 

181
00:11:07,700 --> 00:11:16,500
如果我没记错，是第一个参数hello
which was if I remember correctly hello as the 1st argument 

182
00:11:16,500 --> 00:11:20,400
如果我们继续下一个指令
so if we go next instruction

183
00:11:20,500 --> 00:11:23,533
现在我们将要执行sprintf
now we're about to execute sprintf

184
00:11:24,000 --> 00:11:29,600
使用quote % s quote的格式字符串
with a format string of quote percent s quote

185
00:11:30,000 --> 00:11:31,300
和参数：hello
and argument hello

186
00:11:31,866 --> 00:11:32,666
好了
all right

187
00:11:33,300 --> 00:11:41,900
这是之前的堆栈缓冲区
here is our stack buffer before 

188
00:11:43,200 --> 00:11:44,066
什么鬼
what the heck

189
00:11:54,533 --> 00:11:56,366
跑哪里去了
are we where are we are now

190
00:11:56,800 --> 00:11:58,666
这应该是对的
I should this should be right

191
00:12:09,666 --> 00:12:10,499
为什么呢?
why is that it

192
00:12:11,500 --> 00:12:15,300
哦，它可能不在(栈)的顶部
oh well it might just not be at the top of the (stack)

193
00:12:16,333 --> 00:12:18,566
所以看起来在RDI
so seemingly it is at RDI

194
00:12:20,866 --> 00:12:21,166
好吧
okay

195
00:12:21,166 --> 00:12:23,133
这是我们的hello
so here's our hello

196
00:12:23,100 --> 00:12:28,300
出于某种原因它在RSP+10，可能有填充或扩展
alright it is RSP plus 10 for some reason maybe there was padding or extend

197
00:12:28,900 --> 00:12:31,466
这是我们的字符串hello
 so here's our string hello

198
00:12:31,700 --> 00:12:35,900
加了引号，很好，如果我们看
right quoted nicely and if we look at

199
00:12:38,800 --> 00:12:40,700
如果我们执行下一条指令
if we go to next instruction

200
00:12:41,666 --> 00:12:43,966
我们马上就要返回了
we're about to return

201
00:12:46,266 --> 00:12:48,466
现在在c28
here is at C 28

202
00:12:48,400 --> 00:12:53,900
距离hello 0x18
so hex 1 8 away from hello

203
00:12:54,366 --> 00:12:57,266
是我们的返回地址
is the return address that we're about to return to

204
00:12:57,966 --> 00:13:00,266
你可以在这里的调用栈中看到
you can see this back trace right here

205
00:13:00,666 --> 00:13:03,466
所以我们要从quote回到print_quoted
so we're about to go from quote to print quoted

206
00:13:04,700 --> 00:13:07,566
我们已经回到print_quoted，我们可以继续
and we're back in print quoted and we can continue

207
00:13:07,866 --> 00:13:10,733
看起来哪里出了问题
onwards it looks like something is broken

208
00:13:10,733 --> 00:13:12,166
我们看不到输出
and we don't see the output

209
00:13:12,166 --> 00:13:15,066
这没关系
that's okay all right so 

210
00:13:17,966 --> 00:13:20,499
这就是该程序正常的工作方式
that's basically how the program supposed to work but 

211
00:13:20,800 --> 00:13:24,333
让我们看看当恶意攻击者——我们自己
let's see what happens when a malicious attacker ourselves

212
00:13:24,500 --> 00:13:28,600
发送一个很长的字符串会发生什么
instead sends a very long string

213
00:13:30,533 --> 00:13:33,733
好，现在我们回到quote
okay so now we're back at quote

214
00:13:33,733 --> 00:13:34,599
我们到了
here we are

215
00:13:35,800 --> 00:13:43,200
先跳到调用sprintf
let's just step through until we call sprintf

216
00:13:43,800 --> 00:13:45,666
好了，开始吧
okay so here we go

217
00:13:45,766 --> 00:13:47,466
我们将调用sprintf
we're about to call sprintf

218
00:13:47,800 --> 00:13:54,300
用缓冲区地址
with our buffer address

219
00:13:55,600 --> 00:13:59,700
用"%s"格式字符串
with the quote percent s quote format

220
00:14:00,133 --> 00:14:03,166
和非常大的字符串
 and with our very large string now

221
00:14:03,666 --> 00:14:06,099
让我们快速看一下
so let's take a look real quick

222
00:14:06,466 --> 00:14:10,999
首先，这是缓冲区如果我们看到RSP在哪里
 1st here's this buffer right so if we see where RSP is

223
00:14:11,366 --> 00:14:12,566
这是RSP
this is RSP

224
00:14:16,966 --> 00:14:19,166
这就是我们要写东西的地方
this is where we're going to write stuff

225
00:14:19,166 --> 00:14:22,766
从bb0到bc0
so we go from bb0 to bc0

226
00:14:22,700 --> 00:14:28,700
和之前一样，到返回地址的距离是0x10
so as before we were 0x10 away and where is our return address

227
00:14:28,900 --> 00:14:33,200
返回地址在RBP + 8
our return address um resides at RBP plus 8 

228
00:14:36,100 --> 00:14:40,600
如果你还记得我们对栈的讨论
so if you recall our discussion of the stack

229
00:14:40,733 --> 00:14:44,199
RBP指向栈的右边，也就是返回地址的前面
RBP points to the right side of the stack the kind of where right before the return address

230
00:14:45,400 --> 00:14:55,800
RBP + 8，(rbp)再右边一个就是返回值
RBP plus 8 just one further right that is the return value

231
00:14:56,100 --> 00:15:01,000
这当然指向这里的print_quoted+28
and that of course points us to print quoted plus 28 here

232
00:15:01,766 --> 00:15:04,899
我们将返回到print_quoted
we'll return back into print quoted

233
00:15:04,900 --> 00:15:05,700
好的
all right

234
00:15:06,666 --> 00:15:08,566
执行下一步
if we step over this

235
00:15:08,766 --> 00:15:10,766
你将会看到一些变化
you're about to see a couple of things changed

236
00:15:10,766 --> 00:15:13,333
最直接的是这个调用栈
the immediate thing is gonna be this back trace

237
00:15:13,533 --> 00:15:16,166
会完全乱掉
will go completely nuts

238
00:15:16,900 --> 00:15:18,200
因为整个
because the entire

239
00:15:18,200 --> 00:15:20,733
额，不是整个栈，而是栈上的一部分
well not the entire stack but a whole lot of the stack

240
00:15:20,866 --> 00:15:22,333
被A十六进制ASCII值41覆盖
was overwritten with A  which is in ASCII hex 41 

241
00:15:23,500 --> 00:15:29,400
如果看一下现在的结果
so if you look at their turnout just now 

242
00:15:29,900 --> 00:15:31,466
是十六进制41
it's hex 41

243
00:15:32,933 --> 00:15:36,399
这是个坏消息，因为如果我们继续前进
that's pretty bad news because if we keep stepping

244
00:15:36,933 --> 00:15:39,533
现在我们到了leave指令
so now we're stepping to the stack clean up

245
00:15:40,166 --> 00:15:42,866
执行返回，然后崩溃了
we're stepping through the return and we crash

246
00:15:42,866 --> 00:15:43,799
为什么我们会崩溃
why do we crash

247
00:15:43,800 --> 00:15:46,566
因为我们会尝试返回
because we try to return of course 

248
00:15:46,666 --> 00:15:49,166
Return将返回地址从堆栈中取出并跳转到那里
return pops the return address off the stack and goes there

249
00:15:49,300 --> 00:15:51,900
返回地址都是A
and the return address is all A's

250
00:15:52,300 --> 00:15:53,766
这是个坏消息
so that's pretty bad news

251
00:15:54,166 --> 00:15:57,599
显然访问0x41414141 41414141，程序会崩溃
obviously for all A's the program just crashes

252
00:15:57,733 --> 00:15:59,399
但是如果我们有一个win函数
but if we had a win function

253
00:15:59,800 --> 00:16:02,266
我们可以精心设计我们的输入
we could carefully craft our input

254
00:16:03,000 --> 00:16:08,300
它包含的不是全A而是win函数的地址
so that instead of all A's it contained the address of the win function

255
00:16:09,200 --> 00:16:10,000
太棒了
awesome

256
00:16:10,000 --> 00:16:14,600
这是最简单的堆栈溢出的例子
so this is the kind of the simplest stack overflow example

257
00:16:14,966 --> 00:16:18,166
或者不是最简单的，但你知道一个简单的
or not quite the simplest but you know a simple one

258
00:16:22,100 --> 00:16:27,500
在本模块的其余部分，我们将讨论其他可能发生的内存错误
in the rest of the module we'll go into other memory errors that can occur

259
00:16:27,600 --> 00:16:32,600
然后是为了防止利用而采取的缓解措施
and then the mitigations that are supposed to protect against their exploitation

260
00:16:33,000 --> 00:16:34,000
感谢收看
thanks for watching
