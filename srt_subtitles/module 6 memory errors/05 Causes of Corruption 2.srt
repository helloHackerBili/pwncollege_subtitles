1
00:00:00,766 --> 00:00:01,799
你好黑客
hello hackers

2
00:00:01,800 --> 00:00:03,566
欢迎回到PWN学院
welcome back to pwn college

3
00:00:03,566 --> 00:00:04,199
我是Yan
I'm Yan

4
00:00:04,200 --> 00:00:09,000
今天我们将继续讨论内存损坏问题
and today we're pushing on on the causes of corruption style memory errors

5
00:00:09,600 --> 00:00:12,933
我们在上个视频中讨论了经典的缓冲区溢出漏洞
we talked in last video about classic buffer overflows

6
00:00:13,000 --> 00:00:15,400
这集视频开始讲符号混淆
this video we'll start with signedness mixups

7
00:00:15,400 --> 00:00:17,400
看看我们能讲到哪里
and see how far we go

8
00:00:17,400 --> 00:00:21,500
好的，正如前面讲的缓冲区溢出的例子
all right as we saw in the previous example with a classic buffer overflow

9
00:00:21,600 --> 00:00:29,700
实际上就是小缓冲区却从输入中读取大量数据的的情况
there's really just a case of a small buffer large read from user input

10
00:00:30,366 --> 00:00:32,666
这是一个容易犯的错误
that's a simple mistake to make

11
00:00:32,600 --> 00:00:39,500
假设你是一个开发人员想写出安全的代码
so let's say you're a developer that wants to actually make something secure

12
00:00:39,500 --> 00:00:46,500
您可以在程序中进行大小检查
you might create a program that makes a check that has a size

13
00:00:46,500 --> 00:00:50,900
可以先让用户输入大小
you read in the size of the user input from the user

14
00:00:50,966 --> 00:00:54,799
然后检查实际输入的值的大小是否太大
then you actually check if the size is is too big

15
00:00:55,200 --> 00:00:57,733
如果太大就退出
exit if it's too big 

16
00:00:59,100 --> 00:01:05,200
否则你就读取用户指定大小的输入
otherwise you read the input of that size

17
00:01:06,266 --> 00:01:07,599
这怎么会出错呢？
so how can this be wrong

18
00:01:07,600 --> 00:01:10,300
由于很微妙的原因，这确实会出错
well this is wrong for a very subtle reason

19
00:01:10,500 --> 00:01:16,500
原因是标准C库使用无符号整数来指定大小
the subtle reason is that the standard C library uses unsigned integers to specify size

20
00:01:17,200 --> 00:01:21,700
read、memcmp、strcmp
 so the argument of read memcmp strcmp

21
00:01:21,966 --> 00:01:24,899
所有这些的大小参数
the size arguments of all of these

22
00:01:25,000 --> 00:01:29,100
还有很多其他类型被指定为伪类型，称为
and a lot of others are specified as a pseudotype called

23
00:01:29,700 --> 00:01:32,500
如果我们查一下手册页
 if we look up the man page 

24
00:01:32,800 --> 00:01:40,400
叫size_t. size_t是一个无符号整数
called size_t size_t is an unsigned integer

25
00:01:40,400 --> 00:01:45,100
但是默认的整数类型int、short、long等都是有符号整数
but the default integer types shortened long et cetera are signed

26
00:01:45,866 --> 00:01:47,299
这就产生了问题
and this causes problems

27
00:01:47,300 --> 00:01:50,533
为什么有问题？回忆一下补码
why do the cause problems well recall two's complement

28
00:01:51,100 --> 00:01:52,100
在补码中
in two's complement

29
00:01:52,100 --> 00:01:54,533
如果你不记得补码是什么
and if you don't remember what two's complement is

30
00:01:54,500 --> 00:01:57,900
或者你不能立刻想起它的含义
or don't immediately see the implications in your mind

31
00:01:58,000 --> 00:02:03,700
我会回去重新看pwn大学的汇编基础课程
I would go back and rewatch the assembly fundamental lecture in pwn college

32
00:02:04,300 --> 00:02:13,100
有符号和无符号变量的补码编码方式是一致的
but two's complement basically encodes signed and unsigned variables  in almost the same way

33
00:02:13,300 --> 00:02:21,700
具体是有符号还是无符号取决于如何使用
and it really just depends on how you are using these variables to or these values

34
00:02:21,800 --> 00:02:24,266
看你用的是有符号还是无符号
whether you're using them in a signed or an unsigned way

35
00:02:24,300 --> 00:02:26,800
但实际的存储值是一样的
but the actual storage is fairly the same

36
00:02:26,800 --> 00:02:28,966
所以0,12，等等
so 0 1 2 et cetera

37
00:02:28,966 --> 00:02:30,933
正数和补码
positive numbers and two's complement

38
00:02:31,100 --> 00:02:38,100
在一定界限下有符号整数和无符号整数的解析是一样的
up until some limit are the same between signed and unsigned interpretations

39
00:02:38,300 --> 00:02:43,700
开始变得危险的是负数的情况
but where things start getting dicey is in the negative number

40
00:02:43,700 --> 00:02:46,700
比如- 1的补码
so negative 1 stored in 2's complement

41
00:02:47,133 --> 00:02:51,699
等于32位整数的最大值
is equal to whatever the maximum sort of view of a 32 bit integer

42
00:02:52,500 --> 00:02:56,766
它等于2的32次方-1
 it's equal to two to the 32-1

43
00:02:56,766 --> 00:02:59,466
就是0x f f f f f f f f
and that is this ox f f f f f f f

44
00:02:59,600 --> 00:03:01,366
2的32次方-2
two to the 32-2

45
00:03:01,933 --> 00:03:05,333
这个f f f e等于-2，等等
this f f f f e is -2 and so on

46
00:03:05,300 --> 00:03:09,700
所以补码基本上是用
so two's complement is basically a way to

47
00:03:10,400 --> 00:03:18,500
一些最大的整数来表示负数
 overlap the very highest value numbers unsigned with negative numbers in the signed world

48
00:03:19,100 --> 00:03:24,300
这些数字的符号
and the signedness of these numbers only really

49
00:03:24,366 --> 00:03:26,733
在条件跳转期间非常重要
mostly matters during conditional jumps

50
00:03:27,866 --> 00:03:29,299
让我给你们举个例子
let me give you an example

51
00:03:29,733 --> 00:03:30,766
在这个具体案例中
in this specific case

52
00:03:30,766 --> 00:03:32,699
我们正在检查一个输入的大小是否大于16
we're checking if a size is greater than 16

53
00:03:32,766 --> 00:03:34,399
如果它大于16
and if it's greater than 16

54
00:03:34,966 --> 00:03:36,299
这在汇编中
this in assembly

55
00:03:36,300 --> 00:03:40,600
将导致跳转到exit指令中
this will cause some sort of a jump to happen to go to exit right

56
00:03:40,800 --> 00:03:42,500
这个跳转看起来可能是的这样的
this is what that jump might look like

57
00:03:42,500 --> 00:03:45,000
它可能会拿eax和16比较
it might compare EAX and 16

58
00:03:45,200 --> 00:03:49,700
如果你还记得，cmp会做减法，然后设置标志寄存器中的一些标志
and if you recall comp does with subtraction then sets a bunch of flags

59
00:03:50,100 --> 00:03:50,766
好的，然后
right and then

60
00:03:50,700 --> 00:03:54,200
条件跳转指令去检查这些标志来决定
the conditional jumps check these flags to decide 

61
00:03:54,266 --> 00:03:55,866
是否应该跳转
whether that jump should be taken or not

62
00:03:57,000 --> 00:04:02,100
被检查的标志决定
the flags that are checked determine 

63
00:04:02,500 --> 00:04:07,200
跳转是否关心符号
whether the jump cares about the sign or doesn't care about the sign

64
00:04:07,266 --> 00:04:09,533
因为有的指令关心符号，有的不关心
and this is there are different instructions that care about the sign versus not

65
00:04:10,200 --> 00:04:16,300
jae——当大于或等于时跳转
 and Jae jump above or equal or

66
00:04:16,366 --> 00:04:18,466
不好意思，这里应该用ja当大于时跳转
sorry this actually should just be jump above

67
00:04:18,466 --> 00:04:20,533
因为它只是检验它是否大于
because it's just checking if it's greater than

68
00:04:20,766 --> 00:04:22,366
但这不影响理解
um but you get the idea

69
00:04:22,566 --> 00:04:25,866
（jae）不关心符号
does not care about the sign

70
00:04:25,866 --> 00:04:28,599
英文above指的大于是不考虑符号的
above means an unsigned greater than

71
00:04:28,600 --> 00:04:31,400
这就是为什么用above表示无符号大于
that's how they call unsign greater than is above

72
00:04:31,600 --> 00:04:32,966
这是一个无符号比较
um it's an unsigned comparison

73
00:04:32,966 --> 00:04:35,666
这意味着如果EAX是0xffffffff
this means that if EAX is 0xffffffff

74
00:04:39,200 --> 00:04:50,200
这里的比较结果是：0xffffffff是大于16的
the condition that this jump will be predicated on is essentially that 0xffffffff is greater than 16

75
00:04:50,200 --> 00:04:52,533
这不是程序的本意
and it's not it is right

76
00:04:52,533 --> 00:04:54,366
但它会执行这个跳转
and it will take that jump 

77
00:04:54,366 --> 00:04:55,699
0xffffffff是一个非常大的数字
that's a very large number

78
00:04:55,700 --> 00:04:56,600
是肯定会跳转的
that jump will be taken

79
00:04:56,600 --> 00:04:57,533
相反
on the other hand

80
00:04:57,800 --> 00:05:00,500
如果跳转指令使用的是JGE
if the jump used is JGE

81
00:05:00,533 --> 00:05:02,533
当大于或等于的跳跃
jump of greater than or equal to

82
00:05:03,266 --> 00:05:06,333
这是JAE的有符号版
that is a signed version of JAE

83
00:05:06,333 --> 00:05:08,899
它检查CMP设置的（和jae检查的）不同标志
that checks different flags that are set by cmp

84
00:05:08,966 --> 00:05:10,733
CMP设置的标志还是那些
cmp still sets the same flags

85
00:05:10,900 --> 00:05:13,333
（cmp）它不管数据是有符号还是无符号
it doesn't matter if that data is signed or unsigned

86
00:05:13,800 --> 00:05:23,500
JGE会检查CMP设置的（和jae检查的）不同标志
but JGE will check different parts of the flags that are set

87
00:05:23,766 --> 00:05:24,566
而且
and

88
00:05:25,500 --> 00:05:29,900
FFFFFFF和16的比较
a comparison of fffffff and 16

89
00:05:29,900 --> 00:05:48,700
从语义上讲，会检查- 1是否大于16。- 1小于16。
will result in semanticly speaking checking at negative one is greater than 16. negative one is less than 16. 

90
00:05:48,733 --> 00:05:49,699
不会发生跳转。所以不会退出。即使传给read的大小真是非常非常大的0xffffffff
that jump will not be taken. so the exit will not occur. eventhough the size is past to read is 0xffffffff,which is very very large.

91
00:05:50,533 --> 00:05:52,299
好，我们来看看这段代码中使用了哪个
all right let's see which one is used in this code

92
00:05:52,300 --> 00:05:56,600
这对这个项目的安全性意味着什么
and the implication of that to the security of this program

93
00:05:56,600 --> 00:06:07,100
所以我在signedness.c中写了这个例子
so I wrote that example in a signedness.c here

94
00:06:08,400 --> 00:06:12,500
很简单，就像你们记得的那样
fairly straightforward as you remember

95
00:06:12,666 --> 00:06:14,099
我们来编译一下
so let's compile it

96
00:06:14,100 --> 00:06:17,766
同样，我不会使用栈保护器
and again I'm gonna use no stack protector

97
00:06:18,300 --> 00:06:21,400
我们会讲到这意味着什么等等
and we'll talk about what this means and and so forth

98
00:06:21,400 --> 00:06:22,200
然后我
and then I

99
00:06:26,500 --> 00:06:32,000
-o signedness signedness.c
dash o signedness signedness.c

100
00:06:32,500 --> 00:06:37,000
我们将在本模块后面的课程中讨论这个标志
so we'll talk about this flag in a later lecture in this module

101
00:06:37,133 --> 00:06:39,199
现在我们先忍一忍吧
for now let's just bear with it

102
00:06:39,200 --> 00:06:40,733
如果你执行signedness
so if you execute the signedness

103
00:06:40,866 --> 00:06:44,466
它会读取大小，然后
it asks of course it reads in the size and then

104
00:06:44,900 --> 00:06:46,500
如果我们用strace看一下
if we just strace it

105
00:06:47,366 --> 00:06:49,166
我们可以看到，如果我输入10
we see that if I read in 10

106
00:06:49,900 --> 00:06:53,700
然后它会从我的输入中读入10字节
then it'll read in 10 from my input right

107
00:06:54,500 --> 00:07:00,500
如果我提供10作为大小，它会读入10字节
if I provide 10 as my size it'll read 10

108
00:07:00,866 --> 00:07:03,966
如果我提供一个大于10的值
if I provide something bigger than 10

109
00:07:03,966 --> 00:07:06,099
它以退出代码1退出
it exits with an exit code 1

110
00:07:08,866 --> 00:07:09,933
我们怎么才能骗过它呢
so how can we fool this

111
00:07:09,933 --> 00:07:11,999
当然，就像我一直说的
well of course as I've been saying

112
00:07:12,000 --> 00:07:14,700
我们给它0xffffffff
we just give it 0x FFFF FFFF

113
00:07:16,666 --> 00:07:18,766
我当然可以把它打出来
I can of course type that out

114
00:07:18,766 --> 00:07:20,533
我可以输入0xffffffff
I can do 0xffffffff

115
00:07:20,933 --> 00:07:22,566
我不太确定
I don't I'm not actually sure about that

116
00:07:22,566 --> 00:07:24,266
但输入-1是肯定没错的
but I can always put negative one

117
00:07:24,466 --> 00:07:28,499
这实际上会把0xFFFFFFFF写到有符号size变量中
this actually will write ox F F F F F F F into my signed size

118
00:07:28,533 --> 00:07:32,999
因为它是有符号整型。但这并不总有效。
 because it's an signed int and this doesn't always work.  

119
00:07:32,900 --> 00:07:57,900
大量的读取，我们做的是读取0xffffffff。这并不总是成功的。
gigantic reads, so what we doing is  doing read of 0xffffffff. That doesn't always succed. 

120
00:07:57,966 --> 00:07:59,599
在内核中有特定的条件判断会让读取失败。
There are curtain conditions in the kernel where it will fail. 

121
00:07:59,733 --> 00:08:01,666
在调试器中它总是会失败。
in fact it will always fail in the debugger.

122
00:08:02,300 --> 00:08:03,266
但在这种情况，如果我输入一堆a，它就成功了，我得到了一个段错误
 but in this case it succeds if i just put a bunch of As, we see that I got a seg fault

123
00:08:05,100 --> 00:08:07,166
如果我在内核日志中查看发生了什么
if I look in my kernel log for what happened

124
00:08:15,566 --> 00:08:17,133
实际上，让我们
it well actually let's

125
00:08:17,133 --> 00:08:19,466
我们在GDB中做这个
let's do this in GDB but 

126
00:08:19,666 --> 00:08:20,899
我们必须要小心一点
we have to be a little bit careful

127
00:08:20,900 --> 00:08:24,000
我们来抓read和
so let's catch read and

128
00:08:24,466 --> 00:08:26,533
捕获系统调用读取
catch syscall read

129
00:08:27,266 --> 00:08:29,999
抱歉，gdb ./signedness
sorry GDB of the  signedness

130
00:08:30,266 --> 00:08:32,199
捕获系统调用read
catch syscall read

131
00:08:32,366 --> 00:08:33,266
好吧
alright

132
00:08:34,300 --> 00:08:36,900
我们运行，它开始第一次read
we run so this got 1st read

133
00:08:46,800 --> 00:08:47,733
这是恼人的（还没输size就退了）
that's annoying

134
00:08:54,500 --> 00:08:56,166
好吧，我回来了，很抱歉
all right I'm back sorry about that

135
00:08:56,166 --> 00:08:57,733
我暂停了视频
I paused the video

136
00:08:58,100 --> 00:09:00,900
弄清楚发生了什么
and figured out what was going on

137
00:09:00,900 --> 00:09:05,400
基本上是由于我使用的GDB catch point
basically I was using a catch point in GDB

138
00:09:05,400 --> 00:09:07,500
它用于系统调用，类似于断点
is like a break point for system calls

139
00:09:07,600 --> 00:09:08,766
这很棘手
it's very tricky

140
00:09:08,700 --> 00:09:12,900
当catch点被触发时，某些系统调用会表现得非常糟糕
there are certain system calls that act very badly when this occurs all right

141
00:09:13,600 --> 00:09:14,400
嗯
um

142
00:09:15,566 --> 00:09:19,566
当我启动了signedness后发生了什么
what happened when we launched this signedness

143
00:09:19,566 --> 00:09:21,899
如果我们代入- 1
right if we and put negative one

144
00:09:22,200 --> 00:09:27,133
然后我们输入一堆a，它就崩溃了
and then we put in a bunch of A's and it's crash right

145
00:09:28,300 --> 00:09:33,100
当然我们知道发生了什么
of course we know that what is happening is that

146
00:09:35,600 --> 00:09:41,000
这个检查没有做开发人员认为它会做的事情
this check is not doing what the developer us thought it would do

147
00:09:41,066 --> 00:09:44,066
- 1被解释为0xffffffff
it is negative one as being interpreted as 0xffffffff

148
00:09:45,666 --> 00:09:48,266
或者说- 1存储为0xffffffff
or negative one is stored as oxffffffff

149
00:09:48,800 --> 00:09:54,300
它仍然被解释为- 1，如果C认为这是符号比较
that is still interpreted as negative one because C sees this as a sign comparison

150
00:09:54,300 --> 00:10:00,300
我通过反汇编这个程序来证明
let me prove this to you by disassembling this binary

151
00:10:00,366 --> 00:10:02,933
如果我们找到main的位置
and if we go up to where main is

152
00:10:04,000 --> 00:10:08,466
我们可以看到对比和结果
and we see the comparison and the resulting

153
00:10:08,666 --> 00:10:10,099
这是调用exit
so here's the call to exit

154
00:10:10,100 --> 00:10:11,533
这是J L E
here is J L E

155
00:10:11,533 --> 00:10:14,366
它实际上是一个小于等于跳转
it's actually a jump of less than or equal to

156
00:10:14,500 --> 00:10:17,800
所以它比较了EAX和16
so it compares EAX against 16

157
00:10:18,500 --> 00:10:21,166
它做了一个小于等于的有符号比较跳转
and it does a jump of less than equal to a signed comparison

158
00:10:21,400 --> 00:10:28,100
符号比较中的EAX被视为- 1或者说
 and EAX in a signed comparison is treated as negative one or

159
00:10:28,133 --> 00:10:29,333
输入-1被解析成0xffffffff
 ox f f f F when we enter negative one

160
00:10:29,400 --> 00:10:34,800
但是当它后面被传递给read的第三个参数时
but when it's passed on to read later in in its 3rd argument

161
00:10:36,800 --> 00:10:41,900
它是0xffffffff，它被视为一个非常非常大的数字
 it is 0xffffffff which is treated as a very very large number

162
00:10:42,200 --> 00:10:49,800
很酷，所以这里的东西按预期运行，然后崩溃了
cool so here things run as expected and crashed

163
00:10:49,900 --> 00:10:50,566
但是当然
but of course

164
00:10:50,500 --> 00:10:54,200
上一节我们讲过有填充之类的
as we discussed in last video there's padding and stuff 

165
00:10:54,600 --> 00:11:00,700
因此，可能需要比您预期的更多的输入字节来导致崩溃
so it might be more than you expect input bytes is necessary to crash

166
00:11:00,766 --> 00:11:02,566
在gdb中，情况就不那么好了
in GDB things are not so nice 

167
00:11:03,300 --> 00:11:04,700
如果我在gdb中执行
in GDB if I run

168
00:11:05,300 --> 00:11:07,000
做作业需要你们知道这些
and you'll need to know this for the homework

169
00:11:07,000 --> 00:11:09,000
这就是为什么我要研究这个
that's why I'm going into this

170
00:11:09,066 --> 00:11:12,333
如果我运行并输入- 1，它就退出了
if I run and I say negative one it just exits

171
00:11:13,266 --> 00:11:14,966
为什么
why 

172
00:11:15,600 --> 00:11:16,500
很明显
obviously

173
00:11:17,600 --> 00:11:20,466
在GDB中，符号检查没有什么不同
signedness checks aren't different in GDB

174
00:11:20,500 --> 00:11:26,000
它正常退出，而不是带着错误码1退出
and it exited normally instead of exiting with an error code with error code one

175
00:11:26,600 --> 00:11:29,400
让我给你们展示一下如果我以1000为例会发生什么
let me show you what happens if I for example 1000

176
00:11:29,400 --> 00:11:31,300
它会以错误代码1退出
it'll exit with error code one

177
00:11:31,300 --> 00:11:32,866
但输入-1时我退出时错误码为0
so I exit with error code zero

178
00:11:32,800 --> 00:11:40,700
在GDB中发生的事情是一些疯狂的，我至今还没找到原因
what happens in GDB is some craziness  in that I've never actually managed to track down

179
00:11:40,966 --> 00:11:42,799
导致非常大的读取
causes very large reads

180
00:11:42,800 --> 00:11:47,400
读取0x FFFF FFFFF是一个非常大的读取，将会失败
and a read with 0x FFFF FFFFF is a very large read to fail

181
00:11:48,066 --> 00:11:49,966
所以它失败了，然后
so it just fails and then

182
00:11:50,366 --> 00:11:52,699
快乐地继续下去
happily goes on with his day

183
00:11:53,666 --> 00:11:56,266
我想在strace上也是一样的
I think it will be the same in strace

184
00:11:58,066 --> 00:11:59,333
如果是- 1
if I do negative one

185
00:11:59,333 --> 00:12:01,599
没有，它仍然可以正常工作
nope an strace it still works right

186
00:12:01,766 --> 00:12:03,699
所以你可以看到这个巨大的数字
so you can see the gigantic number

187
00:12:03,700 --> 00:12:09,200
也就是2的32次方 - 1
that is two to the 32 minus one that we tried to read

188
00:12:10,366 --> 00:12:11,166
不管怎样
anyways

189
00:12:12,800 --> 00:12:15,133
如果我用strace
and if I strace

190
00:12:16,700 --> 00:12:22,300
哦，有时候就失败了，我认为可能由于内存对齐
oh and then every once in a while  depending on memory alignment I think it does fail

191
00:12:22,766 --> 00:12:24,499
这非常非常烦人
so this is very very annoying

192
00:12:24,666 --> 00:12:25,799
又失败了
that failed again

193
00:12:27,133 --> 00:12:29,099
也许它真的失败了
uh maybe it actually fails

194
00:12:29,366 --> 00:12:30,766
哦，成功了
oh that succeeded

195
00:12:31,566 --> 00:12:32,366
哈
huh

196
00:12:32,600 --> 00:12:33,800
现在我们
boom and now we

197
00:12:34,200 --> 00:12:35,600
当然是段错误
of course segfault

198
00:12:35,933 --> 00:12:40,599
我想知道它在GDB上有时会不会成功
um I wonder if it'll succeed in GDB sometimes

199
00:12:44,533 --> 00:12:45,666
看来没那么幸运
you're not getting lucky for that

200
00:12:45,700 --> 00:12:48,066
不管怎样，如何在GDB中解决这个问题？
anyways how to fix this in GDB well

201
00:12:48,733 --> 00:12:50,333
别忘了你在调试器中
don't forget you're in a debugger

202
00:12:50,333 --> 00:12:54,133
你可以完全控制程序
you control the program completely 

203
00:12:55,566 --> 00:12:58,333
我写了一个简单的GDB脚本，它在读取时中断
I wrote a simple GDB script that breaks at read

204
00:12:59,266 --> 00:13:00,299
简单的设置
simply sets

205
00:13:00,366 --> 00:13:03,199
这是read系统调用的libc封装
and this is the read lib C wrapper for the system call

206
00:13:03,200 --> 00:13:05,133
所以这里没有问题
so there's no problem breaking there

207
00:13:05,566 --> 00:13:08,566
设置RDX为
sets RDX to 

208
00:13:10,100 --> 00:13:13,000
实际上用0xFFF来和RDX按位与
actually masks RDX with just 0xFFF 

209
00:13:13,333 --> 00:13:16,466
所以现在RDX的最大值是0xFFF
so the maximum that RDX can be now is 0xFFF

210
00:13:16,933 --> 00:13:18,733
我发现这是一个合理的尺寸
I found that this is a reasonable size

211
00:13:18,733 --> 00:13:21,299
如果我使用FFFF，那就太大了
if I do FFFF that's still too big

212
00:13:22,100 --> 00:13:26,600
如果我用这个shorted_read运行GDB
and if I run GDB with this shortened read

213
00:13:28,966 --> 00:13:30,733
一切正常
things work fine

214
00:13:30,800 --> 00:13:32,566
好吧，我跑了
all right so I run

215
00:13:33,100 --> 00:13:36,000
-1, 然后它接着读
negative one, it reads

216
00:13:37,333 --> 00:13:38,399
我输入大量A
put in my A's

217
00:13:38,533 --> 00:13:39,866
程序崩溃
program crashed

218
00:13:41,000 --> 00:13:43,600
让我们看看崩溃的地方
let's see  where we crashed

219
00:13:46,466 --> 00:13:46,999
好吧
okay

220
00:13:47,000 --> 00:13:49,266
让我们看看栈的顶部是什么
and let's see what's at the top of the stack

221
00:13:49,266 --> 00:13:50,366
我们现在在ret
so we currently at the ret

222
00:13:50,366 --> 00:13:51,933
我们正要返回到这里
and we were about to return to this

223
00:13:52,066 --> 00:13:54,999
41 41 41 41 41 41
41 41 41 41 41

224
00:13:55,000 --> 00:13:58,000
我们更改了返回地址
we overroad the return address 

225
00:13:58,666 --> 00:13:59,766
尽管从表面上看
even though on the face of it

226
00:14:00,100 --> 00:14:01,900
一眼望去
from a glance 

227
00:14:02,366 --> 00:14:04,399
这个程序看起来很安全
this program seemed pretty secure

228
00:14:05,300 --> 00:14:07,200
我再提一个
I'm going to mention one more

229
00:14:07,933 --> 00:14:12,166
原因很相似
cause of a very similar sort of of issue

230
00:14:12,533 --> 00:14:14,366
不会太深入
without going too far in depth

231
00:14:14,866 --> 00:14:17,366
这个原因就是整数溢出
and that cause is integer overflows

232
00:14:19,300 --> 00:14:23,100
整数溢出有点类似于符号混淆
integer overflows are kind of similar to signedness

233
00:14:24,133 --> 00:14:24,933
事实上
in the fact

234
00:14:24,933 --> 00:14:27,299
如果你有一个- 1
in the sense that if you have a negative one

235
00:14:27,733 --> 00:14:31,866
加上1得到0
and you add one to it you have a 0 

236
00:14:31,966 --> 00:14:33,799
同样- 1也等于
in the same way negative one is equivalent to

237
00:14:33,900 --> 00:14:38,200
0xffffffff 32位整数可以存储的最高数字
the highest number 0xffffffff 32 bit integer can store

238
00:14:39,566 --> 00:14:40,366
而且
and

239
00:14:40,900 --> 00:14:42,400
如果加1
if you add one to it

240
00:14:43,400 --> 00:14:44,766
这就变成了零
that becomes zero

241
00:14:44,766 --> 00:14:45,566
我们来看看
so let's see

242
00:14:45,700 --> 00:14:49,066
在这个程序中会发生什么
what happens in the context of this program

243
00:14:49,066 --> 00:14:50,533
这个程序使用了一个新函数
this program uses a new function

244
00:14:50,533 --> 00:14:51,799
你以前可能没见过
that you might not have seen before

245
00:14:51,800 --> 00:14:52,866
叫alloca
called alloca

246
00:14:52,966 --> 00:14:54,966
Alloca只是在栈上分配空间
alloca simply allocates space on the stack

247
00:14:55,500 --> 00:14:59,766
它用于动态大小的空间
 it is for dynamically sized space

248
00:14:59,766 --> 00:15:01,966
如果你用man alloca
so if you do man alloca

249
00:15:02,533 --> 00:15:04,733
你可以看到你给它一个大小
you can see you just pass it a size

250
00:15:06,300 --> 00:15:08,600
顺便说一下，这个大小是无符号的
and this size is unsigned by the way

251
00:15:08,600 --> 00:15:09,533
类似于前一个
similar to the previous one

252
00:15:09,533 --> 00:15:12,199
所以这里也可能有符号混淆
so there could be signedness mixups here as well

253
00:15:12,400 --> 00:15:17,400
但在这里要讲的问题是整数溢出
but in this specific case the problem is  an integer overflow

254
00:15:18,100 --> 00:15:21,900
如果你看这里发生了什么
and if you look at what happens here

255
00:15:22,066 --> 00:15:24,899
这个程序尝试以空标识输入的终止
this program tries to null terminate the input

256
00:15:24,933 --> 00:15:26,533
它所做的是从用户那里读取大小
so what it does is it reads the size from the user

257
00:15:28,133 --> 00:15:31,733
它在栈上分配size + 1
 it allocates size plus one on the stack 

258
00:15:32,300 --> 00:15:36,000
它从用户那里读取大小字节
and it reads in size bytes from the user

259
00:15:36,400 --> 00:15:38,133
然后写入用户输入的东西
 and then write it then whatever the user put in

260
00:15:38,133 --> 00:15:40,766
在用null终止它
 it nul terminates

261
00:15:40,700 --> 00:15:44,900
这是一种非常常见的模式，读入字符串然后以null结尾
this is a very common pattern to read in a string and null terminated

262
00:15:45,000 --> 00:15:49,333
对，但在这种情况下，这个大小加1有问题
right but in this case this size plus one has problems

263
00:15:49,400 --> 00:15:54,300
INT是一个32位整数
so consider INT is a 32 bit integer

264
00:15:54,366 --> 00:15:57,133
这个整数能取的最大值是多少
what's the maximum value that this integer can take

265
00:15:58,300 --> 00:16:03,700
当然最大值是2的32次方-1
of course the maximum value is two to the 32-1

266
00:16:04,066 --> 00:16:09,766
ox FF FF FF FF 4字节都是1
ox FF FF FF FF 4 bytes all ones

267
00:16:10,333 --> 00:16:11,966
当你增加它时会发生什么
and what happens when you increment that

268
00:16:11,966 --> 00:16:14,166
它会回滚成零
is it rolls back around to zero

269
00:16:14,166 --> 00:16:15,933
这被称为整数溢出
this is called an integer overflow

270
00:16:16,466 --> 00:16:19,499
同样的方法，如果你有一个0，然后减去1
the same way if you have a 0 and you subtract one to it

271
00:16:19,500 --> 00:16:21,000
你得到oxf FFF
you get oxf FFF

272
00:16:21,100 --> 00:16:23,100
这就是补码的工作原理
this is actually how 2's complement works

273
00:16:23,100 --> 00:16:24,933
当你把这些解释为有符号数字时
when you interpret these as sign numbers

274
00:16:24,933 --> 00:16:26,299
这是完全有道理的
this makes absolute sense

275
00:16:26,600 --> 00:16:28,900
这就是补码的优美之处
right this is the beauty of two's complement that 

276
00:16:29,100 --> 00:16:32,300
它智能地使用了整数溢出
it uses integer overflow intelligently

277
00:16:32,300 --> 00:16:36,000
但这在安全领域给我们带来了一个问题
but this causes a problem for us in the security realm in this case

278
00:16:36,100 --> 00:16:38,900
因为如果我在这里输入- 1
because if I enter negative 1 here

279
00:16:39,700 --> 00:16:41,300
这里执行size + 1
and this does size plus 1 

280
00:16:41,966 --> 00:16:46,599
这个alloca将分配0字节
this alloca will allocate the zero byte

281
00:16:47,300 --> 00:16:48,100
然后
and then

282
00:16:49,000 --> 00:16:52,400
我将读取0x F F F F F字节到栈
I will read 0x F F F F F F bytes onto the stack 

283
00:16:52,800 --> 00:16:58,100
当然，所有的东西都会爆炸，这很酷
and of course everything will explode which is awesome to see

284
00:16:58,133 --> 00:17:01,666
不管怎样，这都是个问题
and this is a problem despite any

285
00:17:01,666 --> 00:17:03,533
这里没有什么符号混淆之类的
there's no signedness mix up or anything

286
00:17:03,533 --> 00:17:04,699
所有都是无符号的
everything is unsigned

287
00:17:04,733 --> 00:17:07,166
这个size可能是一个无符号整型
this is probably an unsigned INT size

288
00:17:07,166 --> 00:17:08,999
它和size_t是一样的
it's the same as size_t

289
00:17:09,566 --> 00:17:10,933
我们来看看
so let's take a look at

290
00:17:11,766 --> 00:17:13,533
实践中会发生什么
what happens in practice

291
00:17:15,966 --> 00:17:18,133
我创建了另一个
I created another

292
00:17:20,366 --> 00:17:23,299
将其写入另一个程序int_overflow
wrote this into another program int_overflow

293
00:17:24,500 --> 00:17:28,400
我们来编译一下
let's compile that

294
00:17:32,266 --> 00:17:34,766
好的，我启动它
alright and I launch it

295
00:17:35,300 --> 00:17:37,600
它告诉我，它当然要等待用户输入大小
and it tells me of course it waits for the size

296
00:17:37,600 --> 00:17:38,866
我输入一个- 1
I put a negative one

297
00:17:39,333 --> 00:17:41,099
然后我输入一堆a
then I put in a bunch of A's

298
00:17:42,533 --> 00:17:43,599
然后崩溃了
and it crashed

299
00:17:43,766 --> 00:17:45,733
好吧，GDB也是一样
all right same sort of thing with GDB

300
00:17:45,733 --> 00:17:47,699
我当然还要用shorted_read
I of course have to shorten that read

301
00:17:48,866 --> 00:17:50,533
来执行整数溢出
do the INT overflow

302
00:17:50,800 --> 00:17:52,966
执行，输入- 1
I run it put in a negative one

303
00:17:53,300 --> 00:17:54,600
输入一堆a
put in a bunch of A's

304
00:18:04,100 --> 00:18:06,900
Ops，我们看看现在在哪条指令
ops let's see what instruction we're at

305
00:18:07,333 --> 00:18:09,966
啊，看，我写了太多A了
ah see I put in I think too many A's

306
00:18:09,966 --> 00:18:12,766
它实际上在空处崩溃了
and it actually crashed at the null termination

307
00:18:12,800 --> 00:18:14,200
这很有趣
which is interesting

308
00:18:14,966 --> 00:18:16,099
让我们再运行一遍
let's run it again

309
00:18:17,133 --> 00:18:20,499
- 1，我会少放一些A
negative one and I'll put in fewer A's

310
00:18:22,466 --> 00:18:24,299
崩溃地址还一样
same address for the crash

311
00:18:27,300 --> 00:18:28,800
输入更少的A
put in even fewer As

312
00:18:33,333 --> 00:18:34,099
现在发生了什么
now what's going on

313
00:18:34,100 --> 00:18:35,333
输入更少的A
putting even fewer As

314
00:18:43,133 --> 00:18:44,533
为什么会崩溃哦
why is it crash oh

315
00:18:44,766 --> 00:18:46,533
哈哈哈
hahahaha

316
00:18:50,933 --> 00:18:52,099
你发现在哪里崩溃了吗
do you see where it's crashing

317
00:18:52,100 --> 00:18:53,600
在这里崩溃了
it is crashing here

318
00:18:54,400 --> 00:18:59,300
因为我们在写
because we are writing something

319
00:19:00,000 --> 00:19:02,600
我们在把这里的0往这里写
we are writing this zero here

320
00:19:04,666 --> 00:19:07,666
这个目标地址在
and this zero is based on

321
00:19:09,166 --> 00:19:14,466
缓冲区的地址加上输入的字节数
the address of the buffer plus the amount of bytes read

322
00:19:14,800 --> 00:19:23,000
因此，我们显然覆盖了保存缓冲区地址的局部栈变量
so we apparently overwrote whatever local stacky variable was holding the address of the buffer

323
00:19:23,066 --> 00:19:24,466
然后崩溃了
and crash 

324
00:19:25,366 --> 00:19:28,199
但正如你所看到的，根据代码我们有一个缓冲区溢出
but as you can see we have a buffer overflow where according to the code

325
00:19:28,366 --> 00:19:31,333
粗略的看，应该是没有的
just glancing at the code there shouldn't be one

326
00:19:32,800 --> 00:19:35,700
对，但因为整数溢出导致存在一个缓冲区溢出
right but there is one because of a integer overflow

327
00:19:36,466 --> 00:19:37,266
很酷
cool

328
00:19:38,700 --> 00:19:41,266
我想还有一个我想说的
I think there's one more that I want to talk about

329
00:19:41,266 --> 00:19:43,199
非常相似，我简单提一下
very similar I'll just mention it briefly

330
00:19:43,200 --> 00:19:44,500
off by one错误
off by one errors

331
00:19:45,300 --> 00:19:49,400
考虑下面的情况
consider the following consider that

332
00:19:50,566 --> 00:19:52,733
从0开始的索引数组
the index array starting at zero

333
00:19:53,100 --> 00:19:57,133
通常是由于某种计算错误
and oftentimes due to whatever miscalculation

334
00:19:57,400 --> 00:20:01,200
或者出现了应该使用小于等于却用了小于的错误
or just an error like using a less than or equal to instead of a less than

335
00:20:01,700 --> 00:20:05,700
我们将访问数组的末尾
we will access the end of the array

336
00:20:06,300 --> 00:20:07,600
我们认为是数组的尽头
what we think is the end of the array

337
00:20:07,600 --> 00:20:08,766
但实际上在那之后是1字节
but it'll actually be one after that

338
00:20:09,300 --> 00:20:13,200
如果你有一个有三个元素的数组
 so if you have an array with three elements

339
00:20:14,400 --> 00:20:21,100
1 2和3，你访问的数组索引是3
1 2 and three and you access array indexed three

340
00:20:21,600 --> 00:20:23,566
实际这是数组的第4个元素
that is the 4th element of the array

341
00:20:23,866 --> 00:20:26,533
严格来说，这是一个off by one的错误
that is technically on off by one error

342
00:20:26,533 --> 00:20:30,266
这些off by one错误会导致小的溢出
and these off by one errors can cause small overflows

343
00:20:31,066 --> 00:20:33,899
而且这些小的溢出也会造成问题
and these small overflows can be problematic as well

344
00:20:34,100 --> 00:20:36,666
我们很快就会讲到
as you'll as we'll talk about shortly

345
00:20:37,300 --> 00:20:40,366
你们也会在作业中发现
 and as you'll discover in your homework

346
00:20:40,366 --> 00:20:41,166
好吧
all right

347
00:20:42,100 --> 00:20:43,666
这就是这个视频的内容
that's then of this video

348
00:20:44,200 --> 00:20:45,166
看到你
see you

349
00:20:46,366 --> 00:20:47,299
下一个视频
next videos
