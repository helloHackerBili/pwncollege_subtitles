1
00:00:00,866 --> 00:00:02,099
你好黑客
hello hackers

2
00:00:02,466 --> 00:00:03,899
欢迎来到PWN学院
welcome to pwn college

3
00:00:03,900 --> 00:00:07,266
我是Yan，在这个视频中，我们要讨论的是
I'm Yan and in this video we're going to talk about

4
00:00:07,266 --> 00:00:09,133
内存损坏的原因
the causes of memory corruptions

5
00:00:09,133 --> 00:00:12,333
这是内存错误模块的下一集视频
this is the next video in our memory errors module

6
00:00:12,300 --> 00:00:17,100
根据我们有多少时间来讨论三到四个原因
will cover three or four causes depending on how much time we have

7
00:00:18,300 --> 00:00:22,200
如果需要的话，我们会把它分成两个视频
if we need to we'll cut this into two videos but we'll see what happens

8
00:00:22,300 --> 00:00:23,700
我们来看看
so we're gonna go through

9
00:00:24,300 --> 00:00:29,000
几个非常常见的导致记忆损坏的原因
 a couple of very common causes of memory corruption

10
00:00:29,366 --> 00:00:31,766
这个列表并不详尽
this is list isn't exhaustive

11
00:00:32,300 --> 00:00:38,200
事实上，确实有缺失的原因，我们将在后面的模块中讨论
and in fact there are definite missing causes that we will cover in later modules

12
00:00:39,400 --> 00:00:41,366
让我们开始吧
but let's roll

13
00:00:41,700 --> 00:00:42,500
好吧
all right

14
00:00:43,700 --> 00:00:46,200
让我们从经典的缓冲区溢出开始
let's start with our classic buffer overflow

15
00:00:46,300 --> 00:00:49,500
这是我在上一模块中讨论过的
this is what I discussed in the last module

16
00:00:51,066 --> 00:00:52,333
不好意思，不是在上一模块
all right sorry not in the last module

17
00:00:52,333 --> 00:00:53,466
是在上个视频中
in the last video

18
00:00:53,533 --> 00:00:54,666
这很简单
it's just very simple

19
00:00:54,666 --> 00:00:56,399
缓冲区有大小
you have a buffer it has a size

20
00:00:56,500 --> 00:00:59,933
你在缓冲区中写入了太多的数据
and you write too much data into that buffer

21
00:00:59,933 --> 00:01:02,366
覆盖了它，从而攻击栈
and you override it and clobber the stack

22
00:01:02,666 --> 00:01:03,466
嗯
um

23
00:01:03,866 --> 00:01:07,199
这种情况经常发生，因为
this happens a depressing amount and it happens because

24
00:01:07,900 --> 00:01:11,966
C语言不隐式跟踪对象的大小
C does not implicitly track sizes of objects

25
00:01:12,300 --> 00:01:14,766
如果你想要注意大小，你必须
if you want to be careful about sizes you have to

26
00:01:15,000 --> 00:01:18,200
非常小心地在代码中添加校验
have checks all over your code to be extremely careful

27
00:01:18,200 --> 00:01:22,800
我们很容易忘记做这些校验
and it's very very easy to forget these checks

28
00:01:22,800 --> 00:01:28,500
我这里有一个最小的缓冲区溢出的例子
right so here I have the smallest possible example I think of a buffer overflow

29
00:01:28,700 --> 00:01:30,933
它在栈上有一个小缓冲区，16字节
which basically just has a small buffer on the stack of 16 bytes 

30
00:01:30,900 --> 00:01:36,000
我们用128字节的数据来溢出它
and we just overflow it with 128 bytes of data

31
00:01:36,766 --> 00:01:37,566
很简单
nice and simple

32
00:01:37,566 --> 00:01:42,133
这个程序绝对是有问题的
there's no world in which this program isn't buggy

33
00:01:42,900 --> 00:01:44,733
让我们来看看发生了什么
let's take a look at what happened

34
00:01:45,200 --> 00:01:48,300
好的，第一个我会过一遍完整利用流程
alright and the 1st one I'm going to run through full exploitation

35
00:01:48,300 --> 00:01:55,500
最终达到赢的目的
and to end all the way through to a kind of a win condition

36
00:01:56,300 --> 00:01:59,533
我们将（在下一模块）讨论代码注入等作为内存破坏利用的一部分
we'll talk about shell code injection and so forth as part of memory corruption exploits 

37
00:02:00,300 --> 00:02:06,600
在下一模块，把所有东西都拼起来
in the next module  actually in putting everything together

38
00:02:06,933 --> 00:02:11,466
但是现在让我们看一下这个最小的例子
but let's take a look at this minimal example for now

39
00:02:11,466 --> 00:02:13,099
我直接添加了这个win函数
I just added this win function

40
00:02:13,300 --> 00:02:18,200
这是我们在溢出后重定向到的函数
and this is where we will redirect code execution after our overflow

41
00:02:18,266 --> 00:02:20,566
好的，让我们再编译一次
alright let's compile this again

42
00:02:21,300 --> 00:02:27,400
在这个视频中，我编译时会关闭栈保护
for this video I'm compiling everything without what is called stack Protection

43
00:02:27,500 --> 00:02:31,800
这个模块后期会学习什么是栈保护
later this module you learn what stack Protection is

44
00:02:32,466 --> 00:02:34,366
我们来编译一下
so let's compile it

45
00:02:35,100 --> 00:02:39,400
关闭栈保护器
all right so no stack protector

46
00:02:39,700 --> 00:02:41,566
好，很容易
nice and and easy here

47
00:02:42,000 --> 00:02:45,866
我还会禁用位置无关的可执行文件(PIE)
I'm also gonna disable position independent executable

48
00:02:46,966 --> 00:02:49,133
这样我们就知道所有的地址在哪里
so that we know where all the addresses are

49
00:02:49,100 --> 00:02:52,000
为了演示的目的，简化了攻击流程
will just make it very simple for the purposes of this demo

50
00:02:52,700 --> 00:02:57,800
我们会编译buffer_overflow.c(演示程序)
and we'll compile buffer overflow that seems to buffer overflow

51
00:02:57,800 --> 00:03:00,000
好了，我们有了缓冲区溢出演示程序
alright so we have our buffer overflow

52
00:03:00,366 --> 00:03:04,199
如果我运行它，并给它很长的输入
if I run it and I give it a whole lot of input

53
00:03:05,500 --> 00:03:07,133
它会崩溃
it will crash

54
00:03:11,566 --> 00:03:12,666
如果我想看看在哪里崩溃的
well actually if I see where it crashed

55
00:03:13,166 --> 00:03:16,866
我可以看内核日志
 I look at my kernel log

56
00:03:17,100 --> 00:03:19,133
可以看到它在这里崩溃了
and I see that it crashed here

57
00:03:19,500 --> 00:03:21,766
如果我去反汇编
if I do disassemble

58
00:03:25,100 --> 00:03:31,000
看看崩溃点在哪里
and see where that point was

59
00:03:31,666 --> 00:03:35,099
它就在这里，在返回时崩溃了
it was right here it crashed at the return

60
00:03:35,500 --> 00:03:38,100
在函数返回时，崩溃了
at the return we have a crash

61
00:03:41,066 --> 00:03:43,333
我们执行了缓冲区溢出
we perform a buffer overflow

62
00:03:46,800 --> 00:03:51,300
我们利用了缓冲区溢出，这导致程序在返回时崩溃
we exploit a buffer overflow vulnerability and that caused the program to crash at the return

63
00:03:51,400 --> 00:03:53,966
让我们更详细地看看发生了什么
let's see what happened in a little bit more detail

64
00:03:54,700 --> 00:03:58,300
如果我们在GDB中运行它
if we run this in GDB

65
00:03:59,366 --> 00:04:00,499
执行了它
we run it of course

66
00:04:00,500 --> 00:04:03,366
它让我们输入一些东西，我们输一堆a
it asks us for some input and we put in a bunch of A's

67
00:04:04,533 --> 00:04:06,299
砰，它崩溃了
boom it crashed

68
00:04:07,566 --> 00:04:08,933
那就是它崩溃的地方
that's where it crashed

69
00:04:08,933 --> 00:04:10,166
正如右边（ppt上）预期的那样
as expected on the right

70
00:04:10,166 --> 00:04:10,966
当然
and of course

71
00:04:10,966 --> 00:04:13,299
ret指令从栈上弹出返回地址
return pops the return address off the stack

72
00:04:13,300 --> 00:04:15,166
让我们看看栈上有什么。都是A
let's see what's on the stack all A's

73
00:04:15,500 --> 00:04:17,566
所以栈上有一个缓冲区
so there's a buffer on the stack

74
00:04:17,566 --> 00:04:19,266
我们用大量A溢出了它
we overflowed it with all A's

75
00:04:19,266 --> 00:04:22,766
现在返回地址是AAAAAAAA
now there's excuse me the return address is all A's

76
00:04:22,866 --> 00:04:25,533
这是个坏消息
and it's bad news okay

77
00:04:28,133 --> 00:04:31,399
让我们利用这一点，当然这是我们的目标
let's exploit this right our goal of course

78
00:04:31,700 --> 00:04:33,533
既然我们控制了返回地址
since we control the return address and

79
00:04:33,533 --> 00:04:34,699
在程序返回时
the program is returning

80
00:04:34,700 --> 00:04:36,366
我们可以去到任何我们想去的地方
we can return anywhere we want

81
00:04:36,366 --> 00:04:38,166
这个函数是个很好的目标
and this function is nice enough

82
00:04:43,600 --> 00:04:46,400
这个程序是很好利用的
this program is nice in the sense that 

83
00:04:46,500 --> 00:04:47,700
因为我们加入了这个win函数
we have compiled this win function

84
00:04:48,066 --> 00:04:50,566
如果我们调用win函数，如果我们返回到win函数
if we call the win function if we just return here

85
00:04:50,733 --> 00:04:51,599
我们会得到目标flag
we'll get our flag

86
00:04:51,600 --> 00:04:55,266
当然这里我做了个假flag来演示
and I created of course a little fake flag for us to leak

87
00:04:56,666 --> 00:04:59,533
win函数在4011af
 alright the win function is at 4011af

88
00:05:00,366 --> 00:05:04,899
太棒了
 that's pretty awesome

89
00:05:06,100 --> 00:05:11,000
那么我们该如何利用内存破坏漏洞呢
so how do we do this for memory corruption exploits

90
00:05:11,000 --> 00:05:13,300
我强烈建议您使用pwntools
I highly recommend that you use pwntools

91
00:05:13,300 --> 00:05:15,000
一般情况下请使用pwntools
in general please use pwntools

92
00:05:15,000 --> 00:05:17,600
如果你在这门课上到目前为止一直没用pwntools
if you've been getting away without pwntools so far this course

93
00:05:17,600 --> 00:05:20,300
现在开始是切换到pwntools的时候了
this is probably the time to switch

94
00:05:20,466 --> 00:05:23,133
让我们用python写一个程序
so let's write a program that in python

95
00:05:25,066 --> 00:05:28,899
会和这个有漏洞的程序交互
 that will interact with this vulnerable program 

96
00:05:29,900 --> 00:05:32,900
并执行攻击
and perform the attack

97
00:05:33,600 --> 00:05:37,966
Pwntools有一些很棒的调试功能
pwntools has some awesome debugging capability

98
00:05:38,166 --> 00:05:40,366
它集成了GDB
it has GDB integration

99
00:05:40,400 --> 00:05:44,700
如果我们这样做启动我们的程序
if we do this to launch our program

100
00:05:44,700 --> 00:05:48,300
启动的进程和使用pwn.process启动的完全一样
it'll act exactly as a normal process if you have done pwn.process

101
00:05:48,400 --> 00:05:54,900
但它会启动一个调试器让我们与之交互
but it'll instead launch up a debugger for us to interact with

102
00:05:55,000 --> 00:05:57,100
这很完美
so this is pretty perfect

103
00:05:58,000 --> 00:06:00,100
我们有一个进程
we have a running process

104
00:06:00,400 --> 00:06:02,533
而且这个进程是在GDB中运行的
but that running process is running in GDB

105
00:06:02,500 --> 00:06:05,900
我们也可以访问GDB
and we also have access to oops to GDB

106
00:06:06,400 --> 00:06:11,400
好，我们来看看大概是什么样子
all right so let's just see what this looks like

107
00:06:12,000 --> 00:06:19,000
如果我们将A*128发送到这个进程
 if we send to this process the letter A times 128 times

108
00:06:22,266 --> 00:06:23,933
字节a，好了
byte a all right

109
00:06:24,533 --> 00:06:28,699
如果我们继续，我们会看到它崩溃了
and if we just continue here we'll see that it crashed

110
00:06:28,700 --> 00:06:31,000
不出所料，全是A
as expected all A's

111
00:06:31,000 --> 00:06:32,133
问题是我们要发送多少个A
so the question is how many A's do we have to send 

112
00:06:32,200 --> 00:06:37,100
回想一下，缓冲区有16字节长
recall that buffer was 16 bytes long

113
00:06:37,866 --> 00:06:39,466
让我再看一遍
let me take a look at it again

114
00:06:41,900 --> 00:06:44,066
哇，这输出的二进制，哦不
wow that's the binary oh no

115
00:06:47,566 --> 00:06:48,266
在这里
here it is

116
00:06:48,266 --> 00:06:50,666
16字节后就是返回地址？
16 bytes long is the return address right after that

117
00:06:50,666 --> 00:06:52,733
不是的。回想一下，栈上还有其他东西
well no.  recall there's other stuff on the stack

118
00:06:52,700 --> 00:06:55,800
还有保存的基指针等等
there's the saved base pointer et cetera et cetera et cetera

119
00:06:55,900 --> 00:07:02,500
所以这16字节之外的是什么？
so really what is somewhat farther than 16 bytes

120
00:07:02,533 --> 00:07:03,533
有内存对齐用的填充
there's padding

121
00:07:03,533 --> 00:07:05,766
有很多东西可以在那里
there's a lot of stuff that can be there

122
00:07:05,900 --> 00:07:08,966
所以我们要算出要写多少个A
so we have to figure out how many A's to write

123
00:07:08,966 --> 00:07:11,266
实际上，使用pwntools这非常简单
this is actually pretty easy with pwntools

124
00:07:11,266 --> 00:07:13,766
Pwntools有一种叫做循环模式的东西
pwntools has something called a cyclic pattern

125
00:07:13,766 --> 00:07:17,166
我们可以说给我一个128字节的循环模式
we can say give me a cyclic pattern of 128 bytes

126
00:07:17,533 --> 00:07:24,166
在这个循环模式中任何4字节都可以
and with this pattern any 4B in this pattern we can

127
00:07:24,300 --> 00:07:29,400
向pwntools查询这些4字节在循环模式中的位置
query pwntools and say where in the cyclic pattern are these 4B

128
00:07:29,400 --> 00:07:30,466
它会告诉我们
and it will tell us

129
00:07:30,466 --> 00:07:32,733
这就能准确地告诉我们
so this will tell us exactly 

130
00:07:33,766 --> 00:07:37,933
返回地址在我们的输入中的位置
how far into our input the return address gets over written

131
00:07:37,966 --> 00:07:41,099
让我们重新启动，退出这个GDB
so let's restart it here let's quit out of this GDB

132
00:07:41,733 --> 00:07:43,299
重启它
restart this guy

133
00:07:45,100 --> 00:07:48,800
我们现在不发送这个了
and we will now instead of sending this 

134
00:07:49,166 --> 00:07:51,933
我们将发送128字节的循环模式
we will send the cyclic pattern of 1 28 bytes

135
00:07:54,933 --> 00:07:56,133
我们继续
here let's continue

136
00:07:56,800 --> 00:08:00,133
它崩溃了，让我们看看RSP上有什么
it crashed and let's see what is at RSP

137
00:08:00,133 --> 00:08:02,333
你可以看到这是一些可打印的东西
okay you can see this is some other printable stuff

138
00:08:02,333 --> 00:08:03,766
这就是我们的循环模式
this is our cyclic pattern

139
00:08:05,866 --> 00:08:06,766
我们把它打印出来
let's just print it 

140
00:08:08,200 --> 00:08:13,300
这里是gaaa haaa iaaa
so here it's gaaa haaa iaaa 

141
00:08:16,133 --> 00:08:19,299
这些都是我们可以查询的循环模式值
this is all cyclic pattern values that we can look up

142
00:08:19,300 --> 00:08:21,666
我们取这个gaaa
so let's take this gaaa

143
00:08:22,300 --> 00:08:25,600
并查询pwntools
and query pwntools 

144
00:08:26,400 --> 00:08:28,900
我们可以调用cyclic_find
so we can do cyclic find

145
00:08:30,100 --> 00:08:36,900
来找出gaaa在循环模式中的位置，即24
to find where gaaa is in the cyclic pattern and says 24

146
00:08:37,133 --> 00:08:39,333
所以我们需要输入24字节
so we need to go 24 bytes in

147
00:08:40,000 --> 00:08:44,100
或者说输入24字节后开始覆盖返回地址
or 24 bytes into our input is when we start overriding the return address

148
00:08:44,100 --> 00:08:46,400
现在我们知道了。这很棒
so now we know this is great

149
00:08:46,866 --> 00:08:48,399
现在让我们来测试一下
now let's test this out

150
00:08:48,600 --> 00:08:50,200
让我们结束这个GDB
let's close out this GDB

151
00:08:50,366 --> 00:08:51,499
再运行一次
run this again

152
00:08:51,900 --> 00:08:54,366
现在当我们发送
and now when we send

153
00:08:55,100 --> 00:08:56,133
让我们送
let's send

154
00:08:57,566 --> 00:08:59,099
A*24
a times 24

155
00:09:02,466 --> 00:09:04,499
加上B*8
plus B times eight

156
00:09:04,900 --> 00:09:07,900
所以现在返回地址应该被B覆盖
so now we should override the return address with all Bs

157
00:09:08,200 --> 00:09:09,566
这里继续
set continue here

158
00:09:11,566 --> 00:09:12,966
没错，都是b
correct it's all Bs

159
00:09:12,966 --> 00:09:14,766
好了，现在我们准备进行最后一步
okay now we're ready for the final step

160
00:09:15,466 --> 00:09:17,199
让我们来看看
let's take a look

161
00:09:20,766 --> 00:09:24,533
win函数在bufferoverflow演示程序的哪里
where in the buffer overflow the win function is

162
00:09:25,066 --> 00:09:26,766
就在这里
it is right here

163
00:09:27,300 --> 00:09:30,066
我也可以反汇编它
I could have also disassembled it and whatever but

164
00:09:30,266 --> 00:09:32,866
这是4011af
here it is 4011af

165
00:09:34,866 --> 00:09:37,966
当然，pwntools有一个很好的
and of course pwntools has a nice

166
00:09:38,500 --> 00:09:40,266
函数来转换这个
function that will convert this

167
00:09:40,600 --> 00:09:41,866
把一个数字
a number

168
00:09:43,000 --> 00:09:48,000
转换成小端序或其他字节表示形式
into the byte representation in little endina or whatnot

169
00:09:48,100 --> 00:09:49,766
反正要和你的目标内存中的字节序一致
that you're currently exploiting in memories

170
00:09:50,200 --> 00:09:52,933
这就是它的样子
 so that this is what this will look like

171
00:09:53,266 --> 00:09:55,866
现在我们再次启动它
so now we launch it again

172
00:09:55,800 --> 00:09:58,200
哦，我忘了退出另一个GDB
oh I forgot to log out the other GDB

173
00:09:58,366 --> 00:10:00,599
好了，现在我们再次启动它
alright now we launch it again

174
00:10:01,700 --> 00:10:11,300
我们不发送b，而是发送这个
let's instead of the the Bs we'll send that

175
00:10:18,800 --> 00:10:20,100
好了继续
okay continue

176
00:10:21,766 --> 00:10:24,333
现在我们崩溃了，但是在其它地方崩溃的
and we crash that we crash somewhere else now

177
00:10:24,866 --> 00:10:28,399
我敢肯定是win执行后
so I will positive that what happened is that win ran

178
00:10:28,400 --> 00:10:29,466
win返回时
and then win returned

179
00:10:29,466 --> 00:10:31,399
win返回到某个非法位置，导致了崩溃
and then win return to some other crap that crashed

180
00:10:31,400 --> 00:10:35,000
因为我们覆盖了栈上太多数据
 because we over wrote too much stuff

181
00:10:35,100 --> 00:10:37,100
让我们来看看
so let's take a look

182
00:10:40,100 --> 00:10:43,400
我们可以用readall()读出所有的字节
we can just read all read out all the bytes

183
00:10:46,133 --> 00:10:47,533
pwntools你在开玩笑吗
are you joking pwntools

184
00:10:48,600 --> 00:10:51,666
哦，对，对，对，我们先退出GDB
oh right right right so let's log out a GDB

185
00:10:52,466 --> 00:10:53,366
就在这里
and here it is

186
00:10:53,566 --> 00:10:56,166
我们收到的字节是pwn_college{30880}
the bytes that we received were pwn college 30880

187
00:10:56,366 --> 00:10:59,133
那是假flag
that's the fake flag

188
00:10:59,133 --> 00:11:01,333
我只是创造了一个随机数
I I I created just a random number

189
00:11:01,466 --> 00:11:05,899
好吧，现在我们有了这些，我们可以
all right um now that we have all of this we can just

190
00:11:06,366 --> 00:11:08,466
创建了一个短的脚本
created a very short script

191
00:11:08,500 --> 00:11:12,300
我们所要做的就是用pwn.process替换GDB debug
all we have to do is replace GDB debug with pwn.process

192
00:11:12,700 --> 00:11:15,500
这将在GDB外启动进程
and this will relaunch things outside of GDB

193
00:11:16,000 --> 00:11:19,900
然后我们执行readall()
and then we do that read all

194
00:11:20,933 --> 00:11:23,099
回车，boom，我们的利用成功了
enter boom there's our exploit

195
00:11:23,333 --> 00:11:26,366
太棒了，这就是栈缓冲区溢出
awesome so that is the stack buffer overflow 

196
00:11:29,466 --> 00:11:32,466
非常经典的例子
the very classic example

197
00:11:32,466 --> 00:11:34,699
这节课就讲到这里
I'm actually going to end this video here

198
00:11:34,900 --> 00:11:37,200
我们再做一个视频
and we'll do another video for

199
00:11:37,600 --> 00:11:43,600
讲内存损坏的其余原因
the remaining causes of memory corruption

200
00:11:44,133 --> 00:11:45,199
待会儿见
see you very soon
