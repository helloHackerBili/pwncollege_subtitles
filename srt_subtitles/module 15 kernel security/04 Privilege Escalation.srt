1
00:00:01,133 --> 00:00:02,466
你好黑客
hello hackers

2
00:00:02,533 --> 00:00:07,399
欢迎收看PWN学院内核模块的第四个视频
welcome to the 4th video in the kernel module of pwn college

3
00:00:07,533 --> 00:00:10,333
今天我们将讨论权限提升
today we're going to talk about privilege escalation 

4
00:00:10,500 --> 00:00:14,900
通常，如果在内核漏洞的背景下讨论权限提升
usually if we talk about privilege escalation in the context of kernel vulnerabilities

5
00:00:15,000 --> 00:00:20,233
现在你将预览一下内核漏洞
you are going to get a preview of kernel vulnerabilities right now 

6
00:00:20,300 --> 00:00:21,733
但是在这个模块中
but in this module

7
00:00:21,800 --> 00:00:23,866
主要是学习一下内核交互
you'll really learn how to interact with the kernel

8
00:00:23,966 --> 00:00:26,099
理解
and understand

9
00:00:27,800 --> 00:00:32,133
并在不涉及内核漏洞的情况下，与内核模块交互
and mess with kernel modules themselves without necessarily vulnerabilities

10
00:00:32,200 --> 00:00:35,100
更像是逆向挑战题
more like reversing challenges let's say

11
00:00:35,500 --> 00:00:39,900
但不难想象漏洞是如何发生的
but it's not hard to imagine how vulnerabilities can happen

12
00:00:40,500 --> 00:00:44,033
每个内核模块都有两个非常重要的函数
there are two very important functions for every kernel module

13
00:00:44,166 --> 00:00:47,933
一个函数将数据从内核空间复制到用户空间
one function copies data to user space from kernel space 

14
00:00:48,900 --> 00:00:52,533
另一个函数从内核空间复制数据
and other function copies data from kernel space

15
00:00:55,166 --> 00:00:55,699
对不起
sorry 

16
00:00:56,066 --> 00:00:58,299
另一个是反方向的
another one goes the other way

17
00:00:58,400 --> 00:01:01,166
一个函数，数据从内核到用户空间
so one from kernel space to user space

18
00:01:01,266 --> 00:01:02,599
另一个，数据从用户空间到内核
and one from user space to kernel space

19
00:01:02,700 --> 00:01:04,033
这些就像memcpy之类的
and these are like memcopies 

20
00:01:04,400 --> 00:01:05,600
就像任何memcpy类函数一样
and like any memcpy

21
00:01:05,666 --> 00:01:07,166
就像任何内存数据传输功能一样
like any transfer memory 

22
00:01:07,700 --> 00:01:09,666
如果作者不细心
if authors aren't careful

23
00:01:10,933 --> 00:01:12,166
就可能出现漏洞
vulnerabilities can arise 

24
00:01:12,233 --> 00:01:14,866
而且这确实经常发生
and in fact do arise very frequently

25
00:01:18,800 --> 00:01:21,766
内核bug及其利用程序经常涌现
kernel bugs and their exploitations

26
00:01:21,900 --> 00:01:25,766
漏洞的最大来源之一是
one of the biggest sources of exploitable vulnerabilities

27
00:01:25,900 --> 00:01:27,733
例如Android内核
in the Android kernel for example 

28
00:01:27,833 --> 00:01:30,299
这很严重
it is a big deal

29
00:01:31,166 --> 00:01:33,199
这不仅仅是内存破坏
and it's not just memory corruption

30
00:01:33,533 --> 00:01:39,966
Linux内核中存在各种各样的漏洞
all sorts of vulnerability classes occur in the Linux kernel

31
00:01:40,200 --> 00:01:42,600
就和内核外一样
just like they occur outside of the Linux kernel

32
00:01:44,100 --> 00:01:47,700
假设你找到并要利用一个漏洞
so let's say you find and exploit this vulnerability

33
00:01:47,766 --> 00:01:48,766
你能用它做什么呢
what can you do with it

34
00:01:48,900 --> 00:01:53,200
经典的用途是提升正在运行的进程的特权
the classic is to elevate the privileges of your running process

35
00:01:53,233 --> 00:01:57,033
内核记录着每个进程的特权
every process has its privileges tracked by the kernel

36
00:01:57,366 --> 00:02:01,199
内核通过task_struct记录了一大堆信息
the kernel tracks a task struct with a whole lot of info

37
00:02:02,133 --> 00:02:05,199
包括调度优先级
including scheduling priority

38
00:02:05,266 --> 00:02:06,466
各种各样的东西
all sorts of stuff

39
00:02:07,266 --> 00:02:09,233
其中之一是
but one of the things that it stores is

40
00:02:09,366 --> 00:02:11,199
进程的凭据
the credentials of the process

41
00:02:11,366 --> 00:02:13,433
它存储在cred结构体中
and this is stored in a cred struct

42
00:02:13,666 --> 00:02:15,699
cred结构体中有
and the cred struct has among other things

43
00:02:15,766 --> 00:02:19,699
进程的euid
the effective user id of that process

44
00:02:22,066 --> 00:02:24,066
如果你把它改成0
and if you overwrite that with zero

45
00:02:24,900 --> 00:02:25,833
你就是root了
you are root 

46
00:02:26,166 --> 00:02:29,099
因为root的uid是0
because root has a uid of zero

47
00:02:29,933 --> 00:02:30,733
这就是你的目标
so that's your goal 

48
00:02:30,866 --> 00:02:32,333
要提权
to escalate your privileges

49
00:02:32,333 --> 00:02:34,199
你可以将自己的uid改成0
you can overwrite your uid with zero

50
00:02:34,266 --> 00:02:34,933
就好了
and you're good to go 

51
00:02:35,033 --> 00:02:36,866
除非系统开启了别的东西
unless there's some other stuff going on 

52
00:02:36,933 --> 00:02:38,533
比如seccomp等等
like seccomp and so forth

53
00:02:38,700 --> 00:02:40,866
我们以后会讨论如何逃逸seccomp
we'll talk about how to escape that in 

54
00:02:41,566 --> 00:02:45,133
等到我们把这个概念和越狱结合起来
when we put this concept together with jailbreaking 

55
00:02:45,700 --> 00:02:56,000
但先把重点放在提权到euid为root上
but for now let's focus on elevating your process's privileges to an effective user id of root

56
00:02:57,166 --> 00:02:57,766
实际上
it turns out

57
00:02:57,833 --> 00:03:03,799
不用在内存中翻找这个结构体，然后改这个字段
it's actually easier than crawling through memory to find a field in a structure and override it

58
00:03:04,000 --> 00:03:07,333
内核提供了两个很好的api
the kernel provides two very nice apis

59
00:03:07,566 --> 00:03:12,799
一个能把当前cred结构体对象替换成别的
one of them replaces our cred struct with some other cred struct

60
00:03:12,866 --> 00:03:13,899
另一个
and the other one

61
00:03:16,100 --> 00:03:18,633
能为我们创建一个cred结构体对象
can create a cred struct for us 

62
00:03:18,700 --> 00:03:20,133
就是这个prepare_kernel_cred
this prepare_kernel_cred 

63
00:03:20,233 --> 00:03:21,666
如果你给它传一个null
if you pass it a null

64
00:03:22,100 --> 00:03:24,166
给它传一个0作为参数
pass it a zero as the argument

65
00:03:24,400 --> 00:03:26,066
它会创建一个cred结构体对象
it will actually create a cred struct

66
00:03:26,200 --> 00:03:30,666
代表一个root创建的新会话
representing a new session created by root

67
00:03:32,766 --> 00:03:42,633
不受任何非root权限的污染等等
untainted of any non root privileges and so forth

68
00:03:42,700 --> 00:03:43,300
很好
it's great 

69
00:03:43,433 --> 00:03:51,199
所以如果传入0，它就创建一个全0的对象
so prepare_kernel_cred will create this structure with all zeros where if you pass a zero

70
00:03:51,266 --> 00:03:59,499
再commit_creds启用它
and then commit_creds will set it as the cred structure of our struct

71
00:04:00,533 --> 00:04:01,899
所以我们只要执行
and so all we have to run 

72
00:04:02,266 --> 00:04:04,066
为了获得root权限
in order to achieve root access

73
00:04:04,500 --> 00:04:06,166
前提是我们能在内核中执行代码
once we have code execution in the kernel 

74
00:04:07,366 --> 00:04:08,099
只要执行它
is this 

75
00:04:13,300 --> 00:04:17,566
我们来看看如何做到这一点
let's take a look at how we can do that

76
00:04:17,633 --> 00:04:21,699
我准备了一个示例模块
i actually have a demo module for us

77
00:04:24,700 --> 00:04:27,533
这个示例模块在pwnkernel中
and that demo module is in pwnkernel

78
00:04:28,900 --> 00:04:31,466
它是make_root.c
and it is make_root.c 

79
00:04:31,633 --> 00:04:32,866
它是一个非常简单的模块
it's a very simple module

80
00:04:32,933 --> 00:04:36,366
它在/proc下创建一个设备文件
it creates a device in /proc 

81
00:04:36,733 --> 00:04:40,933
是/proc/pwn.college-root
it's ?? /proc/pwn.college-root

82
00:04:41,800 --> 00:04:44,666
它为该设备文件注册了一堆操作函数
it registers a bunch of operations for that device

83
00:04:45,100 --> 00:04:47,000
一眼能看到读和写的
you can see immediately read and write

84
00:04:48,133 --> 00:04:48,899
它们什么都不做
they don't do anything 

85
00:04:48,966 --> 00:04:50,999
它们就返回一个无效参数
they just return a invalid argument

86
00:04:51,033 --> 00:04:51,966
EINVAL
EINVAL

87
00:04:53,700 --> 00:04:57,100
它注册了这个ioctl处理程序
and it registers this ioctl handler 

88
00:04:57,266 --> 00:04:58,533
这个ioctl处理程序
and then the ioctl handler 

89
00:04:58,933 --> 00:04:59,766
我们可以看到
we can see that

90
00:04:59,866 --> 00:05:03,633
如果我们ioctl_num传的PWN
if we used an ioctl_num of PWN

91
00:05:03,733 --> 00:05:06,133
PWN定义在这里
and PWN is defined up here

92
00:05:07,866 --> 00:05:10,166
我们马上就会知道它是多少
and we'll figure out what it is in a second

93
00:05:10,200 --> 00:05:13,133
它是一个宏定义的数
it's some macro defined number 

94
00:05:13,533 --> 00:05:17,866
另一个参数为13371337
and a parameter of 13371337

95
00:05:20,066 --> 00:05:22,299
它会打一条日志，说要给我们root权限
it will log that it's granting us root access

96
00:05:22,366 --> 00:05:24,133
然后给我们root权限
and then grant us root access 

97
00:05:24,266 --> 00:05:25,166
这太棒了
this is great 

98
00:05:26,533 --> 00:05:32,166
我们要创建一个程序
so we need to create a program

99
00:05:32,900 --> 00:05:35,633
因为这要在程序中完成
because this will need to be done from inside a program

100
00:05:35,733 --> 00:05:39,899
我们要创建一个程序，它会open这个文件
we need to create a program that opens this file

101
00:05:41,400 --> 00:05:43,233
/proc/pwn.college-root
/proc/pwn.college-root 

102
00:05:43,533 --> 00:05:48,899
然后用正确的ioctl_num和参数，触发ioctl处理程序
and triggers the ioctl with the correct ioctl number and the correct ioctl parameter

103
00:05:49,166 --> 00:05:52,933
然后这个进程就会神奇地变成root
and then that process will magically become root

104
00:05:53,266 --> 00:05:54,499
非常令人兴奋
it's very exciting

105
00:05:54,500 --> 00:05:55,800
我们来写这个程序
so let's write it

106
00:05:57,466 --> 00:05:59,099
写这里吧
actually let's write it here

107
00:06:02,666 --> 00:06:03,466
好的
okay

108
00:06:04,766 --> 00:06:05,866
首先
so first of all 

109
00:06:06,100 --> 00:06:11,700
我们要打开/proc
we want to open proc

110
00:06:12,766 --> 00:06:15,999
我们先启动这个内核，确保文件名正确
let's launch this and make sure that we have the file name correct

111
00:06:24,133 --> 00:06:24,933
好的
okay

112
00:06:25,566 --> 00:06:27,133
加载这个模块
we have this loaded

113
00:06:29,566 --> 00:06:30,399
这个设备文件在这
here it is 

114
00:06:30,900 --> 00:06:37,800
我们以只读模式打开它
so we're gonna open this in read only mode 

115
00:06:38,200 --> 00:06:40,766
然后我们调用ioctl
and we are going to run our ioctl

116
00:06:42,600 --> 00:06:47,666
我们断言，fd大于0
let's actually assert that fd is greater than 0 

117
00:06:47,766 --> 00:06:49,433
确保能正常打开文件
that it opened correctly 

118
00:06:49,966 --> 00:06:52,266
为此需要包含assert.h
need to include assert.h for this 

119
00:06:52,366 --> 00:06:52,666
好的
okay

120
00:06:53,800 --> 00:06:59,066
我们用这个文件描述符，还有一些参数
we run ioctl on that file descriptor with some parameter

121
00:06:59,133 --> 00:06:59,933
我们不知道这里是什么
we don't know what this is 

122
00:07:00,033 --> 00:07:00,899
这里是PWN
this is PWN

123
00:07:00,966 --> 00:07:06,533
我们要逆向内核模块来找出它
we'll need to reverse engineer the kernel module to understand what it is 

124
00:07:06,633 --> 00:07:09,599
还有0x13371337
and 0x13371337

125
00:07:11,900 --> 00:07:12,700
然后
and then

126
00:07:14,200 --> 00:07:15,233
我们就应该是root了
we should be root

127
00:07:15,566 --> 00:07:17,599
然后我们输出
so then we wanted to printf

128
00:07:26,766 --> 00:07:28,533
执行ioctl前也输出一下
let's do the same thing for before

129
00:07:29,966 --> 00:07:31,899
好的，我们看看会发生什么
okay let's see what happens

130
00:07:34,166 --> 00:07:36,833
执行前，它应该就是开始的用户
so before it should be whatever user we start out as 

131
00:07:37,033 --> 00:07:38,699
执行后，一切正常的话
after if we did everything right

132
00:07:38,733 --> 00:07:39,966
这应该是root
this should be root

133
00:07:41,666 --> 00:07:43,233
我们以静态链接的方式编译它
we want to compile this statically 

134
00:07:43,300 --> 00:07:46,366
这个小系统中，没有动态链接库
again there are no libraries in our minimized system here

135
00:07:50,533 --> 00:07:52,566
当然这里没定义PWN
of course PWN is undeclared 

136
00:07:52,800 --> 00:07:54,433
我们来找一下它是多少
so let's figure out what that is 

137
00:07:54,900 --> 00:07:59,933
这是我们的内核模块
so we have our kernel module

138
00:08:00,400 --> 00:08:03,700
它实际上编译到这里了
it is actually compiled in here 

139
00:08:03,833 --> 00:08:05,733
make_root.ko
make_root.ko

140
00:08:06,533 --> 00:08:08,799
这是我们的内核模块本身
this is our the kernel module itself

141
00:08:09,133 --> 00:08:10,166
它只是个elf文件
it's just an elf 

142
00:08:10,666 --> 00:08:14,599
这意味着你可以objdump -d它
that means you can objdump -d it

143
00:08:14,800 --> 00:08:17,633
或用binary ninja或其他工具打开它
or open it up in binary ninja or any other tool 

144
00:08:19,000 --> 00:08:22,700
如果我们看看device_ioctl
and if we look at device_ioctl

145
00:08:24,100 --> 00:08:27,900
我们看到它与7001比较
we see that it compares against 7001 

146
00:08:28,066 --> 00:08:29,533
用ebx比的
and compares ebx

147
00:08:29,966 --> 00:08:31,333
ebx来自esi
ebx comes from esi

148
00:08:31,500 --> 00:08:33,033
esi是第二个参数
esi is the second argument 

149
00:08:33,700 --> 00:08:36,000
欧了，7001就是我们需要的
boom 7001 is what we need

150
00:08:39,733 --> 00:08:40,566
编译
compile 

151
00:08:41,100 --> 00:08:42,100
现在就好了
now it worked 

152
00:08:42,800 --> 00:08:43,933
这是我们的attack
there's our attack 

153
00:08:44,400 --> 00:08:47,600
现在我们切到ctf用户
so now let's become the ctf user 

154
00:08:47,666 --> 00:08:48,899
现在我们是ctf用户
now we're the ctf user 

155
00:08:49,433 --> 00:08:50,033
当然
of course 

156
00:08:50,166 --> 00:08:56,733
ctf主目录挂载了系统的主目录
ctf home directory has my home directory of my system mounted 

157
00:08:57,066 --> 00:08:58,866
attck在这儿
here it is attack

158
00:09:00,866 --> 00:09:04,566
之前是1000，之后是0
before 1000 after 0 

159
00:09:05,266 --> 00:09:06,666
特权升级了
privilege escalation

160
00:09:07,366 --> 00:09:08,166
所以
so

161
00:09:08,700 --> 00:09:12,300
我们快速看一下我们可以用它做什么
let's take a look real quick at what we can do with this 

162
00:09:12,433 --> 00:09:17,099
显然，在此之后，我们可以读取flag
obviously after this we can read out the flag file

163
00:09:17,166 --> 00:09:19,233
或者我们用execl
or we use the execl 

164
00:09:19,366 --> 00:09:21,733
一个libc函数，封装了execve
a libc function to wrap around execve 

165
00:09:21,966 --> 00:09:23,666
来执行/bin/sh
to execute /bin/sh

166
00:09:25,300 --> 00:09:31,566
因为prepare_cred_struct(0)
since prepare_cred_struct null

167
00:09:31,733 --> 00:09:33,566
创造了一个
creates an authentic of a full 

168
00:09:33,666 --> 00:09:35,233
一切都是零
everything is zeros

169
00:09:35,600 --> 00:09:36,566
ruid是0
the real user id

170
00:09:36,566 --> 00:09:37,766
euid是0
the effective user id

171
00:09:37,866 --> 00:09:39,233
所以/bin/sh可以正常工作
/bin/sh works just fine 

172
00:09:39,333 --> 00:09:40,599
特权不会降低
it won't drop privileges

173
00:09:43,966 --> 00:09:45,399
这是argv
so this is argv

174
00:09:46,333 --> 00:09:49,833
这是要运行的二进制文件
this is the binary to run 

175
00:09:50,366 --> 00:09:52,799
这是参数0
this is argv 1 argv 0 sorry 

176
00:09:52,900 --> 00:09:53,833
参数1是null
argv 1 is null 

177
00:09:53,866 --> 00:09:55,199
就是启动一个/bin/sh
just runs /bin/sh 

178
00:09:55,566 --> 00:09:56,399
编译
compile 

179
00:09:57,166 --> 00:09:57,699
运行
run

180
00:09:57,966 --> 00:09:58,866
成了
boom

181
00:10:01,766 --> 00:10:02,966
我们拿到了flag
we got the flag 

182
00:10:03,933 --> 00:10:04,833
好了
there we go 

183
00:10:05,466 --> 00:10:15,433
我们看了这个make_root.c模块
we looked at this make_root.c module 

184
00:10:15,900 --> 00:10:22,566
找到了触发这种情况的方法
and figured out how to trigger this condition

185
00:10:22,900 --> 00:10:25,300
写了一个attack.c
and wrote an attack.c

186
00:10:25,566 --> 00:10:27,066
它触发了这个情况
that triggers the condition 

187
00:10:27,433 --> 00:10:32,499
调用了，使用ioctl
calls causes using this ioctl

188
00:10:32,600 --> 00:10:36,233
使commit_creds(prepare_kernel_cred(0))被调用了
the commit_cred prepare_cred to be called 

189
00:10:36,533 --> 00:10:37,333
就成了
and boom

190
00:10:37,400 --> 00:10:38,333
你可以想象
you can imagine 

191
00:10:39,133 --> 00:10:43,366
你将来可能会在内核中触发内存破坏
that you might in the future trigger memory corruption in the kernel 

192
00:10:43,600 --> 00:10:46,266
注入调用这个的代码
and be able to inject code that calls this

193
00:10:49,766 --> 00:10:52,666
那么有哪些注意事项呢
so what are some complications 

194
00:10:52,766 --> 00:10:53,166
好吧
well

195
00:10:54,066 --> 00:10:57,766
如果你要在shellcode中调用这两个函数
if you have to provide shellcode for example that triggers this

196
00:10:57,866 --> 00:10:58,699
你需要知道
you need to understand 

197
00:10:58,766 --> 00:11:04,633
commit_creds和prepare_kernel_cred在内存的哪里
where commit_cred and prepare_kernel_cred is in memory

198
00:11:07,133 --> 00:11:10,533
现代内核默认启用了ASLR
modern kernels with default settings have ASLR 

199
00:11:10,833 --> 00:11:12,199
叫KASLR
it's called KASLR

200
00:11:12,400 --> 00:11:13,866
内核中的ASLR
ASLR in the kernel

201
00:11:15,200 --> 00:11:17,833
所以它们不会被映射到可预测的位置
and so they won't be mapped at predictable locations

202
00:11:17,933 --> 00:11:22,733
但这里的题目中关闭了KASLR
but these intro challenges have KASLR disabled 

203
00:11:22,966 --> 00:11:23,966
还有老的内核
and older kernels 

204
00:11:24,166 --> 00:11:29,066
例如，许多嵌入式设备也禁用了KASLR
such as many of those embedded devices have KASLR disabled as well

205
00:11:30,366 --> 00:11:34,733
有一个文件叫做/proc/kallsyms
and there's a file called /proc/kallsyms

206
00:11:34,966 --> 00:11:39,533
实际上，大多数情况都没它的访问权限
it is realistically mostly blocked off 

207
00:11:39,633 --> 00:11:41,099
除非你有root权限
unless you have root access

208
00:11:41,533 --> 00:11:43,899
但这取决于具体情况
but depending on the scenario 

209
00:11:44,000 --> 00:11:45,233
你可能有root访问权限
you might have root access

210
00:11:45,366 --> 00:11:46,799
并在攻击内核
and be attacking the kernel 

211
00:11:47,400 --> 00:11:55,000
/proc/kallsyms有所有符号的地址
/proc/kallsyms has the locations of all of the symbols

212
00:11:55,133 --> 00:11:56,533
内核中的所有函数
all the functions in the kernel 

213
00:11:56,766 --> 00:11:59,299
包括我们刚刚加载的模块
including actually our module that we just loaded

214
00:11:59,500 --> 00:12:00,300
这很酷
which is really cool

215
00:12:00,533 --> 00:12:05,799
我们找一下prepare_kernel_cred
but let's grep for prepare_kernel_cred 

216
00:12:06,266 --> 00:12:07,633
在这儿
boom there

217
00:12:07,766 --> 00:12:09,499
这是prepare_kernel_cred的地址
that's the address of prepare_kernel_cred

218
00:12:09,733 --> 00:12:11,399
这是commit_cred的地址
and that's the address of commit_cred

219
00:12:11,933 --> 00:12:12,866
剩下的你们就知道了
and the rest you know 

220
00:12:13,100 --> 00:12:13,966
你知道该怎么做
you know how to do

221
00:12:14,066 --> 00:12:15,633
你在用户空间都做过了
you have done this in user space

222
00:12:15,800 --> 00:12:18,433
内核空间并没有那么特殊
kernel space is not that special 

223
00:12:19,100 --> 00:12:22,500
另外，我还展示过了如何调试内核
otherwise i showed you how to debug kernel 

224
00:12:22,566 --> 00:12:26,199
如果你开启了调试选项
so if you have debugging enabled

225
00:12:27,933 --> 00:12:28,933
在qemu中开启
you know in qemu

226
00:12:29,100 --> 00:12:33,133
你可以附加进来，并搜索内存
you can attach and search around memory and so forth 

227
00:12:33,300 --> 00:12:35,133
否则，你需要一个信息泄露漏洞
otherwise you will need a leak 

228
00:12:35,366 --> 00:12:37,899
这和用户空间aslr的一样
it's the same problem as user space aslr

229
00:12:38,533 --> 00:12:39,999
事实上
in fact on this note

230
00:12:41,900 --> 00:12:46,233
内核有很多针对攻击的保护机制
the kernel has a lot of mitigations against attacks

231
00:12:46,566 --> 00:12:49,333
我们将在以后的模块中讨论这些
and we'll talk about those in a future module

232
00:12:49,433 --> 00:12:50,933
等我们把这些都放到一起
when we talk about putting together

233
00:12:51,600 --> 00:12:59,400
所有你知道并掌握的漏洞
all of the vulnerability classes that you know and have mastered 

234
00:12:59,666 --> 00:13:02,799
以及内核空间中的操作
together with operations in kernel space

235
00:13:03,400 --> 00:13:07,533
在我们的第二个组合模块 toddler2 中
in our second putting it all together module toddler 2 

236
00:13:07,700 --> 00:13:08,433
在那之前
until then 

237
00:13:08,833 --> 00:13:10,966
好好享受这个内核介绍模块吧
enjoy these introductory kernel modules

238
00:13:11,066 --> 00:13:13,166
我们尽量减轻你的负担
we try to give you a lighter load with them 

239
00:13:13,633 --> 00:13:15,499
希望我们成功了
hopefully we succeeded

240
00:13:15,700 --> 00:13:18,900
并且你可以专注于理解内核
and you can focus on truly understanding the kernel

241
00:13:19,066 --> 00:13:20,566
以及如何与之互动
and how to interact with it 

242
00:13:20,733 --> 00:13:21,299
祝你好运
good luck

