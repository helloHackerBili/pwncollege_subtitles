1
00:00:00,666 --> 00:00:01,866
你好黑客
hello hackers

2
00:00:02,066 --> 00:00:05,966
欢迎来到pwn学院高级开发模块的另一个视频
welcome to another video in Advanced Exploitation Module of pwn College

3
00:00:06,166 --> 00:00:07,966
今天我们要讲的是
today we're going to be talking about

4
00:00:08,100 --> 00:00:10,100
逃离seccomp
escaping seccomp

5
00:00:10,400 --> 00:00:11,466
如果你还记得的话
if you recall

6
00:00:13,100 --> 00:00:17,100
Seccomp是一种内核沙盒技术
seccomp is a kernel sandboxing technique

7
00:00:18,366 --> 00:00:21,933
它会限制你能运行的系统调用的类型
that limits the types of system calls you can run 

8
00:00:22,100 --> 00:00:27,833
并限制系统调用的参数
and limits the arguments to these syscalls 

9
00:00:28,500 --> 00:00:32,466
基本上它可以让你创建安全的沙盒
and basically it lets you create secure sandboxes 

10
00:00:32,600 --> 00:00:36,633
如果你正确地创建了seccomp沙盒
if you create a seccomp sandbox properly

11
00:00:36,866 --> 00:00:39,266
正如我在沙盒模块中提到的那样
as I mentioned in the sandboxing module

12
00:00:39,966 --> 00:00:42,399
它可以是无法逃脱的
it can be impossible to break out of

13
00:00:42,766 --> 00:00:49,466
但你还能用一些系统调用与内核模块交互
except for you can still interact in all of these modules with certain system calls

14
00:00:49,600 --> 00:00:52,800
如果你触发了内核中的漏洞
and if you trigger vulnerabilities in the kernel

15
00:00:53,533 --> 00:00:57,466
你就可以逃离seccomp沙盒
you can escape the seccomp sandbox

16
00:00:58,066 --> 00:00:59,533
正如我在那个模块中提到的
as I mentioned in that module 

17
00:00:59,666 --> 00:01:05,666
有很多沙盒可以逃脱
there's some a good amount of sandbox escapes from

18
00:01:05,800 --> 00:01:09,400
例如Chrome沙盒，其中使用seccomp
for example the Chrome sandbox which uses among other things seccomp

19
00:01:09,566 --> 00:01:12,533
在这个Git仓库中讨论了它
that are discussed at this Git repository 

20
00:01:12,533 --> 00:01:16,999
但在沙盒模块时
but I at the time doing the sandboxing module

21
00:01:17,000 --> 00:01:19,500
我说过，把它留到内核漏洞利用模块
I said just hold on for the kernel exploitation module

22
00:01:19,500 --> 00:01:22,100
当时我们没讲这么深
we never made it that far in kernel exploitation

23
00:01:22,100 --> 00:01:23,866
因为我们要缩短那个模块
because we had to just shorten that module

24
00:01:23,900 --> 00:01:26,866
但现在我们已经走到了这一步了
but now we are making it that far

25
00:01:27,366 --> 00:01:33,466
那么，为什么可以使用内核漏洞来逃离seccomp呢
so why can you escape seccomp using kernel vulnerabilities 

26
00:01:33,700 --> 00:01:35,566
如果你还记得的话
well if you recall

27
00:01:38,066 --> 00:01:43,133
内核是整个系统的尽头
the kernel is the kind of end all of the system 

28
00:01:43,333 --> 00:01:46,000
内核以极高特权运行
the kernel runs with extreme privileges

29
00:01:46,266 --> 00:01:49,433
内核会记录，例如seccomp
and the kernel keeps track of for example seccomp 

30
00:01:49,466 --> 00:01:52,366
Seccomp是在内核内部实现的
seccomp is implemented inside the kernel

31
00:01:52,566 --> 00:01:54,600
它的实现方式非常类似内核模块
and it's implemented in a very similar way

32
00:01:55,266 --> 00:01:59,300
或者说，和内核模块在相似的级别上
or on a similar level as kernel modules are in general

33
00:01:59,433 --> 00:02:02,200
所以如果你有一个有漏洞的内核模块
so if you have a kernel module that has a vulnerability

34
00:02:02,566 --> 00:02:09,033
它对seccomp元数据，有与seccomp本身相同的访问权限
that vulnerability has equal access to the seccomp metadata that seccomp itself does

35
00:02:10,333 --> 00:02:11,299
我们开始深入吧
let's dig in 

36
00:02:11,466 --> 00:02:13,533
这会很疯狂的
this is gonna get kind of wild

37
00:02:14,600 --> 00:02:20,600
前面我们看到了Linux内核中的cred结构
so we have previously seen the cred struct in the Linux kernel

38
00:02:20,600 --> 00:02:22,200
我们使用这个cred结构
we use this cred struct

39
00:02:22,900 --> 00:02:26,533
用commit_creds和prepare_kernel_creds
with set creds and prepare_kernel_creds

40
00:02:27,566 --> 00:02:29,966
获取root权限
to achieve root access

41
00:02:30,133 --> 00:02:32,299
在内核漏洞利用模块中
in the kernel exploitation module

42
00:02:34,466 --> 00:02:39,066
cred结构体是task_struct的成员
the cred struct is a member of the task_struct 

43
00:02:39,200 --> 00:02:42,366
task_struct中还有其他数据
and the task_struct has other data in it as well

44
00:02:42,466 --> 00:02:46,366
在task_struct中有个内联结构体
it has inlined inside the task_struct a

45
00:02:46,866 --> 00:02:50,099
算是子结构体，thread_info
kind of substructure of thread_info

46
00:02:50,700 --> 00:02:52,266
在thread_info中
and in that thread_info

47
00:02:52,400 --> 00:02:56,466
有个flags变量
there are among other things a flags variable

48
00:02:56,666 --> 00:02:58,699
flags包含很多比特位
and flags holds a bunch of bits

49
00:02:59,300 --> 00:03:00,300
这些位
and these bits 

50
00:03:00,300 --> 00:03:01,333
它是一个位域
it's a bitfield

51
00:03:01,400 --> 00:03:03,233
这些比特编码了一堆选项
these bits encode a bunch of options 

52
00:03:03,333 --> 00:03:08,233
其中包括一个名为TIF_SECCOMP的选项
including an option called TIF_SECCOMP 

53
00:03:08,566 --> 00:03:11,333
我记得是flags中的第8位
I think it is bit 8 in the flag struct

54
00:03:11,666 --> 00:03:15,566
它所做的当然是启用seccomp
and what it does of course is enable seccomp

55
00:03:15,600 --> 00:03:17,333
如果你对这个很感兴趣
if you are very interested in this

56
00:03:18,900 --> 00:03:22,733
对它在Linux内核中是如何工作的感兴趣
in terms of how these things work deep down inside in the linux kernel

57
00:03:23,066 --> 00:03:29,133
那我强烈推荐这个叫做bootlin的网站
highly recommend this site called bootlin 

58
00:03:29,433 --> 00:03:34,199
你可以在里面浏览不同版本的Linux内核源码
where you can crawl around the Linux kernel source code of different versions etc

59
00:03:34,200 --> 00:03:34,900
可以点击函数名跳转
click through it 

60
00:03:35,066 --> 00:03:36,233
非常好用
it's super nice

61
00:03:36,966 --> 00:03:39,599
你可以自己找到所有这些
and you can track down all of this on your own

62
00:03:39,766 --> 00:03:40,799
总之，重点是
anyways the point is

63
00:03:41,366 --> 00:03:45,099
在task_struct的thread_info子结构中
in the thread_info substructure of the task_struct

64
00:03:45,266 --> 00:03:52,199
有一个flags变量保存TIF_SECCOMP
there is a flags variable that holds TIF_SECCOMP

65
00:03:53,866 --> 00:03:55,799
TIF_SECCOMP是如何使用的
how is TIF_SECCOMP used

66
00:03:56,800 --> 00:04:01,400
我们要看一下seccomp是如何在内核中实现的
we have to kind of back up and look at how seccomp is implemented in the kernel

67
00:04:01,800 --> 00:04:05,200
在Linux内核的系统调用处理程序中
at one point in the syscall handler in the Linux kernel

68
00:04:06,100 --> 00:04:10,133
有一处调用了secure_computing函数
there is a call to the secure_computing function

69
00:04:10,266 --> 00:04:12,599
secure_computing函数是
the secure_computing function again is a

70
00:04:13,600 --> 00:04:19,933
在Linux内核中用来实现seccomp的
what is used to implement seccomp in the Linux kernel

71
00:04:20,266 --> 00:04:22,199
在系统调用的入口点
so in the syscall entry point

72
00:04:22,533 --> 00:04:24,899
我们会调用secure_computing
we call secure_computing

73
00:04:25,066 --> 00:04:29,733
检查是否设置了TIF_SECCOMP标志
which checks whether or not the TIF_SECCOMP flag is set

74
00:04:30,100 --> 00:04:31,200
如果设置了
and if it is

75
00:04:31,200 --> 00:04:34,333
就调用__secure_computing
calls into __secure_computing

76
00:04:34,500 --> 00:04:42,400
它会弄清楚用户设置了哪些seccomp结构
which figures out what seccomp structure has been set

77
00:04:43,000 --> 00:04:44,700
比如设置了哪些seccomp选项
like what the seccomp options are 

78
00:04:44,766 --> 00:04:47,366
然后执行seccomp过滤器
and then executes the seccomp filter

79
00:04:48,166 --> 00:04:50,533
这就是seccomp在内核中的实现方式
this is how seccomp is implemented in the kernel

80
00:04:50,733 --> 00:04:54,099
这一切都取决于这个seccomp标志
and it all hinges on this seccomp flag

81
00:04:54,300 --> 00:04:58,166
就是thread_info结构体里的标志
which is a flag on the thread_info struct

82
00:04:59,000 --> 00:05:00,900
那么，结论是什么呢
so what's the takeaway

83
00:05:00,900 --> 00:05:03,333
结论是，我们可以逃离seccomp
the takeaway is that we can escape seccomp

84
00:05:03,333 --> 00:05:05,866
我们可以关闭当前线程的seccomp
we can disable seccomp for our current thread

85
00:05:06,200 --> 00:05:09,133
通过task_struct
by taking the task_struct

86
00:05:10,366 --> 00:05:14,499
获取thread_info.flags的偏移量
getting the offset of thread_info.flags and

87
00:05:18,533 --> 00:05:19,333
叫什么来着
what's it called

88
00:05:22,100 --> 00:05:24,533
翻转TIF_SECCOMP位
flipping the TIF_SECCOMP bit

89
00:05:24,733 --> 00:05:30,733
我展示一下，实际C代码中，这是什么样子的
let me show you what that will look like in actual C code

90
00:05:32,466 --> 00:05:36,499
首先是比特位翻转的样子
first what this bitflip actually looks like 

91
00:05:36,566 --> 00:05:38,966
我们想要
so we actually want to of course

92
00:05:39,166 --> 00:05:40,399
这是一个比特域
this is a bit field 

93
00:05:40,400 --> 00:05:41,933
TIF_SECCOMP是索引
TIF_SECCOMP is the index

94
00:05:41,933 --> 00:05:42,699
我记得是8
I think it's 8 

95
00:05:42,933 --> 00:05:47,266
但它显然会根据内核版本的不同而不同
but it obviously can change kernel versions to kernel version

96
00:05:47,733 --> 00:05:49,366
我们有8位
we have 8 bit

97
00:05:52,400 --> 00:05:54,333
第8位
a number it's bit number 8 

98
00:05:54,566 --> 00:05:56,499
我们将1
and we take a one bit

99
00:05:56,766 --> 00:05:58,733
左移8个比特
we shift it to the left by 8

100
00:05:59,200 --> 00:06:00,133
再取个反
we invert it 

101
00:06:00,400 --> 00:06:09,800
于是我们创建一个字段，每个位都是1，除了右起第8位
so we create a field where every bit is one except for the 8th bit from the right

102
00:06:10,066 --> 00:06:11,766
然后我们把它和flags按位与
and then we and it with the flags

103
00:06:11,866 --> 00:06:13,866
这样就关闭了一个标志位
thus disabling a single flag

104
00:06:14,500 --> 00:06:15,566
一些基础知识
couple of basics 

105
00:06:15,566 --> 00:06:22,199
怎么找到flags的地址
how do we get to the address of these flags 

106
00:06:22,366 --> 00:06:23,599
我们很幸运
well we're in luck

107
00:06:24,166 --> 00:06:30,499
因为相比其他信息，当前task_struct会频繁使用
because the current task_struct is used so frequently among some other information 

108
00:06:30,666 --> 00:06:37,133
所以内核一直把GS段寄存器指向当前task_struct
that the kernel always points the segment register GS to the current task_struct

109
00:06:37,666 --> 00:06:41,133
这是寄存器，你可以
this is a register that you can

110
00:06:43,200 --> 00:06:45,466
它类似于FS寄存器
that is analogous to the FS register 

111
00:06:45,466 --> 00:06:49,066
后者你经常在金丝雀的比较中看到
that you often see in the comparisons of canaries

112
00:06:49,100 --> 00:06:54,300
这样用户空间程序才有一个比较项
so the user space program has a reference to among other things 

113
00:06:54,600 --> 00:06:56,966
就是fs寄存器中的金丝雀值
the canary from the FS register

114
00:06:56,966 --> 00:07:00,266
如果你反汇编一个被金丝雀保护的程序
if you disassemble something that's protected by Canary

115
00:07:00,266 --> 00:07:02,666
你可以看到是如何访问fs的
you can see how that access works

116
00:07:03,500 --> 00:07:04,433
GS也是一样的
GS is the same 

117
00:07:04,666 --> 00:07:10,933
在linux内核中，它用于访问当前的task_struct
in the Linus kernel it is used for an access to the current task_struct

118
00:07:11,133 --> 00:07:12,766
在内核开发中
and in kernel development

119
00:07:12,766 --> 00:07:15,066
其实有一个很简单的简写
there's actually a really easy shorthand for this

120
00:07:15,066 --> 00:07:16,533
叫current
called current

121
00:07:16,866 --> 00:07:21,266
它返回当前的task_struct
that just returns the current task_struct 

122
00:07:21,466 --> 00:07:29,799
关闭thread_info.flags中TIF_SECCOMP标志的方法是
so the plan to disable the TIF_SECCOMP flag from the thread_info flags is

123
00:07:30,100 --> 00:07:36,200
通过GS Register获取该结构的访问权限
get the access to this structure via the GS Register

124
00:07:36,400 --> 00:07:37,366
清零这个标志位
clear the flag 

125
00:07:37,866 --> 00:07:38,933
完成
done

126
00:07:39,533 --> 00:07:42,599
这里需要注意的是，这个进程的子进程
caveat here is that the children of this process

127
00:07:42,766 --> 00:07:45,033
此进程将不再被seccomp保护
this process will no longer be seccomped

128
00:07:45,200 --> 00:07:47,766
但它的子进程仍受到seccomp保护
but its children will still be seccomped

129
00:07:47,866 --> 00:07:52,333
继承的seccomp信息存储在别处
that information inherited seccomp rules and stuff are stored elsewhere

130
00:07:53,900 --> 00:07:55,900
让我们在实践中看看这一点
let's take a look at this in practice

131
00:07:56,100 --> 00:08:08,500
我扩展了pwnkernel仓库中的make_root.ko或make_root.c，
so I extended make_root.ko or make_root.c rather in the pwnkernel repository

132
00:08:08,766 --> 00:08:10,699
提醒一下
so as a reminder

133
00:08:10,900 --> 00:08:12,533
Pwnkernel在
pwnkernel is at

134
00:08:13,066 --> 00:08:17,599
github.com/pwncollege/pwnkernel
github.com/pwncollege/pwnkernel

135
00:08:19,133 --> 00:08:20,999
在src下面
here under src

136
00:08:22,600 --> 00:08:23,566
make_root.c
make_root.c

137
00:08:24,600 --> 00:08:25,466
有很多
there's a lot of

138
00:08:25,966 --> 00:08:27,933
有几个不同的内核模块
there are several different kernel modules 

139
00:08:28,000 --> 00:08:32,966
它们会显示内核的不同功能
that will show different functionalities in the kernel

140
00:08:33,133 --> 00:08:34,266
你可以构建内核
you can build the kernel 

141
00:08:34,266 --> 00:08:35,599
执行build.sh
you will build.sh

142
00:08:35,733 --> 00:08:39,366
用launch启动它
launch it with launch and

143
00:08:41,200 --> 00:08:43,300
我不小心给你看错了东西
I accidentally showed you the wrong thing

144
00:08:43,300 --> 00:08:44,100
现在我们开始吧
but here we go

145
00:08:46,000 --> 00:08:49,600
github.com/pwncollege/pwnkernel
github.com/pwncollege/pwnkernel

146
00:08:49,600 --> 00:08:53,300
我展示一下正确的窗口
let me show the right window

147
00:08:54,133 --> 00:08:54,999
好了
boom 

148
00:08:56,566 --> 00:08:59,666
在pwnkernel中
so in pwnkernel

149
00:08:59,866 --> 00:09:05,133
我们有一个名为make_root的模块
we have a module called make_root

150
00:09:05,533 --> 00:09:09,666
make_root有一个ioctl处理程序
and make_root has an ioctl handler 

151
00:09:09,800 --> 00:09:13,766
如果发送ioctl参数13371337
if you send an ioctl parameter 13371337 

152
00:09:13,900 --> 00:09:15,566
它会给你root权限
it'll give you root access

153
00:09:15,700 --> 00:09:20,266
正如我们在内核漏洞利用模块中看到的那样
as we saw in the kernel exploitation module 

154
00:09:20,466 --> 00:09:24,899
如果发送参数31337
if you send a parameter of 31337

155
00:09:25,166 --> 00:09:27,299
它会为你逃脱seccomp
it'll escape seccomp for you 

156
00:09:27,533 --> 00:09:29,933
这是代码
and this is the code

157
00:09:31,000 --> 00:09:37,066
这个_TIF_SECCOMP实际上是一个宏的简写
this _TIF_SECCOMP is actually a shorthand for a macro 

158
00:09:37,233 --> 00:09:42,333
它将1左移，不带下划线的TIF_SECCOMP次
that does one shifted to the left by TIF_SECCOMP without the underscore

159
00:09:42,466 --> 00:09:43,366
和ppt上的是一回事
so it's the same thing

160
00:09:43,866 --> 00:09:47,099
这将清除seccomp标志
and this will clear the seccomp flag

161
00:09:48,666 --> 00:09:54,166
我们演示一下逃出这个沙盒
so let's demonstrate this by breaking out of this sandbox

162
00:09:54,266 --> 00:09:57,866
我写了一个非常有效的沙盒
I wrote a sandbox that is actually very effective

163
00:09:58,400 --> 00:09:59,366
我们有一个
we have a

164
00:10:00,500 --> 00:10:06,933
它将ruid、euid和saved uid设置为1234
it sets the real effective and saved user ID to 1234

165
00:10:07,100 --> 00:10:08,500
没法从中逃脱
no escape from that

166
00:10:08,766 --> 00:10:11,166
然后它创建了一个严格的seccomp
and then it creates a strict seccomp 

167
00:10:11,166 --> 00:10:15,399
它只允许你用ioctl读写
that only allows you ioctl read and write

168
00:10:15,600 --> 00:10:20,666
默认情况下，其它系统调用都返回-1337
by default it'll return -1337 from every other system call

169
00:10:20,733 --> 00:10:24,966
这样为了展示逃脱效果
that's to demonstrate this breakout 

170
00:10:25,066 --> 00:10:26,933
方便我写日志之类的
so that I can log and stuff

171
00:10:27,900 --> 00:10:29,733
玩玩沙盒
poke at the sandbox

172
00:10:30,066 --> 00:10:34,433
很多沙盒，如果你违反规则，就直接杀死你的进程
of course many sandboxes will just kill your process if you violated 

173
00:10:34,566 --> 00:10:36,199
这个更好
this one is nicer

174
00:10:37,000 --> 00:10:41,600
然后我们演示一下，这个会返回-1337
then we're going to show that this will return -1337

175
00:10:41,800 --> 00:10:43,366
这行不通
this will not work

176
00:10:43,400 --> 00:10:44,633
不会调用getuid
will not call getuid 

177
00:10:44,733 --> 00:10:46,766
因为系统调用被拦截了
because that syscall is blocked

178
00:10:47,100 --> 00:10:51,400
但当我们针对文件描述符3，执行ioctl时
but then when we do this ioctl on file descriptor 3 

179
00:10:51,400 --> 00:10:53,900
幸运的是，我们之前打开过它
which luckily we opened before

180
00:10:54,300 --> 00:10:55,900
用来进入
jumping into the

181
00:10:59,600 --> 00:11:00,233
什么来着
what's it called 

182
00:11:00,433 --> 00:11:01,466
沙盒
the sandbox

183
00:11:02,000 --> 00:11:05,600
然后执行ioctl 31337
and we do the ioctl 31337 

184
00:11:06,000 --> 00:11:08,333
我们将逃离沙盒
we will have escaped the sandbox

185
00:11:09,133 --> 00:11:09,666
酷
cool 

186
00:11:10,200 --> 00:11:11,800
我们来看看
so let's take a look

187
00:11:11,966 --> 00:11:14,499
这些实际上都是不必要的
all of this is actually not necessary

188
00:11:22,133 --> 00:11:23,566
我们开始吧
let's do this

189
00:11:23,900 --> 00:11:25,200
与其
and rather than

190
00:11:28,800 --> 00:11:29,900
硬编码
hard coding it 

191
00:11:30,000 --> 00:11:31,066
不如我们把这个传进去
we'll pass this in

192
00:11:33,633 --> 00:11:35,499
这就是我们的attack
so we have our attack

193
00:11:36,166 --> 00:11:38,099
我们的沙盒和进攻程序
our sandbox and our attack

194
00:11:39,966 --> 00:11:44,466
我们来编译一下
let's compile this 

195
00:11:44,533 --> 00:11:45,399
还记得
remember

196
00:11:45,800 --> 00:11:48,200
在pwnkernel内部使用
for use inside pwnkernel

197
00:11:48,533 --> 00:11:50,933
因为在用户空间中没有库
because there are no libraries in there in user space

198
00:11:51,133 --> 00:11:53,299
你要编译静态代码
you probably want to compile static

199
00:12:00,000 --> 00:12:01,266
我们启动
let's launch

200
00:12:07,933 --> 00:12:11,866
安装这个make_root模块
let's uh install this make_root module 

201
00:12:12,000 --> 00:12:15,966
然后我们启动/home/ctf/
and then we just launch /home/ctf/

202
00:12:16,966 --> 00:12:17,766
和
and

203
00:12:18,366 --> 00:12:19,766
找到我们的沙盒
find our sandbox

204
00:12:20,600 --> 00:12:21,566
好的
boom

205
00:12:26,466 --> 00:12:27,266
它失败了
it failed

206
00:12:45,966 --> 00:12:46,999
为什么失败了
why did it fail

207
00:12:51,166 --> 00:12:53,599
我暂停一下，看看发生了什么
let me pause it and I'll figure out what's going on 

208
00:12:53,600 --> 00:12:55,266
我之前刚测试过，是有效的
I just tested this and it worked 

209
00:12:55,400 --> 00:12:57,200
我一定是弄乱了什么东西
but I must have broken something

210
00:12:59,200 --> 00:13:00,133
好的，我回来了
all right I'm back

211
00:13:00,966 --> 00:13:04,766
明显，最初的沙盒逃逸是有效的
obviously the original sandbox escape worked

212
00:13:04,766 --> 00:13:09,633
因为某些原因，我在和你谈话的时候删掉了这部分
and for some reason I deleted this part when talking to you 

213
00:13:09,866 --> 00:13:14,266
这对获取root权限很关键
which is critical to get root privileges

214
00:13:14,366 --> 00:13:16,533
没有它我就打不开flag
and without which I can't open the flag

215
00:13:16,766 --> 00:13:19,366
因为我会降到1234的权限
because of course I drop privileges to 1234

216
00:13:19,600 --> 00:13:22,500
这里沙盒逃逸有两步
so we have a two step sandbox escape here

217
00:13:22,766 --> 00:13:24,299
沙盒有两个部分
there are two parts of the sandbox 

218
00:13:24,433 --> 00:13:25,399
seccomp这部分
the seccomp 

219
00:13:25,900 --> 00:13:35,000
和降低用户权限到1234这部分
and the user UID drop  the privilege drop

220
00:13:35,300 --> 00:13:37,666
所以首先我们要逃出沙盒
so first we break out of the sandbox

221
00:13:38,900 --> 00:13:41,533
然后我们
and then we break out of the

222
00:13:43,700 --> 00:13:45,500
然后我们提升我们的特权
and then we elevate our privileges

223
00:13:46,333 --> 00:13:47,399
我们可以看到
and we can see

224
00:13:49,200 --> 00:13:52,266
这个会失败
that this here is going to fail 

225
00:13:52,433 --> 00:13:54,166
这个getuid调用
this call to getuid

226
00:13:54,466 --> 00:13:56,666
因为它不在seccomp过滤器中
because it's not included in the seccomp filter

227
00:13:57,566 --> 00:14:00,566
它将返回错误码-1337
it'll return on error 1337

228
00:14:01,533 --> 00:14:04,866
这里的调用会成功
and then this call right here will succeed

229
00:14:05,166 --> 00:14:07,499
因为我们已经关闭了seccomp过滤器
because we have disabled the seccomp filter

230
00:14:08,533 --> 00:14:09,699
如果我们运行这个
if we run this 

231
00:14:09,833 --> 00:14:11,233
哦，我运行了
oh I ran it earlier

232
00:14:13,466 --> 00:14:14,466
如果我们运行这个
if we run this 

233
00:14:14,466 --> 00:14:16,833
我们让make_root.ko打日志输出了
we get make_root.ko logging 

234
00:14:16,966 --> 00:14:18,233
以前的flags是多少
what the flags were before

235
00:14:18,333 --> 00:14:19,233
之后的flags是多少
what the flags were after 

236
00:14:19,633 --> 00:14:26,399
这是从0开始的第8位（输出的是0x100）
so this is the 8th bit if 0 indexed of course

237
00:14:27,300 --> 00:14:28,600
设置了TIF_SECCOMP
TIF_SECCOMP is set 

238
00:14:28,766 --> 00:14:30,666
没设TIF_SECCOMP
TIF_SECCOMP is not set

239
00:14:32,400 --> 00:14:33,200
我们开始吧
and here we go

240
00:14:33,366 --> 00:14:34,799
在逃离前
we said before breaking out 

241
00:14:35,000 --> 00:14:39,200
getuid返回-1337
our getuid was negative 1337

242
00:14:39,933 --> 00:14:41,133
逃离后
then we broke out

243
00:14:41,333 --> 00:14:43,299
当然这是
of course this is

244
00:14:44,166 --> 00:14:45,599
有输出缓冲
this is all buffered

245
00:14:45,766 --> 00:14:47,733
它会立即输出
this gets output immediately

246
00:14:48,466 --> 00:14:50,999
所以输出结果应该是交叉的，但没有
so this should be interlieved but it's not

247
00:14:53,133 --> 00:14:54,799
在我们逃出沙盒之前
before we broke out the sandbox

248
00:14:54,966 --> 00:14:57,533
getUID返回-1337
our getUID was negative 1337

249
00:14:57,533 --> 00:14:58,333
然后我们逃离
then we broke out 

250
00:14:58,500 --> 00:14:59,533
然后getuid输出1234
then was 1234

251
00:14:59,533 --> 00:15:00,866
然后我们提权
then we elevated privileges 

252
00:15:00,866 --> 00:15:02,066
获取flag
and then we got the flag

253
00:15:04,600 --> 00:15:06,700
那么我们怎么弄清楚
so how do we actually figure out

254
00:15:06,966 --> 00:15:08,899
它的汇编指令
what the assembly of this is

255
00:15:09,266 --> 00:15:12,533
正如我们在内核模块中发现的那样
as we found out in the kernel module

256
00:15:14,600 --> 00:15:18,200
反汇编这个很烦
disassembling these things is kind of annoying

257
00:15:19,666 --> 00:15:29,099
当然，你可以在它执行的时候，用gdb查看
of course you can always check it out in GDB as it executes

258
00:15:29,233 --> 00:15:31,766
这是device_ioctl的地址
so here's the device ioctl

259
00:15:32,400 --> 00:15:33,200
你可以
you can

260
00:15:35,466 --> 00:15:36,266
gdb
GDB

261
00:15:49,600 --> 00:15:50,700
附加上
attach

262
00:15:54,300 --> 00:15:56,500
我们设置断点了吗
did we does it set the break point

263
00:15:57,666 --> 00:15:59,399
好的，继续
yes okay continue

264
00:15:59,733 --> 00:16:00,799
运行沙盒
run the sandbox

265
00:16:01,633 --> 00:16:03,199
现在我们在断点
now we are in the break point

266
00:16:08,200 --> 00:16:09,000
然后我们
and we go

267
00:16:10,300 --> 00:16:11,166
执行si
step instruction 

268
00:16:11,333 --> 00:16:12,266
提醒一下
as a reminder

269
00:16:12,533 --> 00:16:14,299
有时在某些版本的GDB上
sometimes on certain versions of GDB

270
00:16:14,366 --> 00:16:15,799
ni不起作用
next instruction doesn't actually work

271
00:16:15,900 --> 00:16:17,300
但你可以si进入一个函数
but you can step into a function 

272
00:16:17,400 --> 00:16:19,100
然后输入finish完成它
and then type finish to finish it

273
00:16:20,000 --> 00:16:20,600
好了
here we go 

274
00:16:20,733 --> 00:16:23,799
我们在比较13371337
we're comparing 13371337

275
00:16:24,266 --> 00:16:27,066
这是提权的那段代码
that's the root privilege elevation

276
00:16:28,300 --> 00:16:28,800
这段代码
this guy 

277
00:16:28,800 --> 00:16:33,400
这还不是当前沙盒逃逸要做的
this is not what we're currently doing in the sandbox attack

278
00:16:33,666 --> 00:16:34,866
我们跳过这个
so we skip that

279
00:16:35,133 --> 00:16:37,666
现在我们和31337进行比较
now we're comparing against 31337

280
00:16:37,766 --> 00:16:38,899
这就是我们要做的
that is what we're doing

281
00:16:39,000 --> 00:16:40,066
我们进入
we go there 

282
00:16:40,433 --> 00:16:44,799
我们要打印出：我们正在逃离沙盒
so we're gonna printk that we're escaping the sandbox

283
00:16:45,500 --> 00:16:47,200
你可以在这里看到
you can see that here

284
00:16:49,733 --> 00:16:50,533
好吧
OK

285
00:16:56,500 --> 00:16:58,333
这里我们要打印
and here we're gonna print

286
00:16:59,200 --> 00:17:04,333
之前的标记位
the flags before

287
00:17:07,300 --> 00:17:10,066
这里写着“之前的标志位”
Ops this says flags before

288
00:17:11,966 --> 00:17:13,566
这里写着“之后的标志位”
and this says flags after

289
00:17:14,700 --> 00:17:16,466
不对，这里写的是“之后的标志位”
no this says flags after

290
00:17:17,233 --> 00:17:22,899
你得看习惯内核的高内存地址
you'll have to get used to seeing the kernel high memory addresses again

291
00:17:24,100 --> 00:17:26,066
那么标志位在哪里呢
so where are flags 

292
00:17:26,200 --> 00:17:28,866
标志位在这里
of course our flags go here

293
00:17:31,200 --> 00:17:31,966
这是
this is 

294
00:17:32,333 --> 00:17:35,399
这个放到了要传给printk的rdi寄存器
this gets put to RDI into printk

295
00:17:35,666 --> 00:17:37,533
标志位在RSI
our flags are in RSI

296
00:17:38,766 --> 00:17:42,399
标志位从RBX读取到RSI
and our flags are read from RBX into RSI

297
00:17:42,700 --> 00:17:44,433
RBX在这里
and RBX is right here 

298
00:17:44,666 --> 00:17:47,599
这个GS偏移量
that GS offset 

299
00:17:48,333 --> 00:17:50,299
这是一个真的指令
this is an actual instruction

300
00:17:50,800 --> 00:17:53,700
它用GS段寄存器
that takes the GS segment register

301
00:17:53,800 --> 00:17:57,100
就是一个指向内存某处的寄存器
just a register that points indexes somewhere into memory

302
00:17:58,600 --> 00:18:04,200
从该处偏移0x15d00
and indexes 0x15d00 off of that

303
00:18:05,133 --> 00:18:06,666
那就是标志位的位置
and that's where the flags are

304
00:18:07,133 --> 00:18:07,766
然后
and then of course

305
00:18:07,866 --> 00:18:11,266
在这里，它清除了位于第8位的TIF_SECCOMP
here is where it clears out the 8th bit of the flags

306
00:18:12,100 --> 00:18:12,966
非常酷
very cool

307
00:18:14,033 --> 00:18:19,999
这就是逃离沙盒的方法
so that is how you escape a sandbox

308
00:18:21,366 --> 00:18:27,266
我们看到的这种形式是可能的
of course this is all possible in the form that we saw 

309
00:18:27,366 --> 00:18:32,066
这就是通过内核漏洞逃离seccomp沙盒的方法
this is how you escape seccomp sandbox through a kernel vulnerability

310
00:18:32,300 --> 00:18:38,000
显然，内核模块不会故意关闭seccomp过滤器
obviously kernel modules aren't going to disable your seccomp filter purposely

311
00:18:38,133 --> 00:18:40,866
肯定是由于某种疯狂的错误
it'll be through some sort of crazy mistake

312
00:18:41,500 --> 00:18:42,933
才让你关
that allows you to

313
00:18:43,100 --> 00:18:43,600
例如
for example

314
00:18:43,600 --> 00:18:44,933
如果你利用一个内核代码执行
if you code execution a kernel 

315
00:18:44,933 --> 00:18:47,199
然后像这样做
and do something like this

316
00:18:47,866 --> 00:18:49,499
基本上在内核中
basically in the kernel

317
00:18:50,933 --> 00:18:53,266
一旦你进入内核，并执行代码
once you're in there and executing code

318
00:18:53,266 --> 00:18:54,566
就游戏结束了
it's really game over

319
00:18:55,100 --> 00:18:59,400
希望你们已经看到了
and hopefully you have seen that already 

320
00:18:59,500 --> 00:19:03,266
你还会看到更多关于关闭seccomp的例子
but you'll see it even more with this seccomp disabling

