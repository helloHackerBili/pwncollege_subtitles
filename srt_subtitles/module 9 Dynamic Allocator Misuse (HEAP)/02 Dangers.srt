1
00:00:00,866 --> 00:00:01,966
你好黑客
hello hackers

2
00:00:01,900 --> 00:00:06,900
欢迎观看动态分配器误用模块的下一个视频
welcome to the next video in the Dynamic Allocator Misuse module

3
00:00:07,300 --> 00:00:10,666
我们要讨论堆的相关危险
we gonna be talking about the dangers of the heap

4
00:00:10,666 --> 00:00:16,899
这样你能知道可能会犯哪些错
so you understand why conceptually humans can make errors

5
00:00:16,900 --> 00:00:19,900
我相信你遇到过这些错误
I'm sure that you've observed humans making errors in the past

6
00:00:19,900 --> 00:00:23,700
不一定是你自己，也许是你认识的人犯的
not necessarily yourselves but maybe someone you know

7
00:00:24,800 --> 00:00:30,600
或者你可能听别人讲过有人犯这些错误
or maybe you've heard about murmurs of humans sometimes making errors

8
00:00:30,700 --> 00:00:32,766
不管怎样，人们会误用堆
anyways people misuse the heap

9
00:00:33,866 --> 00:00:35,166
为什么这会是一个问题
why is this a problem 

10
00:00:35,300 --> 00:00:40,166
因为堆的实现
well this is a problem because heap implementations

11
00:00:40,300 --> 00:00:42,333
各种动态分配库
 dynamic allocation libraries

12
00:00:42,400 --> 00:00:44,600
它们经历了这样一个有趣的循环
they go through this interesting cycle

13
00:00:45,066 --> 00:00:48,766
任何库都有开销
where any library has overhead

14
00:00:49,200 --> 00:00:50,700
函数调用有开销
 a function call has overhead

15
00:00:50,700 --> 00:00:52,700
call指令有开销
the call instruction has overhead right and

16
00:00:52,700 --> 00:00:56,300
分配器所做的每件事都会有一定的开销
and everything that the allocator does will have some amount of overhead

17
00:00:56,400 --> 00:00:58,366
只要分配器存在开销
and when an allocator exists

18
00:00:58,700 --> 00:01:04,100
就有应用开发人员会抱怨
application developers they will complain about this overhead

19
00:01:04,300 --> 00:01:06,133
这个抱怨是合理的
and that's a legitimate complaint

20
00:01:06,133 --> 00:01:09,799
应用开发人员都希望程序跑的快
application developers need things to be fast

21
00:01:10,600 --> 00:01:15,900
内存分配器开发人员也会根据分配器的状态
allocator developers will look at the state of the allocator

22
00:01:16,600 --> 00:01:17,866
改进它
and they will improve it

23
00:01:18,500 --> 00:01:22,800
他们可能创建一个缓存层或其他优化
they will create a caching layer some other optimization etc

24
00:01:23,900 --> 00:01:26,666
这必然会导致安全问题
this invariably leads to security issues

25
00:01:26,766 --> 00:01:29,133
一个缓存错误可能有
a caching error might have

26
00:01:29,733 --> 00:01:32,899
可能会引入严重的安全问题
might introduce significant security problems

27
00:01:36,400 --> 00:01:41,000
这些问题可能各种各样
and these can come in all sorts of shapes and sizes

28
00:01:41,000 --> 00:01:44,600
通常是在对堆的特定误用中
usually it's in the context of a specific misuse of the heap

29
00:01:45,066 --> 00:01:47,566
安全将受到威胁
security will be compromised

30
00:01:49,300 --> 00:01:53,700
从历史上看，分配器开发人员通常会反对安全性
the allocator developers typically push back against security historically

31
00:01:53,800 --> 00:01:55,533
这对他们来说是说的通的
and this makes sense to them

32
00:01:56,500 --> 00:01:58,366
分配器需要快速运行
the allocator needs to be fast

33
00:01:58,366 --> 00:02:00,466
并且分配器应该被正确使用
and the allocator should be properly used

34
00:02:00,466 --> 00:02:03,199
如果分配器使用不当
if the allocator is improperly used

35
00:02:03,866 --> 00:02:11,999
如果是应用程序中的bug导致触发不安全状态
if bugs in an application lead to the triggering of insecure states

36
00:02:11,999 --> 00:02:14,133
这是应用的问题，好吧
 and allocator... well this is a problem with application

37
00:02:14,133 --> 00:02:15,499
应用程序有bug
the application had the bug

38
00:02:15,666 --> 00:02:18,499
应用程序开发人员应该修复他们的bug
the application developer should fix their bugs right

39
00:02:18,500 --> 00:02:19,900
分配器开发者
and so allocator developers

40
00:02:19,900 --> 00:02:25,300
通常对高开销的安全解决方案相当抵触
typically are fairly resistant to high overhead security solutions

41
00:02:25,766 --> 00:02:28,266
他们想要速度
right they want speed

42
00:02:28,300 --> 00:02:32,000
但问题总是会累积起来
but invariably problems build up

43
00:02:32,133 --> 00:02:36,333
这种对安全的看法是在导致安全问题中排第二的原因
this view of security is secondary causes issues

44
00:02:36,366 --> 00:02:38,733
大量的漏洞开始出现
a lot of exploits start emerging

45
00:02:39,300 --> 00:02:41,600
应用的安全性受到威胁
security of applications is compromised

46
00:02:41,600 --> 00:02:44,566
即使最初的bug是应用程序的问题
even if the initial bug was applications fault

47
00:02:45,066 --> 00:02:46,366
但事实上
you know the fact that

48
00:02:46,700 --> 00:02:52,500
因为在堆实现中的优化
because of an optimization layer in the heap implementation

49
00:02:52,700 --> 00:02:58,300
最初的bug可能能够被利用
the original bug could be exploited

50
00:02:59,100 --> 00:03:00,333
成为问题后
becomes a problem and then

51
00:03:00,666 --> 00:03:04,499
分配器开发人员创建了一个修复
the allocator developers create a fix 

52
00:03:04,666 --> 00:03:07,799
这个修复将增加安全检查
and this fix will add security checks

53
00:03:07,866 --> 00:03:09,866
这个安全检查会有开销
and security checks have overhead

54
00:03:10,000 --> 00:03:13,433
而这种开销会引起应用开发人员的抱怨
and this overhead will cause application developers to complain

55
00:03:13,700 --> 00:03:16,900
整个过程又将重新开始
 and the process starts new all together

56
00:03:16,900 --> 00:03:21,000
现在的 ptmalloc 处在这个阶段
right now in ptmalloc we are here

57
00:03:23,000 --> 00:03:24,066
基本上
basically

58
00:03:24,900 --> 00:03:31,600
旧的实现存在安全问题
there were security problems in the old implementation

59
00:03:31,800 --> 00:03:32,900
它们会导致安全检查
 they lead to security checks

60
00:03:33,666 --> 00:03:36,333
这和其他原因一起
this among other things among other

61
00:03:38,500 --> 00:03:42,500
比如多核系统的出现等等
you know the emergence of heavily multi core systems etc

62
00:03:42,700 --> 00:03:48,900
更改了分配器的性能特征
changed the performance characteristics of the allocator

63
00:03:49,666 --> 00:03:52,333
开发人员在这里创建一个缓存层
and the developers create a caching layer here 

64
00:03:53,400 --> 00:03:58,800
这严重降低了堆实现的安全性
which severely reduced the security of the heap implementation

65
00:03:58,933 --> 00:04:00,066
这个缓存层就是 Tcache
this is tcache

66
00:04:00,066 --> 00:04:03,333
我将在以后的视频中讨论它
 and I'll talk about it in a later video

67
00:04:04,366 --> 00:04:09,366
在现在的ubuntu 2004和libc 2.31以及以后的版本
and right now with the ubuntu 2004 with libc 2.31 and onwards

68
00:04:09,500 --> 00:04:13,200
我们正开始解决tcache带来的问题
 we are starting to fix the problems that tcache introduced

69
00:04:15,200 --> 00:04:18,000
上次我教这门课的时候
last time I taught this course

70
00:04:18,500 --> 00:04:21,100
这段视频是在2020年录制的
so this video is recorded in 2020 of course

71
00:04:21,666 --> 00:04:25,066
2019年，我们还在使用ubuntu1804
in 2019 we were still on ubuntu1804

72
00:04:25,066 --> 00:04:27,533
作为当时最新的长期支持(lts)版本
as the latest kind of long term support 

73
00:04:28,033 --> 00:04:31,099
我使用的是当时ubuntu最新的长期支持
I use the latest long term support of a ubuntu

74
00:04:31,866 --> 00:04:33,899
作为课程的基准
as a baseline for the course of course

75
00:04:35,333 --> 00:04:40,266
ubuntu18.04还处在这个阶段
and 1804 still had us here

76
00:04:40,500 --> 00:04:41,166
所以实际上
 so it was actually just 

77
00:04:41,400 --> 00:04:46,500
更容易实现一些我们将要讨论的技巧
a little bit easier to pull off some of the hacks that will be talking about 

78
00:04:47,200 --> 00:04:50,733
但并非全部如此。这对我们(当前)的研究深度影响很小
but not all. it's a very small impact on how deep we go

79
00:04:50,733 --> 00:04:52,333
如果我们再深入一点
if we went much deeper 

80
00:04:52,533 --> 00:04:54,533
那就会有大影响了
then it would be an impact all right

81
00:04:55,800 --> 00:04:59,066
那么堆是如何被误用的呢
so how can the heap be misused right

82
00:04:59,200 --> 00:05:03,000
我已经列出了分配器安全性的生命周期
I've kind of laid out this life cycle of allocator security

83
00:05:03,900 --> 00:05:07,500
但这一切都要看人在应用程序中犯的错误
but it all rests on humans making errors in applications

84
00:05:07,866 --> 00:05:10,266
因为应用程序是攻击者攻击的对象
because the applications are what an attacker attacks

85
00:05:10,266 --> 00:05:11,199
而不是堆本身
not the heap itself

86
00:05:11,200 --> 00:05:13,400
它们通过应用程序到达堆
they get to the heap through the application

87
00:05:14,100 --> 00:05:20,400
堆的错误使用有三种主要类型
and we have kind of three main categories of heap misuse

88
00:05:20,466 --> 00:05:22,899
第一种是忘记释放内存
the first one is just forgetting to free memory

89
00:05:23,000 --> 00:05:24,800
我们快速地讲一遍
right we're gonna cover this super quick

90
00:05:25,566 --> 00:05:26,566
然后继续
and then move on

91
00:05:26,700 --> 00:05:29,200
但这会导致资源枯竭
but this leads to resource exhaustion

92
00:05:29,266 --> 00:05:32,599
第二种是忘记我们已经释放了内存
the second one is forgetting that we have freed memory

93
00:05:32,700 --> 00:05:34,800
这是个很有趣的问题
which is a very interesting problem

94
00:05:34,800 --> 00:05:38,500
这可能导致使用已经被释放的内存
that can lead to using memory that is free

95
00:05:38,533 --> 00:05:40,699
而这会导致其他问题，我们稍后会讨论
that leads to other problems later as we'll discuss

96
00:05:40,700 --> 00:05:42,766
还可能导致重复释放内存
and freeing memory that is free

97
00:05:42,766 --> 00:05:45,499
这会导致其他问题
which leads to other problems later

98
00:05:47,300 --> 00:05:54,200
最后一种是破坏元数据
and there is a danger of accidentally corrupting metadata

99
00:05:54,500 --> 00:05:58,500
分配器使用这些元数据跟踪堆状态
 that the allocator itself uses to keep track of heap state

100
00:05:58,700 --> 00:06:01,500
可以类比栈上的缓冲区溢出
so you can imagine a buffer overflow on the stack

101
00:06:01,600 --> 00:06:03,266
可以更改控制数据
you start collaborating control data

102
00:06:03,266 --> 00:06:04,566
如返回地址
such as the return address

103
00:06:04,733 --> 00:06:06,066
这和堆非常相似
it's very similar for the heap

104
00:06:06,066 --> 00:06:07,966
如果堆上有缓冲区溢出
if you have a buffer overflow on the heap

105
00:06:07,966 --> 00:06:10,399
您可以开始修改堆元数据
you can start collaborating heap metadata

106
00:06:10,466 --> 00:06:12,099
堆会变得异常
and the heap goes insane

107
00:06:12,533 --> 00:06:13,333
好吧
all right

108
00:06:13,900 --> 00:06:16,600
我们展开讲一下这3点
let's touch on each one piece by piece

109
00:06:16,666 --> 00:06:18,166
首先是内存泄漏
first memory leaks

110
00:06:19,300 --> 00:06:27,100
只要你使用过堆，你就很可能都遇到过这个问题
you've all probably seen this if you have use the heap in any way

111
00:06:27,600 --> 00:06:28,933
如果你malloc了片内存
if you malloc something

112
00:06:29,000 --> 00:06:32,700
你忘了在你失去所有对它的引用之前释放它
and you forget to free it before you lose all references to it

113
00:06:33,000 --> 00:06:35,800
在你失去指针之前
before you lose the the pointers

114
00:06:36,866 --> 00:06:38,866
像这里的问题
in question like here

115
00:06:39,100 --> 00:06:42,066
指针是局部变量，函数执行完它就消失了
the pointer is local variable and it's gone

116
00:06:42,133 --> 00:06:43,399
它没有被释放
it was not freed

117
00:06:44,366 --> 00:06:47,666
那这个blah指向内存会发生什么
what happened to the memory pointed by blah

118
00:06:47,666 --> 00:06:48,599
当然
right of course

119
00:06:49,300 --> 00:06:50,600
这块内存就在那里
the memory stays around

120
00:06:50,600 --> 00:06:53,366
它停留在数据段中等待
it stays there in the data segment waiting

121
00:06:53,566 --> 00:06:54,899
等待着被释放
and waiting to be freed

122
00:06:54,900 --> 00:06:57,100
直到进程结束，它才会被释放
and it is never freed until the process dies

123
00:06:57,533 --> 00:06:58,899
为什么这是一个问题
why is this an issue

124
00:06:59,566 --> 00:07:01,099
这是个问题
well it could be an issue

125
00:07:01,900 --> 00:07:07,700
因为这些数据可能是敏感的
because it could become an issue if that data is sensitive

126
00:07:07,900 --> 00:07:11,900
你可能在那里有敏感的密码
right so you might have some sensitive password in there

127
00:07:11,900 --> 00:07:14,700
或者是你再也无法从内存中抹去的东西
or something that you can no longer scrub from memory

128
00:07:15,533 --> 00:07:18,299
其他漏洞可能会暴露它，这是一个问题
and other bugs could expose it that's one problem

129
00:07:19,000 --> 00:07:21,733
另一个问题是你可能会耗尽你的资源
another problem is that you can exhaust your resources

130
00:07:21,733 --> 00:07:23,899
通常这不是安全问题
usually this isn't a security issue

131
00:07:24,333 --> 00:07:26,299
但这也可能是的
but it can be

132
00:07:26,533 --> 00:07:29,133
让我给你看一个有趣的东西
let me show you an interesting thing

133
00:07:31,466 --> 00:07:35,066
我写了一个简短的程序
I wrote up a quick program

134
00:07:35,400 --> 00:07:39,500
它只会分配大量的内存
that just allocates huge chunks of memory

135
00:07:41,100 --> 00:07:42,333
当malloc执行成功
while it's successful

136
00:07:42,333 --> 00:07:46,266
当返回一个合法指针a
so when a returns a pointer

137
00:07:46,466 --> 00:07:47,766
就能一直malloc
we keep doing this

138
00:07:48,300 --> 00:07:49,100
最终
eventually

139
00:07:49,100 --> 00:07:51,766
我们会耗尽可以分配的内存
we're gonna run out of memory that we can allocate

140
00:07:52,333 --> 00:07:55,399
Malloc，如果你看手册页，会失败
malloc if you look at the man page can actually fail

141
00:08:01,100 --> 00:08:03,266
如果出现错误，这些函数返回null
on error, these functions return null

142
00:08:03,266 --> 00:08:05,499
malloc可以返回null
so malloc can return null

143
00:08:06,466 --> 00:08:07,733
让我们来编译它
let's compile it

144
00:08:14,733 --> 00:08:15,599
在过去
you know back in the day

145
00:08:15,600 --> 00:08:18,000
这会直接破坏（覆盖）我的C代码
this would simply destroy my C code

146
00:08:18,466 --> 00:08:20,566
我很高兴他们加了检查
I'm glad that they added a check for that

147
00:08:20,566 --> 00:08:21,366
好吧
all right

148
00:08:21,966 --> 00:08:23,166
如果运行这个
if you run this

149
00:08:24,533 --> 00:08:28,199
32767之后
after 32,767

150
00:08:29,000 --> 00:08:35,300
非常接近2的16次方
which is very suspiciously close to 2 to the sixteenth

151
00:08:35,800 --> 00:08:37,266
呃分配
uh allocations

152
00:08:39,366 --> 00:08:41,333
下一次分配失败了
our next allocation fails

153
00:08:41,666 --> 00:08:43,166
我们得到一个NULL
and we just get a null

154
00:08:43,733 --> 00:08:44,999
就返回了
 that's return

155
00:08:45,900 --> 00:08:49,266
这可能不是坏事
this might not be bad

156
00:08:50,000 --> 00:08:52,766
这取决于应用程序
depending on what's going on with the program

157
00:08:52,900 --> 00:08:53,966
如果你检查一下
if you check

158
00:08:56,566 --> 00:08:58,299
显然这里
obviously if here

159
00:08:58,300 --> 00:09:00,100
如果我们检查malloc的返回值
if we check the return value of malloc

160
00:09:00,100 --> 00:09:02,133
就像隐式地循环执行，循环能终止
like being implicitly doing this wild loop

161
00:09:02,333 --> 00:09:05,133
这很好，但如果程序不检查它
that's fine but if a program doesn't check it

162
00:09:05,133 --> 00:09:06,966
那就会发生各种奇怪的事情
then all sorts of weird stuff can happen

163
00:09:06,966 --> 00:09:12,533
通常是访问0地址内存之类的
usually it'll be access to memory at 0 or something

164
00:09:12,833 --> 00:09:19,999
对的，如果我往a中拷贝一个字符串
 right if I then did a whatever strcpy something into a

165
00:09:20,700 --> 00:09:24,300
就会出现空指针异常
it would just seg fault on a null pointer do reference

166
00:09:24,900 --> 00:09:32,300
但是a，malloc返回值，也有其他用途
but there could be other uses of a or of a the return of malloc

167
00:09:33,300 --> 00:09:35,533
这可能有很大安全影响
that could be security critical or

168
00:09:36,166 --> 00:09:37,966
例如，如果这发生在内核中
if this happens in the kernel for example

169
00:09:37,966 --> 00:09:39,266
内核可能会挂
the whole kernel could die

170
00:09:42,733 --> 00:09:44,199
这不是一个（我们关注的）安全问题
so it's not a big security issue

171
00:09:44,200 --> 00:09:47,000
在这张幻灯片了解一下就好
you're not going to actually bother with it other than this slide

172
00:09:47,066 --> 00:09:48,533
但这是值得考虑的问题
but it is something to think about

173
00:09:48,533 --> 00:09:50,199
仅仅只是忘记释放内存
even just forgetting to free an allocation 

174
00:09:51,700 --> 00:09:56,500
就能对程序产生影响
can have some impact to the program

175
00:09:56,533 --> 00:09:57,333
好吧
all right

176
00:09:58,066 --> 00:10:01,533
让我们来看看真正的东西
let's go on to real stuff

177
00:10:01,666 --> 00:10:03,933
释放后重用
 right use after free

178
00:10:05,666 --> 00:10:06,466
还记得
remember

179
00:10:07,866 --> 00:10:13,233
类似于栈上的内存分配
similar analogous to the allocation on the stack

180
00:10:13,633 --> 00:10:18,099
实际上并没有清除那里的数据
 not actually wiping out the data there

181
00:10:18,266 --> 00:10:20,466
概念上与之相似
you know conceptually similar to that 

182
00:10:20,533 --> 00:10:22,333
当释放指针指向的内存时
when you call free on a pointer

183
00:10:22,700 --> 00:10:27,866
如果你申请了内存
if you malloc something like this 

184
00:10:28,133 --> 00:10:29,266
然后你释放它
and then you free it

185
00:10:29,933 --> 00:10:32,866
那个指针还在那里
that pointer is still there 

186
00:10:33,000 --> 00:10:37,200
它依然指向那片旧内存
this still point at the old piece of memory

187
00:10:39,966 --> 00:10:40,866
为什么这不好?
why is this bad

188
00:10:40,866 --> 00:10:41,933
不好的原因是
this is bad because 

189
00:10:42,066 --> 00:10:44,166
如果你忘了已经读过了，然后
if you forget that you've read it and this happens

190
00:10:44,166 --> 00:10:45,866
显然在这个小例子中
obviously in the small example 

191
00:10:46,200 --> 00:10:47,866
是故意的
it you know this is a little contrived

192
00:10:47,900 --> 00:10:51,800
但在大型应用程序中，这种情况经常发生
but in a large application this happens depressingly frequently

193
00:10:51,800 --> 00:10:53,733
如果你忘了你释放了什么
if you forget that you freed something

194
00:10:54,500 --> 00:10:58,700
然后又使用了它
and you then use it

195
00:10:59,800 --> 00:11:01,733
它仍然是有效的内存
this is still valid memory

196
00:11:02,500 --> 00:11:05,100
问题是这一刻的它是空闲的
the problem is this memory the moment is free

197
00:11:05,100 --> 00:11:07,600
分配器可以用它干别的
the allocator could reuse it for something else

198
00:11:07,866 --> 00:11:09,199
在这个例子中
in this example

199
00:11:09,600 --> 00:11:11,800
当我们释放了user_input
when we free our user input

200
00:11:12,200 --> 00:11:14,700
然后分配一个变量
and we allocate a variable

201
00:11:14,700 --> 00:11:16,533
它用于确认用户是否被认证
that tells us if we are authenticated or not

202
00:11:16,533 --> 00:11:18,699
当我们在这里 输入时
when we then scanf here

203
00:11:19,400 --> 00:11:25,700
其实我们写入了authenticated变量
we are overriding our authenticated variable

204
00:11:25,766 --> 00:11:27,666
我们写在了这里
we're writing exactly into there

205
00:11:28,200 --> 00:11:29,000
好让我们
alright let's

206
00:11:29,000 --> 00:11:32,300
我来举个例子
let me show you this in an example

207
00:11:36,700 --> 00:11:40,533
这是释放重用的例子
here's our use after free on the heap um

208
00:11:44,166 --> 00:11:47,699
和幻灯片中的一样
the exactly the what what you saw in the previous slide

209
00:11:51,366 --> 00:11:52,999
好的，我们编译它
alright we compile that

210
00:11:53,600 --> 00:11:54,733
所以
so again

211
00:11:55,800 --> 00:11:56,266
实际上我们
actually let's

212
00:11:56,266 --> 00:11:58,999
我们先不演示释放重用
let's first compile it without the use after free

213
00:11:59,133 --> 00:12:01,533
假设我们没有释放堆
let's say we did not free the heap

214
00:12:02,166 --> 00:12:04,299
这里的用户输入变量
the user input variable here

215
00:12:04,600 --> 00:12:08,400
我们编译它，运行这个程序
we compile it we run this heap UAF

216
00:12:09,300 --> 00:12:12,600
姓名Yan，输出你好Yan，密码
name Yan says hello Yan password

217
00:12:15,533 --> 00:12:16,733
我不知道密码是多少
I don't know what the password is

218
00:12:16,733 --> 00:12:17,799
它什么也不做
it doesn't do anything

219
00:12:17,800 --> 00:12:19,766
让我们得到密码
let's get the the password

220
00:12:20,300 --> 00:12:20,800
当然
of course

221
00:12:20,800 --> 00:12:23,100
你知道怎么通过逆向工程获取密码
you know how to reverse engineer for a password

222
00:12:23,266 --> 00:12:24,666
Yan 密码
Yan password

223
00:12:25,500 --> 00:12:27,300
呃boom
uh boom

224
00:12:29,300 --> 00:12:30,133
好的
all right

225
00:12:31,300 --> 00:12:35,400
这是有道理的
so this makes sense right

226
00:12:35,400 --> 00:12:36,466
也很明显
also obviously

227
00:12:36,533 --> 00:12:37,866
如果你注意看的话（判断了uid是否等于0）
if you're paying attention 

228
00:12:38,100 --> 00:12:39,500
如果我以root用户运行
if I run this as root 

229
00:12:40,666 --> 00:12:43,766
我输入一个随机密码
and I put in a random password

230
00:12:45,000 --> 00:12:46,966
boom，它成功了
 boom it works 

231
00:12:47,700 --> 00:12:52,000
好吧，让我们恢复这个free
okay anyways let's restore this free

232
00:12:55,333 --> 00:12:56,133
编译它
compile it

233
00:12:57,533 --> 00:13:00,699
用用户Yan运行
run it as a just a user name Yan 

234
00:13:01,100 --> 00:13:07,300
密码，随机的或者不是正确的
password something random or not the correct password

235
00:13:08,133 --> 00:13:09,399
它仍然成功了
and it still works

236
00:13:11,100 --> 00:13:13,966
为什么，不好意思，为什么它还能用
why excuse me why does it still work

237
00:13:14,100 --> 00:13:22,300
它有效是因为
it works because 

238
00:13:24,533 --> 00:13:26,399
如果我们打印出user_input的地址
if we print out the address of user input

239
00:13:30,066 --> 00:13:32,299
再打印出authenticated的地址
and we print out the address of authenticated

240
00:13:39,400 --> 00:13:40,566
我们编译
and we compile

241
00:13:41,500 --> 00:13:42,400
执行
and we run

242
00:13:44,333 --> 00:13:47,499
所以user_input在是2b22a0
so user input is at this 2b22a 0

243
00:13:48,866 --> 00:13:51,299
authenticated 位于同一位置
authenticated is at the same location

244
00:13:51,700 --> 00:13:56,700
因为我们在这里释放了user_input
because we freed the user input here

245
00:13:56,766 --> 00:13:59,066
堆认为它没用了
the heap thinks it's no longer used

246
00:13:59,200 --> 00:14:03,800
这个指针没有改变
this pointer hasn't changed

247
00:14:06,266 --> 00:14:08,299
但是现在当我们这样做的时候
but now when we do this

248
00:14:11,533 --> 00:14:17,133
我们现在写了authenticated指向的内存
 we are now overriding the memory that authenticated points to

249
00:14:17,233 --> 00:14:20,033
authenticated指向的内存
 that authenticated pointer 

250
00:14:20,066 --> 00:14:25,766
而不是我们所想的user_input缓冲区
rather than what we're thinking of is the user input buffer

251
00:14:25,766 --> 00:14:27,733
这个缓冲已经不存在了
that buffer no longer exists

252
00:14:28,500 --> 00:14:29,300
很酷的
cool

253
00:14:29,900 --> 00:14:32,866
好的，这是释放重用
all right so this is used after free here

254
00:14:32,933 --> 00:14:33,733
哦
oops

255
00:14:33,900 --> 00:14:37,600
这是那个讲C的书
that is the C book

256
00:14:38,466 --> 00:14:40,666
技术问题先别急
hold on technical issues one second

257
00:14:42,166 --> 00:14:42,666
好吧
all right

258
00:14:42,666 --> 00:14:43,466
让我们
let's

259
00:14:44,000 --> 00:14:50,200
这里我们看到了覆盖其它变量的问题
so so there we saw an overwrite of a different variable

260
00:14:50,266 --> 00:14:55,333
释放重用可能会产生许多严重后果
use after free can have many many brutal consequences

261
00:14:55,333 --> 00:14:57,133
释放重用的存在的原则是
the bottom line in use after free is

262
00:14:57,300 --> 00:15:01,700
不同时期不同变量的内存有重叠
you have something that is basically overlapping memory with two meanings

263
00:15:04,866 --> 00:15:07,133
这是个坏消息
and that's bad news

264
00:15:07,133 --> 00:15:09,099
我待会再讨论这个问题
I'll revisit that in a sec all right

265
00:15:09,466 --> 00:15:10,533
另一个危险
another danger

266
00:15:10,866 --> 00:15:11,599
内存信息泄露
memory disclosure

267
00:15:11,600 --> 00:15:15,333
如果不往user_input里写
what if instead of writing to user input 

268
00:15:15,333 --> 00:15:17,466
而是从内存里读user_input呢
we had read from it right

269
00:15:20,100 --> 00:15:20,900
 

270
00:15:22,266 --> 00:15:23,099
一个简单的例子
the simple case 

271
00:15:25,600 --> 00:15:27,500
一个能说的通的例子
the case that makes sense

272
00:15:27,500 --> 00:15:28,666
你可以想象一下
you could imagine that

273
00:15:29,000 --> 00:15:31,200
程序不再存储一个authenticated变量
instead of storing an authenticated variable

274
00:15:31,333 --> 00:15:35,133
而是在那里存储了一个密码
the program stored a password there right

275
00:15:35,266 --> 00:15:38,333
然后我们可以用printf读取密码
and then we could read out that password with a printf

276
00:15:39,600 --> 00:15:42,566
但一个复杂的情况是
but a complicated case is that 

277
00:15:42,633 --> 00:15:45,399
一些堆实现包括
some heap implementations including

278
00:15:46,166 --> 00:15:47,999
我们主要关注的Ptmalloc
ptmalloc which is predominantly

279
00:15:48,133 --> 00:15:52,366
它也是我们在作业中会用到的
which is what we'll be using in the homework and so forth

280
00:15:52,566 --> 00:15:53,999
它会重新使用
 reuse 

281
00:15:54,133 --> 00:15:57,499
这些释放过的内存块
the memory space of those freedom chunks 

282
00:15:57,666 --> 00:16:00,133
来存储关于块本身的元数据
to store metadata about the chunks themselves 

283
00:16:00,133 --> 00:16:02,133
稍后我们将对此进行深入讨论
we will talk about this in depth later

284
00:16:02,333 --> 00:16:05,533
但现在先考虑这个程序
but for now considered this program

285
00:16:05,733 --> 00:16:09,299
它先释放name缓冲区
where we free the name buffer

286
00:16:11,600 --> 00:16:17,300
然后打印name缓冲区中的一些东西
and then we print something in the name buffer

287
00:16:17,400 --> 00:16:18,966
好吧，让我们看看
all right let's take a look

288
00:16:19,366 --> 00:16:19,666
好吧，抱歉
all right sorry

289
00:16:19,666 --> 00:16:22,199
我们打印出了name缓冲区，对吧
we print out the name buffer right

290
00:16:22,366 --> 00:16:25,933
当然，这在小程序中明显是人为的
this of course in a small program is kind of contrived

291
00:16:25,933 --> 00:16:28,599
但这在现实生活中确实经常发生
but it does happen in real life a lot

292
00:16:28,933 --> 00:16:30,899
好吧，快速看一下
all right take a quick look

293
00:16:31,866 --> 00:16:32,733
嗯
um

294
00:16:33,400 --> 00:16:36,100
下面是我们的堆泄露
here is our heap disclosure

295
00:16:37,566 --> 00:16:38,566
会说你好，我们的名字
it'll say hello our name 

296
00:16:38,566 --> 00:16:40,299
它会问我们密码
it'll ask us for our password

297
00:16:40,300 --> 00:16:45,500
老实说，这样做是为了设置堆
honestly they're doing this to warm up the to set up the heap

298
00:16:45,733 --> 00:16:47,933
然后它会问我们的名字
then it'll ask us for our name

299
00:16:49,300 --> 00:16:55,100
然后它会在释放name后打印再见name
and then it will print goodbye our name after freeing our name

300
00:17:00,733 --> 00:17:03,399
好的，运行它
okay so run it

301
00:17:03,966 --> 00:17:04,799
密码
password

302
00:17:06,066 --> 00:17:06,866
名字
name

303
00:17:08,700 --> 00:17:09,533
所以它说你好
so it says hello

304
00:17:09,533 --> 00:17:10,333
Yan
Yan

305
00:17:11,133 --> 00:17:12,466
然后它就释放了
then it frees

306
00:17:13,000 --> 00:17:14,966
释放了name，然后说再见name
does this free name and then says goodbye

307
00:17:14,966 --> 00:17:17,066
这应该是Yan，但现在不是Yan了
and what should be Yan but it's not Yan anymore

308
00:17:17,066 --> 00:17:18,599
而是一些乱码
it's some crazy stuff

309
00:17:19,300 --> 00:17:21,500
让我们把它通过管道传给
let's pipe it through

310
00:17:27,300 --> 00:17:28,333
复制它
copy it

311
00:17:31,300 --> 00:17:32,766
通过管道传给hexdump
i'll just pipe it through hexdump

312
00:17:34,000 --> 00:17:35,466
输入密码
put the password

313
00:17:35,900 --> 00:17:36,966
名字，好了
the name all right

314
00:17:37,466 --> 00:17:39,999
它问了我密码
so it had told me password

315
00:17:40,000 --> 00:17:42,400
然后我输入密码，它问我名字
 and then I put in the password and it asked me for the name

316
00:17:42,466 --> 00:17:44,466
说你好，Yan，这里说再见
says hello Yan and here says goodbye

317
00:17:44,466 --> 00:17:45,666
然后是一些东西
and then some stuff

318
00:17:46,300 --> 00:17:49,900
好的，到感叹号这部分是什么东西
right and what is this stuff up to the exclamation point

319
00:17:49,933 --> 00:17:52,266
感叹号在ASCII中是0x21
exclamation point in ASCII is hex 21

320
00:17:52,500 --> 00:18:01,300
在它之前是07752a0
so before that it had 07 75 02 a0

321
00:18:05,500 --> 00:18:06,100
好吧
all right

322
00:18:06,100 --> 00:18:07,333
等一下，让我重执行一遍
hold on let me rerun that

323
00:18:07,333 --> 00:18:09,166
我可能不走运遇到了空字节
I think we got unlucky with a null byte

324
00:18:11,933 --> 00:18:12,599
好了
there we go

325
00:18:12,600 --> 00:18:14,700
好了，我们不像之前碰到了一个空字节
all right we have gotten unlike it with a null byte

326
00:18:14,700 --> 00:18:16,500
当然，printf会在空字节处停止
of course printf stops on a null byte

327
00:18:17,166 --> 00:18:19,333
它说再见，然后这里
so it says goodbye and then here

328
00:18:19,500 --> 00:18:25,700
55 71 7c 8C f2 a0
55 71 7c 8C f2 a0

329
00:18:26,100 --> 00:18:31,400
这看起来像一个堆地址
this looks like a heap address right let's run 

330
00:18:35,600 --> 00:18:39,900
让我们再运行这个程序，将结果传给hexdump
this heap disclosure through a hex dump

331
00:18:40,200 --> 00:18:41,600
在另一边
in a different thing

332
00:18:43,700 --> 00:18:47,700
我们打印出它的进程映射
let's cut out its mappings

333
00:18:49,800 --> 00:18:52,300
堆位于557b20
the heap is at 55 7b20

334
00:18:52,300 --> 00:18:58,200
哦，对不起，557b 230b 8000
oh sorry 55 7b 23 0B 80 00

335
00:19:00,200 --> 00:19:01,666
密码，名字
password name

336
00:19:03,166 --> 00:19:05,799
557 b 230 b
557b 230b 

337
00:19:05,800 --> 00:19:08,600
当然，它是堆中的某个地址
and then of course it's partially some address in the heap

338
00:19:08,600 --> 00:19:10,700
82 a0
82 a0

339
00:19:12,200 --> 00:19:13,700
好的，通过
all right so with a

340
00:19:16,933 --> 00:19:19,133
通过使用释放后的东西
by using something after its freed

341
00:19:19,900 --> 00:19:21,500
我们可以泄露内存
we can disclose memory 

342
00:19:21,500 --> 00:19:24,800
泄露堆的元数据
disclose metadata that the heap uses

343
00:19:25,366 --> 00:19:26,299
或其他数据
or other

344
00:19:26,533 --> 00:19:29,366
如果它现在已经被重新分配并且正在使用
if it has now been allocated again and is being used

345
00:19:29,366 --> 00:19:34,799
就会泄露其它应用程序使用的数据
disclosed information other data used by the program

346
00:19:35,933 --> 00:19:36,866
和
and

347
00:19:40,800 --> 00:19:45,800
抱歉，我愣了一下
sorry I'm having a brain dump one second

348
00:19:48,100 --> 00:19:48,900
好吧
okay

349
00:19:49,466 --> 00:19:50,299
然后
and

350
00:19:51,700 --> 00:19:55,200
从那里获得程序的信息
you know from there gain knowledge by the program

351
00:19:55,300 --> 00:19:57,766
通过内存错误，ROP等等
you know from memory errors and ROP and so forth

352
00:19:57,766 --> 00:20:00,766
你应该知道一个指针有多有用
how useful knowing a pointer can be

353
00:20:03,366 --> 00:20:03,666
好吧
all right

354
00:20:03,666 --> 00:20:06,999
堆的终级危险：元数据破坏
the ultimate danger of the heap metadata corruption

355
00:20:07,000 --> 00:20:09,066
我们刚刚读出了元数据
we just read out that metadata right

356
00:20:09,200 --> 00:20:12,900
如果我们写入元数据呢
what if we wrote over that metadata right

357
00:20:12,966 --> 00:20:15,533
这会导致分配器发疯
this causes the allocator to go insane

358
00:20:15,666 --> 00:20:18,199
分配器信任它的元数据
the allocator trusts its metadata

359
00:20:18,933 --> 00:20:21,766
它非常不愿意不相信这些元数据
and it is very reluctant not to trust this metadata

360
00:20:21,766 --> 00:20:27,599
因为这需要开发高消耗的处理功能
because that causes costly workarounds to be developed right

361
00:20:27,700 --> 00:20:32,100
这是关于安全性与性能的一个重要争论
this is one of the big security versus performance arguments

362
00:20:32,200 --> 00:20:34,500
元数据究竟有多可信
is how trustworthy is this metadata

363
00:20:34,566 --> 00:20:36,933
事实证明它根本不值得信任
turns out it's not trustworthy at all

364
00:20:36,933 --> 00:20:40,066
我们知道这一点已经20年了
and we've known this for two decades now

365
00:20:40,066 --> 00:20:42,166
回到2000年
back in the year 2000

366
00:20:44,533 --> 00:20:45,566
太阳设计师
Solar Designer

367
00:20:45,566 --> 00:20:50,699
你已经在ROP模块中认识过太阳设计师
you have seen Solar Designer in the module on return orient programming

368
00:20:51,066 --> 00:20:55,699
太阳设计师创造、建议或至少发表
Solar Designer created or proposed or at least published

369
00:20:55,800 --> 00:20:59,300
过原始的ret2libc技术
 on the original return to libc technique

370
00:21:01,066 --> 00:21:03,666
太阳设计师还
turns out Solar Designer also

371
00:21:05,400 --> 00:21:09,800
开发了一个早期的堆元数据破坏漏洞利用方法
developed one of the early heap metadata corruption exploits

372
00:21:10,300 --> 00:21:11,700
创建于2000年
created in 2000 

373
00:21:12,933 --> 00:21:17,299
到2001年，这在黑客文献中被确定下来
by 2001 this was formalized in hacker literature

374
00:21:18,333 --> 00:21:22,166
具体来说，你可以看到这两篇phrack的文章
specifically you can see these two phrack articles

375
00:21:22,166 --> 00:21:24,333
很久很久以前的事了
you know very very long time ago

376
00:21:24,700 --> 00:21:28,700
人们破坏元数据，做一些疯狂的事情
people were corrupting metadata and doing crazy stuff

377
00:21:29,333 --> 00:21:31,699
或者强迫分配器做一些疯狂的事情
or forcing the allocator to do crazy stuff

378
00:21:31,700 --> 00:21:34,500
这是现在黑客界的一个完整的流派
this is now a whole genre in the hacking scene

379
00:21:34,500 --> 00:21:36,066
为什么它是一种流派
why is it a genre in part

380
00:21:36,666 --> 00:21:39,066
因为人们对它有点疯狂
because people went a little crazy with it

381
00:21:41,566 --> 00:21:45,199
一个名叫Phantasmal Phantasmagoria的黑客
hacker by the name of Phantasmal Phantasmagoria

382
00:21:45,666 --> 00:21:48,299
开发了一套关于堆元数据损坏的知识
developed the lore around heap metadata corruption

383
00:21:48,566 --> 00:21:50,066
并且这个2005年的邮件列表
 and this mailing list in 2005

384
00:21:50,366 --> 00:21:54,399
在堆元数据损坏攻击被发明的五年后
five years after the invention of Heap metadata corruption attacks

385
00:21:54,466 --> 00:21:56,599
或者至少是关于它们的第一次讨论
or at least the first discussion of them

386
00:21:57,666 --> 00:21:59,366
Phantasmal Phantasmagoria
Phantasmal Phantasmagoria

387
00:21:59,766 --> 00:22:01,699
描述了一些这样的技术
described a bunch of these techniques 

388
00:22:01,800 --> 00:22:04,800
给他们起了这些疯狂的名字
and named that these insane names

389
00:22:04,800 --> 00:22:05,900
人们
that people are

390
00:22:09,733 --> 00:22:12,099
目前尚不清楚为什么选择这些名字
it's not clear why these names were chosen

391
00:22:12,100 --> 00:22:14,300
但是人们延用了这个格式
but people really jumped on them

392
00:22:15,100 --> 00:22:17,366
有house of prime，house of mind
there's you know the house of prime the house of mind

393
00:22:17,366 --> 00:22:18,766
house of force等
the house of force etc

394
00:22:18,700 --> 00:22:22,800
这些中的很多到现在依旧有用
are many of these stayed around until very recently

395
00:22:22,866 --> 00:22:25,299
house of force在
the house of force was valid as of

396
00:22:25,666 --> 00:22:28,133
上次我用ubuntu 1804教这门课时依旧有效
the last time I taughted this class in ubuntu 1804

397
00:22:28,133 --> 00:22:30,299
你仍然可以尝试用house of force 
you can still do house of force 

398
00:22:30,500 --> 00:22:32,966
但不幸的是，现在它已经有点落后了
but now it is unfortunately behind us

399
00:22:33,266 --> 00:22:35,099
house of spirit还是可以用的
the house of spirit is still doable

400
00:22:35,400 --> 00:22:36,933
这很不可思议，对吧?
which is incredible right

401
00:22:37,800 --> 00:22:40,366
我们会在以后的几个视频中学习它
and we'll learn about it a couple of videos from now

402
00:22:40,933 --> 00:22:43,366
然后事情很快就失控了
and then things got out of hand quick 

403
00:22:44,400 --> 00:22:48,200
所以人们开始创造出更多的house系列
so people have started adding more and more houses

404
00:22:48,500 --> 00:22:51,100
探索出新的搞堆技术
as they discover additional techniques to mess with the heap

405
00:22:52,000 --> 00:22:55,866
最近的趋势是house of
a recent trend has gotten to making house of

406
00:22:55,933 --> 00:22:57,066
加上你的handle
and then your handle

407
00:22:57,533 --> 00:23:00,466
比如house of Orange, house of botcake等等
so there's house of Orange House of botcake etc

408
00:23:01,500 --> 00:23:08,200
这些对堆漏洞的研究不会停止
these are a perpetual study of heap vulnerability

409
00:23:08,300 --> 00:23:13,733
你可以在一个repository里看到这些研究
 and you can actually see these houses explored

410
00:23:15,633 --> 00:23:23,699
由黑客团队Shellphish提供
in a repository from Hacking Team Shellphish

411
00:23:27,800 --> 00:23:31,100
我在这个团队打了10年Defcon
the Hacking Team with whom I competed at Defcon for 10 years

412
00:23:33,200 --> 00:23:37,400
他们维护了一个列表，里面有很多不同的libc攻击
they maintain a list of a whole lot of different libc attacks

413
00:23:37,866 --> 00:23:39,499
比如house of spirit
for example house of spirit

414
00:23:39,566 --> 00:23:40,899
你可以浏览
and you can click through

415
00:23:41,000 --> 00:23:44,400
看到它在不同版本的libc中是如何工作的
and you can see how it works for different versions of libc

416
00:23:44,600 --> 00:23:47,600
他们有一个C程序
they have a C programs that actually

417
00:23:48,800 --> 00:23:50,100
或者看一下house of botcake吧
or house of botcake

418
00:23:50,200 --> 00:23:53,133
这个程序演示了攻击
that demonstrate the attack against themselves

419
00:23:53,733 --> 00:23:55,499
非常漂亮的东西
pretty pretty slick stuff

420
00:23:57,400 --> 00:23:57,666
顺便说一下
by the way

421
00:23:57,666 --> 00:23:59,499
如果你在经营一个黑客俱乐部
if you're running a hacking club 

422
00:23:59,566 --> 00:24:02,099
我强烈建议你这样做
I highly recommend doing something like this

423
00:24:02,466 --> 00:24:05,766
当我们创建house of 的时候 house of 哈哈
when we created house of house of 

424
00:24:05,766 --> 00:24:08,033
在shellphish创建的"如何heap"
when we created how to heap with shellphish 

425
00:24:08,166 --> 00:24:10,199
就是我们学习堆的方法
this is how we Learned the heap

426
00:24:10,200 --> 00:24:11,866
通过创建这个存储库
by creating this repository

427
00:24:11,866 --> 00:24:12,799
太好了
it was incredible

428
00:24:13,900 --> 00:24:14,700
好吧
all right

429
00:24:16,200 --> 00:24:17,000
不管怎样
anyways

430
00:24:20,500 --> 00:24:23,500
这里有很多不同的技术
a lot of the the various techniques here

431
00:24:23,666 --> 00:24:26,299
有很多，不是全部
many of them not all and 

432
00:24:28,900 --> 00:24:38,500
很多不同安全相关的滥用策略
many of the different strategies toward abusing for security reasons

433
00:24:38,533 --> 00:24:41,333
程序中的堆错误
a heap bug in a program

434
00:24:41,800 --> 00:24:46,500
都与欺骗分配器返回重叠分配有关
has to do with trying to trick the allocator into returning overlapping allocations

435
00:24:48,200 --> 00:24:50,933
或者说返回重叠的内存
or into returning overlapping memory

436
00:24:50,900 --> 00:24:54,200
基本上如果在你的程序中有
basically if you have in your program

437
00:24:54,333 --> 00:24:56,933
指向同一内存的两个指针
two pointers that point to the same memory

438
00:24:57,000 --> 00:25:00,900
但其中一个指针被视为安全关键因素
but one of those pointers is treated as a security critical thing

439
00:25:01,100 --> 00:25:05,400
就像我们在示例中看到的身份校验变量一样
like an authentication variable as we saw in an example

440
00:25:05,400 --> 00:25:08,800
或者一个函数指针或者其他一些程序元数据等等
or a function pointer or some other program metadata etc

441
00:25:08,933 --> 00:25:12,366
另一个不被视为安全关键
and the other one is not treated as security critical

442
00:25:13,100 --> 00:25:16,900
例如，允许直接向它写入用户输入
for example allowing user input to be written directly to it

443
00:25:17,366 --> 00:25:19,266
这里说的是程序期望的正常用户输入
by the normal operation of the program

444
00:25:19,300 --> 00:25:20,400
然后游戏结束
then its game over

445
00:25:20,466 --> 00:25:22,333
你的程序被入侵了
your program has been compromised

446
00:25:23,666 --> 00:25:25,333
这能被直接攻破
this can be a direct compromise

447
00:25:25,333 --> 00:25:28,799
以安全关键的视角看那块内存
if you are security critical view of that memory

448
00:25:29,200 --> 00:25:33,266
你认为它是专门用来存储状态结构体的
you think is dedicated to holding some state 

449
00:25:38,433 --> 00:25:40,999
里面有函数指针
structure that has function pointers in it

450
00:25:41,066 --> 00:25:42,499
随着这些函数指针
and you follow those function pointer

451
00:25:42,500 --> 00:25:44,166
你直接调用这些函数指针
you call directly to those function pointers

452
00:25:44,200 --> 00:25:47,166
然后通过另一个视角进入相同的内存
and then through a different view into the same memory

453
00:25:47,400 --> 00:25:49,166
因为重叠的分配
because of an overlapping allocation 

454
00:25:49,266 --> 00:25:52,533
因为堆误用，您可以覆盖这些指针
because of a heap misuse you can override those pointers

455
00:25:52,666 --> 00:25:54,599
显然，您可以劫持控制流
obviously you can redirect control flow

456
00:25:55,366 --> 00:25:58,299
通常还有元数据
oftentimes there is metadata

457
00:25:58,300 --> 00:26:02,700
比如其他结构的长度
 such as the length of some other structure for example

458
00:26:03,300 --> 00:26:04,466
你可以重写它
that you can overwrite

459
00:26:04,600 --> 00:26:06,133
这就导致
and then this causes

460
00:26:07,000 --> 00:26:09,466
一些更传统的漏洞
there are sometimes more traditional vulnerabilities

461
00:26:09,466 --> 00:26:12,699
例如栈上的溢出
such as overflows on the stack for example

462
00:26:13,300 --> 00:26:16,066
通常就是敏感数据
oftentimes there's just straight up sensitive data

463
00:26:16,866 --> 00:26:20,899
存储在堆上的敏感数据
that is on the living in the heap

464
00:26:20,900 --> 00:26:24,633
你能找到一个和它有重叠的变量
that you can get an overlap 

465
00:26:24,633 --> 00:26:25,599
然后读出敏感数据
and read it out

466
00:26:27,700 --> 00:26:35,700
在这个模块的挑战问题中你一般会
in general what you will see  and do with the challenge problems for this module 

467
00:26:36,200 --> 00:26:38,100
尝试些疯狂的方法
is trying to do really crazy stuff

468
00:26:38,266 --> 00:26:40,633
来得到重叠分配
to get overlapping allocations 

469
00:26:40,633 --> 00:26:42,599
然后滥用它来获得flag
and then abuse that to get the flag

470
00:26:44,000 --> 00:26:46,666
现在我们将深入探讨
and now we will dive deeper into

471
00:26:47,166 --> 00:26:49,066
你将要尝试的疯狂方法
the crazy stuff you will be doing

