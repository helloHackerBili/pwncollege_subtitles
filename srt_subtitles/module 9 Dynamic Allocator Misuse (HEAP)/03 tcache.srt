1
00:00:01,300 --> 00:00:02,600
你好黑客
hello hackers

2
00:00:02,800 --> 00:00:07,800
欢迎回到pwn学院动态分配器误用模块
welcome to the next video in the Dynamic Allocator Misuse's module of pwn College

3
00:00:08,100 --> 00:00:12,066
我是Yan，我们将讨论Tcache
I'm Yan and we'll be talking about Tcache

4
00:00:12,666 --> 00:00:14,266
什么是Tcache ?
what is Tcache

5
00:00:14,500 --> 00:00:18,133
Tcache是线程本地缓存的缩写
Tcache is short for thread local caching

6
00:00:18,133 --> 00:00:19,933
这是一个ptmalloc特性
it is a ptmalloc feature

7
00:00:20,500 --> 00:00:22,500
是最近几年创建的
created in the last couple of years

8
00:00:22,966 --> 00:00:24,666
还在不断发展
and constantly evolving 

9
00:00:24,666 --> 00:00:28,799
这让教学变得很有挑战性
which makes it actually challenging to teach about

10
00:00:29,000 --> 00:00:32,166
这加速了重复申请小的
that speeds up repeated small

11
00:00:32,100 --> 00:00:35,700
小于等于一内存页大小的
and we're talking about things that roughly a page in size or less

12
00:00:35,700 --> 00:00:40,000
在单个线程中的内存分配
allocations in a single thread

13
00:00:41,266 --> 00:00:43,299
现代处理器都是多核的
modern processors are heavily multi core

14
00:00:43,300 --> 00:00:45,733
越来越多的应用程序支持多线程
applications are becoming more and more threaded

15
00:00:46,400 --> 00:00:51,200
所以分配器的线程性能非常重要
and so thread performance for an allocator is very important now

16
00:00:51,800 --> 00:00:56,133
Tcache在ptmalloc中处于这样的位置
Tcache is positioned in such a way in ptmalloc that

17
00:00:56,166 --> 00:01:04,199
你主要通过它与malloc交互
it will be the primary malloc functionality that you will be interacting with

18
00:01:04,366 --> 00:01:07,533
它可能是最重要的部分
this is probably the most important part

19
00:01:07,533 --> 00:01:09,399
至少在挑战问题中
at least to approach the challenge problems

20
00:01:09,400 --> 00:01:15,000
还有在一般探索分配器安全的过程中
 and in your exploration of allocator security in general

21
00:01:15,900 --> 00:01:19,800
那么Tcache是如何工作的呢
all right so how does Tcache work

22
00:01:19,800 --> 00:01:24,100
Tcache是用单链表实现的
well Tcache is implemented as a singly linked list

23
00:01:25,100 --> 00:01:29,000
我们将快速看一下这个单链表
we're going to go through a quick recap what a singly linked list is

24
00:01:29,700 --> 00:01:34,900
每个线程对于不同大小的内存块都有对应的链表
each thread has a list header for different sized allocations

25
00:01:35,400 --> 00:01:37,333
基本上是这样的
basically what happens is

26
00:01:37,400 --> 00:01:39,500
在每个线程中都有一个
in each thread there's one instance of this

27
00:01:39,500 --> 00:01:41,266
Tcache_perthread_struct
Tcache_perthread_struct

28
00:01:41,266 --> 00:01:43,666
这就是为什么它名字中有perthread_struct
that's why it's called per thread struct

29
00:01:43,700 --> 00:01:50,600
在结构体中有一个tcache_entry指针数组entries
and in the struct there is a array of Tcache entry pointers

30
00:01:52,100 --> 00:01:58,500
每个指针都指向一个tcache_entry单链表
each of which point to the beginning of a list of Tcache entries 

31
00:01:58,600 --> 00:02:00,166
这些单链表装着之前释放的内存
of allocations that were previously freed

32
00:02:00,300 --> 00:02:03,566
它们可以非常快速地被复用
and can be very quickly reused

33
00:02:03,766 --> 00:02:06,366
这些内存
and these allocations

34
00:02:07,300 --> 00:02:08,766
这些单链表被称为bin
these different lists are called bins 

35
00:02:09,033 --> 00:02:14,299
不同的bin装不同大小的内存
they are all lists of an allocation of a certain size

36
00:02:15,500 --> 00:02:16,866
堆分配倾向于
heap allocations tend to 

37
00:02:16,866 --> 00:02:22,966
在分配时四舍五入到最接近的某个大小
round to the nearest some amount of size when they're allocated 

38
00:02:22,966 --> 00:02:25,499
所以你…在这个分配中……
and so you ... in this allocation ...

39
00:02:28,366 --> 00:02:29,699
让我理一下思路
let me click my thoughts

40
00:02:30,700 --> 00:02:32,566
不同大小的内存块放到不同的列表
different sized allocations going to different lists

41
00:02:32,566 --> 00:02:34,466
让我们看一下示意图
let's take a look at this graphically

42
00:02:35,200 --> 00:02:36,933
看看这个链表是如何工作的
take a look at how this linked list works

43
00:02:36,933 --> 00:02:38,933
这是 entry 数组
so here is the entry array

44
00:02:39,400 --> 00:02:45,700
我将演示这些内存块是如何被再次选中的
and I'll determine exactly how these allocations are selected again 

45
00:02:45,900 --> 00:02:47,233
原则是
but the bottom line is 

46
00:02:47,366 --> 00:02:55,199
在tcache_perthread_struct的前几个entry
the first couple of entries in the Tcache per thread struct

47
00:02:56,500 --> 00:03:00,466
entry 0放16字节内存块
entry 0 is 16 byte allocations

48
00:03:00,533 --> 00:03:01,933
所以如果调用malloc 16（就从entry 0 中取内存块）
so if you malloc 16 

49
00:03:02,166 --> 00:03:06,866
entry 1是malloc 32。entry 2是malloc 48，以此类推
entry 1 is malloc 32. entry 2 is malloc 48 and so on

50
00:03:07,066 --> 00:03:08,399
以16字节递增
incrementing in 16

51
00:03:08,400 --> 00:03:09,200
好吧
all right

52
00:03:09,533 --> 00:03:11,133
有一个tcache_perthread_struct实例
there is one copy of a struct

53
00:03:11,133 --> 00:03:12,533
我们就叫它Ben
we're going to call it Ben here

54
00:03:12,500 --> 00:03:17,600
这样就可以用名字指代它
so that we can refer to it by name and

55
00:03:19,000 --> 00:03:21,900
并且Tcache列表中的每个entry 
each entry in the Tcache list

56
00:03:21,900 --> 00:03:25,333
额，这是一个指针数组
so this is a pointer array in which

57
00:03:26,300 --> 00:03:30,666
数组元素是Tcache entry 列表的头节点指针
the element is the head of a list of Tcache entries

58
00:03:30,900 --> 00:03:36,400
所以这里的tcache_entry都是先前分配的内存块
so each of these entries is actually the allocation itself

59
00:03:36,566 --> 00:03:37,699
当你释放它时
when you free it

60
00:03:37,800 --> 00:03:40,466
它原来放数据的位置被重用来保存这些指针
its data is reused to hold these pointers

61
00:03:40,466 --> 00:03:45,499
有两个指针，一个指向列表中下一个内存块
so two pointers are going to be a pointer to the next allocation in that list

62
00:03:45,666 --> 00:03:48,733
还有一个指向Ben
and a pointer to the original structure Ben here

63
00:03:49,933 --> 00:03:52,966
我们来看看这是怎么建立起来的
let's see how this is set up

64
00:03:53,700 --> 00:03:56,400
好，想象一下这个场景
all right imagine this scenario right

65
00:03:56,700 --> 00:04:04,900
我会解释左边的代码是如何变成右边的这个图的
and I'll explain how this scenario gets to this view that we had previously

66
00:04:05,000 --> 00:04:09,600
我要把视频关掉一秒钟来提一件事
I'm going to turn off my video for one second to mention one thing

67
00:04:11,166 --> 00:04:15,299
在这里，我们malloc出了这些东西
over here we malloc a bunch of these guys right

68
00:04:15,300 --> 00:04:17,466
当我们释放它们，最终
these all end up when we free them

69
00:04:17,500 --> 00:04:22,000
它们会被添加到缓存中以供以后使用
end up getting added to the cache for later we use

70
00:04:22,766 --> 00:04:25,566
如果我们申请了但不释放
when we malloc stuff and don't free it

71
00:04:25,566 --> 00:04:26,599
就和tcache没有任何关系了
there's nothing to do with the cache

72
00:04:26,600 --> 00:04:28,600
你只是在某处有一块内存
you're just hanging out somewhere in memory

73
00:04:29,000 --> 00:04:31,500
你必须free些东西
until you free something

74
00:04:31,566 --> 00:04:33,166
否则tcache不会被用到
Tcache doesn't come into play

75
00:04:34,000 --> 00:04:34,800
好吧
all right

76
00:04:35,100 --> 00:04:37,266
我把视频打开继续
let's get my video back and roll on

77
00:04:37,266 --> 00:04:38,299
如何变成这样的呢？
alright how did we get here

78
00:04:38,300 --> 00:04:43,033
让我们从分配完这些内存开始
let's start from the end of this the allocation part 

79
00:04:43,800 --> 00:04:47,200
这里我们分配了一大堆数据区域
here we allocated a whole bunch of of data regions

80
00:04:47,666 --> 00:04:50,899
我们在这里分配了a b c d e和f
we allocated a b c d e and f here

81
00:04:51,300 --> 00:04:53,600
它们的大小各不相同
they all are of different sizes

82
00:04:54,066 --> 00:04:55,866
现在我们要开始释放他们了
right and now we're about to start freeing them

83
00:04:55,866 --> 00:04:59,366
现在，还没有东西被释放
so right now when nothing is freed

84
00:04:59,500 --> 00:05:03,700
当所有缓存都是空的
when everything you know the cache is empty

85
00:05:04,800 --> 00:05:07,300
所有的计数都是0
we have all of the counts at zero

86
00:05:07,300 --> 00:05:09,633
以及所有的entry都指向NULL
and all of the entries at null

87
00:05:10,166 --> 00:05:11,599
然后我们释放 b
then we free b

88
00:05:12,266 --> 00:05:14,199
释放 b 时会发生什么呢
so what happens when we free b

89
00:05:15,366 --> 00:05:17,933
我们增加计数，然后把它放入缓存
we increment the count we put it in the cache

90
00:05:17,933 --> 00:05:21,133
所以现在有一个16字节的东西
so now there's one thing one 16 byte

91
00:05:21,400 --> 00:05:23,166
b 是一个16字节的内存块
b was a 16 byte allocation

92
00:05:23,300 --> 00:05:26,566
缓存中的一个16字节entry 
one 16 byte entry in the cache

93
00:05:26,600 --> 00:05:33,800
所以我们把16字节元素计数设为1
so we put the 16 byte element of count to 1

94
00:05:34,666 --> 00:05:35,466
然后
and then

95
00:05:36,066 --> 00:05:40,266
这个 entry 指针指向B
this entry pointer we point to B

96
00:05:40,266 --> 00:05:42,299
表示这是第一个（释放的）分配
says hey there's that first allocation

97
00:05:42,900 --> 00:05:44,133
然后我们释放a
but then we free a

98
00:05:44,866 --> 00:05:46,299
当我们释放A时会发生什么
right what happens when we free A

99
00:05:46,300 --> 00:05:47,366
计数变成了2
well the count becomes two

100
00:05:47,366 --> 00:05:51,733
现在在 Tcache 中有两个16字节的内存块
now there are two 16 byte allocations in the Tcache

101
00:05:52,333 --> 00:05:55,199
我们把指针指向了a
we changed the pointer to a

102
00:05:55,266 --> 00:05:58,733
然后把a的next指针指向B
and then we change the next pointer of a to B

103
00:05:59,166 --> 00:06:01,599
b的next指针是Null
right the next pointer of b is null

104
00:06:01,666 --> 00:06:03,066
因为B之后什么都没有
because there is nothing after B

105
00:06:03,300 --> 00:06:05,300
它是第一个被放到缓存的
it was the first thing to get put in the cache

106
00:06:05,300 --> 00:06:09,100
它们都有这个 key 指针
and all of them have this key pointer which

107
00:06:09,133 --> 00:06:10,566
我也不知道为什么他们叫 key
actually I don't know why they call the key

108
00:06:10,566 --> 00:06:14,799
但他们都指向tcache_perthread_struct
but it points back to the Tcache per thread struct

109
00:06:18,000 --> 00:06:21,800
他们就是这样判断
that is how they can tell 

110
00:06:21,833 --> 00:06:27,066
当前在哪个缓存中
which cache this is currently in

111
00:06:27,500 --> 00:06:32,500
我们马上会讲到为什么ptmalloc需要知道这个
and we'll talk about why they need to why ptmalloc needs to know that in a second

112
00:06:33,000 --> 00:06:35,600
然后我们把列表头更新为a
all right and then we update the head of the list to a

113
00:06:35,600 --> 00:06:38,733
所以现在perthread结构体对应的列表头
so now the head of the list from the perthread struct

114
00:06:38,966 --> 00:06:40,199
指向a
this points to a

115
00:06:40,666 --> 00:06:42,299
然后a指向b
and then a points to B

116
00:06:42,733 --> 00:06:43,999
这是一个单链表
that is a singly linked list 

117
00:06:44,200 --> 00:06:47,700
有一个前向指针
there's one forward pointer

118
00:06:48,400 --> 00:06:51,400
在双链表中则会有b指向a
In a double linked list would also have b pointing back to a

119
00:06:51,733 --> 00:06:53,199
相反，这是一个单链表
instead this is a singly linked list

120
00:06:53,200 --> 00:06:57,500
然后它们都指向perthread结构体
and then they all point to the perthread struct

121
00:06:57,566 --> 00:06:59,399
好的，当我们要释放 F 时会发生什么
alright what happened when we gonna be free F

122
00:06:59,400 --> 00:07:03,133
F有点不同，因为F有32字节长
F is a little different because F was 32 bytes long

123
00:07:03,733 --> 00:07:04,899
所以当它释放f
so when it free f

124
00:07:05,700 --> 00:07:09,500
我们最终使用了不同的entry
we end up using a different entry

125
00:07:10,366 --> 00:07:12,199
32字节的entry 
the 32 byte entry

126
00:07:12,200 --> 00:07:13,100
基本上
right basically

127
00:07:13,100 --> 00:07:14,166
我们计算entry下标的方法是
the way we compute the entry is

128
00:07:14,433 --> 00:07:17,999
只要把大小除以16
just divide the size by 16

129
00:07:18,866 --> 00:07:22,266
这是第一个，这是第二个，对吧
so this is the first one this is the second one right

130
00:07:22,333 --> 00:07:23,399
第二个entry 
second entry

131
00:07:26,166 --> 00:07:27,866
这和我们放入b是一样的
same thing as when we put b in there

132
00:07:27,866 --> 00:07:30,366
它是32字节中唯一的，所以next是Null
it's the only thing so the next is null

133
00:07:30,466 --> 00:07:31,599
key是Ben
the key is ben

134
00:07:31,600 --> 00:07:34,633
32的计数置为1
the count for 32 is 1 

135
00:07:34,633 --> 00:07:38,799
32的指针是F
and the pointer for the 32 is F

136
00:07:39,400 --> 00:07:40,200
好的
cool

137
00:07:40,266 --> 00:07:41,733
然后我们释放E
alright then we free E

138
00:07:41,966 --> 00:07:44,466
同样的事情发生了，计数现在是2
same thing happens so the count is now 2

139
00:07:44,733 --> 00:07:46,666
E现在是链表的表头
E is now at the head of the list

140
00:07:46,800 --> 00:07:47,766
E指向F
E points to F

141
00:07:48,466 --> 00:07:49,799
当我们释放C
when we free C

142
00:07:50,333 --> 00:07:51,399
计数就到了3
now the count is 3

143
00:07:51,500 --> 00:07:54,400
这些都是32字节的内存块
these are all 32 byte allocations

144
00:07:54,900 --> 00:07:58,200
列表的头指向最近释放的内存块c
the head of the list points to c that was the most recently freed thing

145
00:07:58,266 --> 00:08:00,266
它被放在头部的原因是
and the reason that it get put in the head is

146
00:08:00,266 --> 00:08:02,733
这对内存的修改最小
that is the few amount of memory operations

147
00:08:02,733 --> 00:08:06,499
只要修改这个和这个
all you have to do is update this and update this

148
00:08:06,666 --> 00:08:08,799
其他一切都保持不变，这很好
everything else stays the same which is very nice

149
00:08:09,400 --> 00:08:13,933
然后 entry 指向C
so and then the entry points to C

150
00:08:14,100 --> 00:08:15,400
C指向E
 C points to E

151
00:08:15,466 --> 00:08:16,633
E指向F
E points to F 

152
00:08:16,633 --> 00:08:17,399
F指向Null
F points to null

153
00:08:17,400 --> 00:08:19,300
他们都用key指向Ben
and they all point back to Ben

154
00:08:19,533 --> 00:08:22,966
那个tcache_perthread_struct结构体
to the Tcache per threadstruct with their key

155
00:08:23,700 --> 00:08:26,300
最后，当我们释放d的时候
all right and then finally when we free d

156
00:08:26,300 --> 00:08:28,400
D是一个48字节的分配
d is a 48 byte allocation

157
00:08:29,066 --> 00:08:32,266
它被放进自己的bin里
and it goes into its own bucket its own bin

158
00:08:32,266 --> 00:08:35,299
现在bin里只有一个内存块，然后
and there's now one thing in that bin and then

159
00:08:37,766 --> 00:08:40,599
entry指向d, d指向空
the head points to d and d points to null

160
00:08:40,766 --> 00:08:41,966
当我们释放所有这些
as we free all of these

161
00:08:41,966 --> 00:08:45,199
注意那些没有被释放的没有设置key变量
note the ones that aren't freed don't have the key variable set

162
00:08:45,266 --> 00:08:47,733
我是说他们的key可能，额
I mean they probably are the key yeah

163
00:08:48,600 --> 00:08:51,100
它们key变量的位置可能有一些数据
remember they probably have some data in here

164
00:08:51,100 --> 00:08:52,266
这可能是各种数据
this is whatever data

165
00:08:52,266 --> 00:08:54,566
这就是malloc的返回结果（用来放用户的数据）
this is literally the malloc result

166
00:08:55,000 --> 00:08:59,500
好的，让我们在代码中深入研究一下
right let's dive into this actually in code

167
00:08:59,566 --> 00:09:01,333
当free的时候会发生什么
what happens when you free well

168
00:09:01,400 --> 00:09:03,533
首先看释放内存块的大小
first you look at the size of that allocation

169
00:09:03,533 --> 00:09:05,733
我们将在以后的视频中讨论
we'll talk in a future video about 

170
00:09:06,466 --> 00:09:07,966
这些内存块是如何，额
how these allocations are

171
00:09:08,700 --> 00:09:10,066
如何跟踪记录内存块大小的
how the size is tracked

172
00:09:10,966 --> 00:09:13,466
然后我们算出entries下标
and we figure out the index by

173
00:09:13,700 --> 00:09:17,600
没错，就是减去1，然后除以16
yeah that's right subtracting 1 and then divided by 16

174
00:09:17,700 --> 00:09:20,466
如果内存块大小是从1到16
so if you have from 1 to 16

175
00:09:20,866 --> 00:09:21,899
就是下标0
that is slot 0

176
00:09:22,366 --> 00:09:25,566
从17到32,下标1，以此类推
from 17 to 32 slot 1 and so forth

177
00:09:26,200 --> 00:09:27,200
然后我们检查
then we check

178
00:09:27,400 --> 00:09:31,000
确保这块内存没有被释放过
make sure that we haven't already been freed

179
00:09:31,100 --> 00:09:33,166
这实际上是一个相当复杂的检查
this is actually a fairly complex check

180
00:09:34,733 --> 00:09:36,266
但原则是
but the bottom line is

181
00:09:36,666 --> 00:09:38,566
简单的说就是
the simple version is 

182
00:09:38,633 --> 00:09:42,333
它先检查一下key指针
it starts out with checking that key pointer

183
00:09:42,900 --> 00:09:49,800
这个qword
we're saying is our that first this is a qword

184
00:09:49,866 --> 00:09:51,366
这是第一个8个字节
 the first 8 bytes

185
00:09:51,366 --> 00:09:52,666
这是内存块的第二个8字节
the second 8 bytes of the allocation

186
00:09:52,666 --> 00:09:54,099
我们取第二个8字节
we take those second 8 bytes

187
00:09:54,200 --> 00:09:57,666
我们检查它是否等于结构体的地址
and we check does that equal the address of our struct

188
00:09:57,666 --> 00:10:00,666
检查它是否指向ben
are we pointing back to ben

189
00:10:02,100 --> 00:10:05,400
即线程的tcache_perthread_struct结构实例
the Tcache per thread struct instance for our thread

190
00:10:05,733 --> 00:10:08,799
如果不是，如果它发现我们已经释放了这块内存
if not if it finds that we've already freed this

191
00:10:08,800 --> 00:10:10,066
程序会挂掉
the whole program dies

192
00:10:10,300 --> 00:10:15,300
这个安全问题和被破坏了的金丝雀一样
it's the same security problem as a broken canary right

193
00:10:15,933 --> 00:10:18,299
都是严重的问题
means something is going horribly wrong

194
00:10:18,533 --> 00:10:21,933
否则，将被释放内存插入到链表（头插）
otherwise we push the free allocation to the front of the list

195
00:10:22,133 --> 00:10:22,499
我们观察
 and we observe that

196
00:10:22,500 --> 00:10:23,700
这是它的代码
here's the code for it

197
00:10:23,700 --> 00:10:28,300
基本上就是取当前头部的地址
we basically take the address of the current head of the struct

198
00:10:28,300 --> 00:10:31,000
然后把它放到（被释放内存的）第一个qword里
and we put that into our first qword

199
00:10:31,866 --> 00:10:33,466
就是它的next指针里
into this next pointer

200
00:10:33,500 --> 00:10:37,166
然后把被释放内存的地址放进
and then we put our address into the entries

201
00:10:39,600 --> 00:10:43,100
perthread_struct对应的entry中
into that list entry in the per thread struct

202
00:10:43,333 --> 00:10:46,333
然后我们增加计数
and then we increment the count

203
00:10:47,200 --> 00:10:48,566
非常简单
super simple and then

204
00:10:48,733 --> 00:10:51,699
我把视频消掉，这样就能看到完整代码
let me vanish my video so you can see this whole line

205
00:10:54,966 --> 00:10:58,099
然后把结构体的地址
and then we record the address of the struct

206
00:10:58,133 --> 00:10:59,933
放到被释放内存的key中
associated with the freed allocation

207
00:10:59,933 --> 00:11:01,166
就是我们的ben
this is our ben that

208
00:11:01,666 --> 00:11:03,099
以后就是检查它
this is what's later checked

209
00:11:03,100 --> 00:11:04,900
来确保我们没有双重释放
to make sure we haven't double freed

210
00:11:05,333 --> 00:11:08,466
好的，正如你再次看到的
right and as you see again

211
00:11:11,066 --> 00:11:14,133
在我们释放d之前，key是空的
when we free before we free d this key was null

212
00:11:14,166 --> 00:11:16,999
在我们释放d之后，这个key的值变成了Ben
after we free d this key the value became ben

213
00:11:17,466 --> 00:11:18,266
好吧
all right

214
00:11:18,500 --> 00:11:22,000
或者说是tcache_perthread_struct的地址
or the address of our Tcache per thread struct

215
00:11:22,066 --> 00:11:22,966
这就是free的原理
so that's how you free

216
00:11:22,966 --> 00:11:25,799
那如何分配内存块呢？基本就是反过来
how do you allocate it's basically that in reverse

217
00:11:26,166 --> 00:11:28,866
在分配时，我们计算大小
on allocation we compute the size

218
00:11:29,066 --> 00:11:31,199
malloc 一个请求大小
you do malloc a requested size

219
00:11:31,333 --> 00:11:32,966
我们计算entries下标
we calculate the index

220
00:11:32,966 --> 00:11:35,899
或者说我们根据请求的大小计算entries下标
rather we compute the index based on that requested size

221
00:11:35,900 --> 00:11:37,666
就和free时一样
the same way we computer in the free

222
00:11:38,066 --> 00:11:39,499
我们检查
we check

223
00:11:40,966 --> 00:11:42,666
这显然是伪代码
this is pseudocode obviously 

224
00:11:42,766 --> 00:11:49,099
实际上也如此，会检查tcache_perthread_struct
but we check to see if our Tcache perthread struct

225
00:11:49,133 --> 00:11:51,399
这个线程的缓存
the cache of that specific thread

226
00:11:51,500 --> 00:11:53,700
是否有合适的之前释放的内存块
has anything in its cache

227
00:11:54,600 --> 00:11:58,400
就看那个索引的bin的元素计数是否大于零
if the count of that index of that bin is greater than zero

228
00:11:58,566 --> 00:12:00,899
如果小于等于0，创建一个新的内存块
if not by the way we create a new allocation

229
00:12:00,900 --> 00:12:03,066
我们将在以后的视频中讨论如何创建新的内存块
we'll talk about how that is done in a future video

230
00:12:03,066 --> 00:12:06,299
但如果计数不为零
but if the count is non zero

231
00:12:06,533 --> 00:12:08,499
如果有合适的内存块
 if there is something in the allocation

232
00:12:08,566 --> 00:12:12,266
那我们就重用bin的第一个内存块
then we reuse that allocation at the front of the list

233
00:12:13,900 --> 00:12:17,900
基本上我们就是取出entry值
basically we pull out the entry the front of the list

234
00:12:18,800 --> 00:12:21,700
我们把
and we put the

235
00:12:22,000 --> 00:12:26,900
我们用链表中的下一个 tcache_entry 更新 entry指针
we update that entry field with the next entry in the list

236
00:12:26,933 --> 00:12:27,199
好的
right

237
00:12:27,200 --> 00:12:29,866
我们直接取出第一个元素
we just pull out the first entry 

238
00:12:29,900 --> 00:12:33,100
这同样也是因为只有很少的内存操作
and that's again very few memory operations

239
00:12:33,200 --> 00:12:36,533
然后减少计数，就可以了
and then we decrement the count and we're good to go

240
00:12:36,966 --> 00:12:39,199
你会注意到有些事情没有做
you'll notice some things that are not done

241
00:12:41,800 --> 00:12:44,600
不会清除链表中的指针
we don't clear out sensitive pointer

242
00:12:44,599 --> 00:12:49,299
所以在malloc的返回结果中还保留了next指针
so that next pointer is still going to be present in the returned allocation

243
00:12:49,300 --> 00:12:50,666
但出于一些奇怪的原因
but for some weird reason

244
00:12:52,466 --> 00:12:54,699
是有清除一些指针
there is some thought to cleaning out pointers

245
00:12:54,700 --> 00:12:56,533
但仅限key指针
only that key pointer

246
00:12:57,200 --> 00:12:58,000
当我们
when we

247
00:12:59,600 --> 00:13:03,400
我会在幻灯片上展示给你们看
I'll show you at run time on the slide

248
00:13:03,866 --> 00:13:06,599
只有key指针被清零
but only the key pointer is zeroed out 

249
00:13:06,766 --> 00:13:09,666
我们还
and then the other amazing thing that we don't do is 

250
00:13:10,033 --> 00:13:16,299
不检查原来头节点的next指针是否
check if the next pointer

251
00:13:16,733 --> 00:13:19,399
是有意义的
if it makes sense

252
00:13:19,466 --> 00:13:20,266
所以当我们
so when we

253
00:13:20,933 --> 00:13:22,499
当我们分配某些东西时
when we allocate something

254
00:13:22,500 --> 00:13:23,200
我会展示给你看
I'll show you

255
00:13:23,200 --> 00:13:24,866
不确保
we don't check to make sure that

256
00:13:25,066 --> 00:13:27,266
用来更新entry 的东西
what we are updating our entries with

257
00:13:27,500 --> 00:13:28,800
实际上是否有意义
actually makes any sense

258
00:13:28,800 --> 00:13:29,600
好吧
all right

259
00:13:30,366 --> 00:13:30,799
所以
so

260
00:13:30,800 --> 00:13:32,000
让我们看看会发生什么
let's see what happens

261
00:13:32,000 --> 00:13:33,966
我们有这个Tcache结构
we have this Tcache configuration

262
00:13:33,900 --> 00:13:38,700
通过之前的讲解我们知道是如何发展到现在这个样子
we know how we arrived at it from before

263
00:13:38,733 --> 00:13:42,066
在现在这个局面申请内存会发生什么呢
what happens when we start allocating from this now

264
00:13:42,133 --> 00:13:44,599
如果malloc 16会返回a
so if you malloc 16 that will return a

265
00:13:45,100 --> 00:13:48,133
它会检查这个计数
it looks on this count right

266
00:13:48,166 --> 00:13:48,566
它说好的
it it it says okay 

267
00:13:48,500 --> 00:13:57,400
这个bin中有两个长度在1到16字节之间的内存块
there are two entries in this bin for things between 1 and 16 bytes

268
00:13:58,666 --> 00:13:59,933
它获取这个a
and it grabs that a

269
00:14:00,800 --> 00:14:03,533
把它返回
 it returns it

270
00:14:03,900 --> 00:14:06,766
然后它把这个next放到这里
and then it takes this and moves in in here

271
00:14:07,366 --> 00:14:08,933
哦，让我暂停一下
oops let me pause that

272
00:14:08,933 --> 00:14:10,499
因为我忘记更新幻灯片了
because I forgot to update the slides

273
00:14:10,700 --> 00:14:11,500
等一下
one second

274
00:14:12,166 --> 00:14:13,599
好的，很抱歉
alright sorry about that

275
00:14:13,600 --> 00:14:16,500
你看到的是当我们执行malloc时 a
okay so what you see is when we do the malloc a

276
00:14:16,500 --> 00:14:20,200
我们malloc，传入16，它发现计数不为0
we malloc, 16 it takes, it sees that the count is non 0

277
00:14:20,300 --> 00:14:22,533
它将原来这里的值返回
it returns what used to be here

278
00:14:22,933 --> 00:14:25,133
以前是a。它会把a返回
there used to be a. it returns it

279
00:14:25,900 --> 00:14:31,400
它把a中的next指针写入
 and it writes the value of the next pointer in a

280
00:14:31,900 --> 00:14:38,600
写入perthread结构中的相关entry 中
and writes it to b uhh to the relevant entry in the per thread struct

281
00:14:38,700 --> 00:14:41,000
状态是这样的
and the state is this

282
00:14:42,100 --> 00:14:43,133
它递减计数
and it decrements count

283
00:14:43,133 --> 00:14:45,333
然后如果我们分配更多的东西
and then if we then allocate a couple more things

284
00:14:45,400 --> 00:14:46,833
分配的C和E
 allocated C and E

285
00:14:47,100 --> 00:14:51,333
或者说分配2次32字节的内存，它会做同样的事
or allocated 2 32 2 times then it does the same thing

286
00:14:51,333 --> 00:14:53,599
首先递减这个，然后
first it it decremented this and then

287
00:14:53,733 --> 00:14:55,066
把E写在这里
wrote E into here

288
00:14:55,066 --> 00:14:57,499
它指向E，然后返回C
and then it it grabbed E and and return C

289
00:14:57,500 --> 00:15:01,200
在第二次分配时，它做同样的事情，返回E
then it did the same thing and it returned E for the second allocation

290
00:15:01,900 --> 00:15:04,400
然后把 F 写在这里
and then it wrote F into here

291
00:15:04,500 --> 00:15:09,900
F 也就是 E 中的next值
what was value of the next pointer in E

292
00:15:10,500 --> 00:15:12,166
你在分配的时候会看到
you'll see as you're allocating

293
00:15:12,700 --> 00:15:17,300
Tcache实现将这个Ben中的指针清空了
the Tcache implementation is nulling out this Ben pointer

294
00:15:17,500 --> 00:15:23,300
但由于某种原因，它没有把这些next指针清零
but it is not nulling out these next pointers for some reason

295
00:15:24,066 --> 00:15:26,466
它也没有做任何检查
it's also not doing any checks

296
00:15:27,100 --> 00:15:28,000
如果不是b
if instead of b

297
00:15:28,000 --> 00:15:30,800
这是一个随机的地址，它很高兴地把它放在这里
this was some random address that had happily put it here

298
00:15:30,866 --> 00:15:32,799
这对你们的作业很重要
that's going to be important for your homework

299
00:15:33,200 --> 00:15:34,000
好吧
all right

300
00:15:34,700 --> 00:15:35,900
当然
and of course 

301
00:15:36,166 --> 00:15:38,499
这句话的意思是，下次你malloc的时候
the implication of that is the next time you malloced

302
00:15:38,500 --> 00:15:41,200
你最终会返回那个随机地址
you would end up returning that random address

303
00:15:43,700 --> 00:15:45,900
如果我们再做几次分配
if we do a couple more allocations

304
00:15:46,700 --> 00:15:49,366
d b和F
d b and F you know 

305
00:15:49,733 --> 00:15:51,933
我们会把它也从列表中pop出去，这个操作叫"pop"
we'll pop, it's called pop, that from the list as well

306
00:15:52,066 --> 00:15:55,099
最后得到的都是0和
and then we'll end up with all zeros and

307
00:15:55,100 --> 00:15:57,766
还有一堆元素是空的
and a bunch of nulls in the entries right

308
00:15:58,200 --> 00:15:59,866
这些空并不重要
these nulls don't actually matter 

309
00:15:59,966 --> 00:16:03,899
据我所知，在现代实现中，这些计数才是最重要的
as far as I can tell the modern implementation  these counts are what matters

310
00:16:05,466 --> 00:16:06,266
如果计数为零
if the counts are zero

311
00:16:06,266 --> 00:16:07,933
只是根本不使用这些值
just won't use these values at all

312
00:16:08,166 --> 00:16:08,966
好吧
alright

313
00:16:10,600 --> 00:16:13,200
如果对空缓存进行malloc怎么办
what if you malloc of an empty cache

314
00:16:13,200 --> 00:16:16,800
它会创建一个新的映射，就像我之前提到的
well it'll create a new mapping like I mentioned before

315
00:16:16,900 --> 00:16:19,333
我们将在以后的视频中讨论这是如何发生的
we'll talk about how that happens in a future video

316
00:16:19,666 --> 00:16:20,466
好吧
alright

317
00:16:20,500 --> 00:16:22,500
那么重点是什么呢
so what is the point here

318
00:16:23,700 --> 00:16:27,500
我想让你们明白的有两点
the reason I wanted you to understand all of this is two things

319
00:16:27,500 --> 00:16:30,066
一个是重复释放
one of them is a double free

320
00:16:30,500 --> 00:16:32,800
让我告诉你会发生什么
so let me show you what happens

321
00:16:34,400 --> 00:16:41,700
当我们释放一个已经释放的分配时
when we free an already freed allocation

322
00:16:43,133 --> 00:16:44,466
过去是这样的
so it used to be

323
00:16:48,466 --> 00:16:49,566
过去是这样的
it used to be

324
00:16:51,666 --> 00:16:54,199
你可以用Tcache来做这个
that you could just do this with Tcache 

325
00:16:55,100 --> 00:16:58,266
使用Ubuntu 1804中的Tcache版本
with the version of Tcache that's in Ubuntu 1804

326
00:16:58,666 --> 00:17:00,966
就是我们上次课上使用的Tcache版本
the version of Tcache we used last time in class

327
00:17:01,066 --> 00:17:02,466
你可以释放，然后再释放
you could just free and then free again

328
00:17:02,466 --> 00:17:04,333
那时的分配库会执行两次释放
and it would happily go for it

329
00:17:04,366 --> 00:17:05,666
没有安全检查
had no security checks

330
00:17:05,666 --> 00:17:07,733
这是最快的
it was as fast as humanly possible

331
00:17:08,300 --> 00:17:23,566
现在如果你试着这么做，结果是这样的
and now what happened if you try to do that is this 

332
00:17:23,933 --> 00:17:25,533
与栈检查失败相同
same as Stack Check fail

333
00:17:25,933 --> 00:17:29,333
它会检测
it'll detect that your

334
00:17:31,933 --> 00:17:34,266
你已经释放了它，然后它会失败
you had already freed this and it'll fail

335
00:17:34,333 --> 00:17:35,799
它是如何检测的
how does it detect it

336
00:17:35,866 --> 00:17:37,299
正如我之前提到的
well as I mentioned a little while back

337
00:17:38,700 --> 00:17:45,900
它通过检查这个key变量
 it detects it by checking if this key variable

338
00:17:46,900 --> 00:17:50,400
检测这个key指针是否指向perthread_struct结构
if the key pointer is pointing to the perthread struct

339
00:17:50,933 --> 00:17:52,766
事实证明
right turns out

340
00:17:54,200 --> 00:17:55,566
啊，你们看不到
ah you didn't see that

341
00:17:57,900 --> 00:18:02,300
实际上我们很容易在源码上看出来
actually we can very easily see it on the source

342
00:18:02,666 --> 00:18:04,566
查看malloc.c
so look at malloc.c

343
00:18:05,700 --> 00:18:08,400
然后找一个
and find a

344
00:18:09,733 --> 00:18:10,899
我们来搜索一下
let's search for that

345
00:18:10,900 --> 00:18:14,400
双重释放
double free

346
00:18:15,466 --> 00:18:16,266
哦
oh

347
00:18:16,800 --> 00:18:18,466
奇怪。稍等
that's weird. hold on

348
00:18:18,700 --> 00:18:21,700
浏览器显示不正常
the browser isn't properly

349
00:18:22,366 --> 00:18:23,466
好了
there we go

350
00:18:24,100 --> 00:18:24,900
好吧
alright

351
00:18:27,700 --> 00:18:30,466
让我们复制一下，tcache中的双重释放检测
let's copy double free detected in Tcache

352
00:18:36,100 --> 00:18:40,700
我们可以找到源代码
we can find the source code

353
00:18:47,166 --> 00:18:47,966
好的，稍等
all right hold on

354
00:18:48,000 --> 00:18:48,533
我会回来的
I'll be back

355
00:18:48,533 --> 00:18:50,766
我要找到源代码，把它调出来
I'm gonna find the source code and bring it up

356
00:18:51,733 --> 00:18:54,366
这是malloc的源代码
alright here's the source code for malloc

357
00:18:54,933 --> 00:18:56,799
让我们把它放大一点
let's actually grow it a little bit

358
00:18:57,333 --> 00:18:59,933
好了，这是malloc，它是最新最棒的
alright this is malloc it's the latest and greatest 

359
00:19:00,466 --> 00:19:04,199
但是同样的检查也适用于ubuntu 2004
but the same check is in whatever version is in ubuntu 2004

360
00:19:04,500 --> 00:19:06,400
让我们搜索一下双重释放
let's search for double free

361
00:19:11,300 --> 00:19:15,800
查找。在…完美，那个检查就在这里
detect it. in... perfect and here is the check that occurs

362
00:19:15,800 --> 00:19:17,200
它会检查
it literally checks for 

363
00:19:18,133 --> 00:19:21,066
e是我们的分配，我们的缓存项
 e is our allocation our Tcache entry

364
00:19:21,333 --> 00:19:22,699
然后检查
and then it checks hey

365
00:19:23,700 --> 00:19:30,000
key变量是否等于我们的tcache_perthread_struct
is the key variable equal to our Tcache per thread struct

366
00:19:30,400 --> 00:19:33,900
如果是，它会继续判断确保它是一次正常的释放
if yes it actually goes through and make sure it is a double(口误) allocation

367
00:19:33,966 --> 00:19:35,266
但这个检查
but the check is that 

368
00:19:35,700 --> 00:19:38,266
这就是我们要绕过的检查
that's the check we need to defeat

369
00:19:38,600 --> 00:19:40,733
不是双重分配，双重释放
uhh not double allocation double free

370
00:19:40,800 --> 00:19:44,000
如果我们可以写入
so if we have some way to write 

371
00:19:44,066 --> 00:19:47,999
一个指向被释放了的内存指针
to the pointer to that allocation after it's freed 

372
00:19:48,533 --> 00:19:50,799
正如你前面看到的释放重用一样
and again as you've seen use after free happen

373
00:19:51,300 --> 00:19:53,600
然后我们可以触发双重释放
then we can trigger a double free

374
00:19:54,600 --> 00:19:55,566
看看这个
check this out

375
00:19:56,400 --> 00:20:00,266
我所做的就是破坏了key变量
so all I did was I am corrupting that key variable

376
00:20:00,200 --> 00:20:06,500
把1234填入了内存块的第二个8字节中
the second 8 bytes of my allocation with 1 2 3 4

377
00:20:06,666 --> 00:20:10,999
覆盖了原来的值
instead of the pointer that is there before

378
00:20:11,300 --> 00:20:12,566
如果我运行它
and if I run it

379
00:20:15,200 --> 00:20:17,600
它会，它会释放，它会双重释放
it'll it'll free it'll double free

380
00:20:17,700 --> 00:20:19,166
而且它会通过检查
it'll pass that check

381
00:20:20,000 --> 00:20:21,533
接下来是两个malloc
and then the next two malloc

382
00:20:21,533 --> 00:20:23,533
会返回相同的地址
will return the same address

383
00:20:25,566 --> 00:20:26,366
好的
right

384
00:20:29,333 --> 00:20:31,133
它们只是不停地重复
and they just malloc and malloc

385
00:20:31,300 --> 00:20:36,200
这对一个程序来说是残酷的
that is brutal to a program

386
00:20:40,166 --> 00:20:41,799
这对安全造成了严重影响
it's crippling to security

387
00:20:41,866 --> 00:20:42,799
因为
because again

388
00:20:42,866 --> 00:20:44,899
你最终会得到重叠的分配
you end up with an overlapping allocation

389
00:20:44,900 --> 00:20:46,500
这取决于它们的用途
depending on what those are used for

390
00:20:46,600 --> 00:20:48,966
这可能是非常非常坏的消息
that can be really really bad news

391
00:20:49,666 --> 00:20:51,966
好的，还有一件事
all right what is another thing

392
00:20:52,666 --> 00:20:53,466
哦
oops

393
00:20:56,000 --> 00:21:00,900
另一个问题是Tcache太容易信任别人了
another problem with Tcache being so trusting

394
00:21:03,700 --> 00:21:04,500
好吧
well

395
00:21:06,333 --> 00:21:07,199
Tcache是
Tcache is

396
00:21:08,066 --> 00:21:11,333
很抱歉，Tcache的轻信天性允许我们施展
sorry Tcache's trusting nature allows us to do 

397
00:21:11,333 --> 00:21:13,899
一种叫缓存毒化的攻击手段
what is called a cache poisoning attack

398
00:21:14,066 --> 00:21:18,999
基本概念，如果我们破坏缓存entry 的next变量会发生什么
basic idea what happens if we corrupt Tcache entry next

399
00:21:19,166 --> 00:21:20,999
第一个变量
 that first variable 

400
00:21:21,133 --> 00:21:25,899
作为提示，这个变量指向链表下一部分
as a reminder the variable that points onwards to the next part of the list

401
00:21:26,100 --> 00:21:27,500
当分配时
when it's allocated

402
00:21:27,700 --> 00:21:31,066
当malloc返回一个Tcache_entry时
when a Tcache entry is returned through malloc

403
00:21:32,366 --> 00:21:37,333
它盲目地获取next变量
Tcache blindly takes that next variable

404
00:21:37,900 --> 00:21:42,900
要返回的tcache_entry的next变量
 the value of the next pointer of the entry it's about to return

405
00:21:42,966 --> 00:21:45,866
然后把它写在列表的头部
and it puts it into the head of the list

406
00:21:46,100 --> 00:21:47,400
让我们来看看
so let's take a look

407
00:21:48,066 --> 00:21:49,633
会发生什么
what happens 

408
00:21:49,766 --> 00:21:53,133
我创建了这个heap_redirection
I created this heap_redirection

409
00:21:54,133 --> 00:21:57,699
如果我们创建一个栈缓冲区
so if we create a stack buffer

410
00:21:57,933 --> 00:22:01,166
或者是我们能控制的其它内存
or another piece of memory that we have we controll

411
00:22:02,800 --> 00:22:06,600
我们释放了很多东西
and we free a bunch of things

412
00:22:06,600 --> 00:22:11,800
来创建一个Tcache链表，来预热
 so to create a Tcache link list in memory  to be warm up

413
00:22:11,800 --> 00:22:13,900
这叫做预热tcache
this is called warm up the Tcache

414
00:22:14,300 --> 00:22:15,766
这样做，然后
do this and then

415
00:22:16,066 --> 00:22:19,299
我们利用释放重用
we corrupt using a use after free 

416
00:22:19,433 --> 00:22:24,299
来破坏已释放entry的next指针
the next pointer of the freed entry

417
00:22:25,066 --> 00:22:27,199
它原来是指向b, 链表表头
that used to point to b the head of the list

418
00:22:27,200 --> 00:22:29,066
我们最近释放的内存
the last thing that was freed

419
00:22:31,566 --> 00:22:35,399
当我们执行第一个malloc时，它会返回...
when we do our first malloc it'll return oops

420
00:22:35,566 --> 00:22:38,299
当我们执行第一个malloc时，它会返回a
when we do our first malloc it'll return a

421
00:22:40,100 --> 00:22:41,733
当我们做第二个malloc时
when we do our second malloc 

422
00:22:41,733 --> 00:22:46,266
它会返回 a 的 next 指向的东西
it'll return what a next was pointing to 

423
00:22:46,666 --> 00:22:57,866
就是我们的栈缓冲区
and that is our stack buffer

424
00:22:58,933 --> 00:23:01,533
因为我们用栈地址修改了next指针
because we corrupted that next pointer with our stack buffer

425
00:23:01,533 --> 00:23:04,099
我们可以用任何我们想要的东西来破坏它
 we could corrupt it with anything we want

426
00:23:04,666 --> 00:23:07,299
只要是malloc可以返回的有效内存
as long as its valid memory that malloc can return

427
00:23:08,800 --> 00:23:10,933
很酷，这就是
cool so this is

428
00:23:12,300 --> 00:23:18,900
Tcache在总体上是如何运行的
how Tcache works on a high level

429
00:23:19,000 --> 00:23:23,600
还有一些针对它的攻击方法
and some of the attacks that you can yield against it

430
00:23:24,300 --> 00:23:29,500
Tcache基本上是一个针对小内存的缓存层
in summary basically Tcache is a layer for caching small allocations

431
00:23:29,866 --> 00:23:32,866
我记得AMD64上边界值是1036字节
I believe the cut off is 1036 bytes on AMD64

432
00:23:32,866 --> 00:23:35,266
一年前还是两年前是这样的
it was as of a year ago or two years ago

433
00:23:36,200 --> 00:23:37,566
但你可以自己做实验
but you can actually experiment on your own

434
00:23:38,966 --> 00:23:42,799
PWNDBG有一个堆插件
pwndbg has a heap plugin

435
00:23:43,033 --> 00:23:45,299
能让你检查堆的状态
 that allows you to examine the state of the heap

436
00:23:45,400 --> 00:23:47,700
你可以看到
and you can actually see 

437
00:23:47,800 --> 00:23:51,733
在free和malloc时Tcache的状态
what the state of Tcache is  as you free and malloc and so forth

438
00:23:52,300 --> 00:23:56,066
Tcache使用单链表
Tcache uses a singly linked list 

439
00:23:56,066 --> 00:23:59,066
做了很少的安全检查
with very few security checks

440
00:23:59,666 --> 00:24:01,999
这还不是最疯狂的
and this isn't even as insane as it gets

441
00:24:02,466 --> 00:24:03,533
你还能遇到更疯狂的
you're gonna go even crazier 

442
00:24:03,699 --> 00:24:08,499
但老实说，在你接下来的挑战问题中
but honestly in your challenge problems and so forth

443
00:24:08,500 --> 00:24:11,566
这差不多是最疯狂的了
this is more or less as insane as it gets

444
00:24:12,200 --> 00:24:13,000
祝你好运
good luck

