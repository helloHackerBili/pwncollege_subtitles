1
00:00:00,800 --> 00:00:05,600
黑客们好，欢迎来到一场精彩的讲座
hello hackers welcome to yet another awesome lecture

2
00:00:05,600 --> 00:00:08,400
我希望是一个精彩的讲座
hopefully I mean maybe it'll be awesome

3
00:00:09,400 --> 00:00:12,300
继续讲动态分配器误用模块
in the Dynamic Allocator Misuse module

4
00:00:12,300 --> 00:00:14,333
今天我们讨论堆元数据破坏
today we're talking about heap metadata corruption

5
00:00:14,333 --> 00:00:16,066
你已经学过了堆元数据
you've Learned about heap metadata

6
00:00:16,200 --> 00:00:20,833
你已经看到了一些轻微的破坏方式
you've seen ways that some mild corruption 

7
00:00:21,200 --> 00:00:24,400
还有tcache可能导致的问题
and tcache can lead to problems

8
00:00:25,700 --> 00:00:31,400
我们要深入挖掘疯狂而又微妙的破坏技巧
we are going to dig so deep into insane crazy subtle corruption techniques

9
00:00:31,400 --> 00:00:36,300
我将在本视频中概述其他类型的元数据破坏
I'll give you an overview in this video of other types of metadata corruption

10
00:00:36,400 --> 00:00:38,300
包括过去的和现在的
historical and present

11
00:00:38,600 --> 00:00:40,666
然后整合起来
and then we'll wrap it up 

12
00:00:40,766 --> 00:00:43,499
然后将着手解决一些希望很棒的
and you will tackle the awesome hopefully awesome

13
00:00:43,500 --> 00:00:44,900
为你们准备好的习题
 challenge problems will be prepared for you

14
00:00:45,500 --> 00:00:49,000
它们有助于你们学习堆误用
for you to learn about heap misuse 

15
00:00:49,133 --> 00:00:50,199
好了，我们开始吧
all right let's roll

16
00:00:50,866 --> 00:00:52,033
先考虑一下
so let's think about 

17
00:00:52,066 --> 00:00:57,199
攻击者破坏堆元数据的目标是什么？
the goals of an attacker when they are corrupting heap metadata

18
00:00:58,166 --> 00:01:02,299
通常攻击者破坏堆元数据
generally an attacker corrupts heap metadata 

19
00:01:02,300 --> 00:01:04,933
要么是为了通过修改任意内存
to either modify arbitrary memory

20
00:01:05,100 --> 00:01:08,200
滥用堆
 like abuse the heap

21
00:01:08,500 --> 00:01:09,366
欺骗堆
fool the heap 

22
00:01:09,533 --> 00:01:17,099
让堆认为改动后的内存是堆的元数据
into modifying some memory thinking that it is some other part of heap metadata

23
00:01:17,133 --> 00:01:17,999
可以想象一下
you can imagine

24
00:01:19,566 --> 00:01:21,133
要实现这样的事
doing something like that with 

25
00:01:22,700 --> 00:01:25,600
可以通过注入修改tcache中的next指针
injective with modifying that next pointer in tcache

26
00:01:25,766 --> 00:01:27,499
这个我们在上节课中讨论过
as we discussed in the tcache lecture

27
00:01:27,966 --> 00:01:29,799
或者更通用的
or more generally 

28
00:01:29,866 --> 00:01:32,599
用的更多的
much more frequently trying to achieve

29
00:01:33,000 --> 00:01:35,500
被称为重叠分配的方法
what is called an overlapping allocation

30
00:01:35,866 --> 00:01:37,933
你对堆做了些操作
so you do something to the heap

31
00:01:37,933 --> 00:01:38,833
把堆搞懵了
and it gets confused 

32
00:01:39,000 --> 00:01:41,366
导致堆返回了同一个指针两次
and either returns the same pointer twice

33
00:01:42,500 --> 00:01:48,200
或者返回了一个内存块，但它在已分配内存块内部
or returns one allocation that is actually inside another allocation

34
00:01:48,300 --> 00:01:51,500
或者返回一个栈上的内存
or returns an allocation that actually points to the stack

35
00:01:51,500 --> 00:01:53,266
这些都有可能
all of this is possible

36
00:01:53,600 --> 00:01:54,733
其实你已经看过
and you've actually saw

37
00:01:56,400 --> 00:01:59,166
返回相同内存块两次的场景
the scenario of returning the same allocation twice

38
00:01:59,200 --> 00:02:01,500
在讲tcache那堂课上
again at that tcache lecture

39
00:02:02,566 --> 00:02:04,799
我们利用了双重释放
where we abused the double free

40
00:02:06,500 --> 00:02:08,133
好了，基本的思想
all right and basically the ideas

41
00:02:08,133 --> 00:02:10,999
这两种方法通常都不能给你直接的控制权
of course neither of these typically give you immediate control

42
00:02:11,000 --> 00:02:12,266
但能让你
but they allow you to

43
00:02:12,666 --> 00:02:15,533
进一步破坏程序环境
further break the program's environment

44
00:02:15,533 --> 00:02:17,299
当获得更多控制权
and as you further control 

45
00:02:17,300 --> 00:02:22,900
当你对程序内部状态有了更多控制权
you achieve more and more control over a program's internal state

46
00:02:23,066 --> 00:02:25,999
你就可以操纵它
you can slowly begin to puppet it

47
00:02:26,500 --> 00:02:30,266
让它做你想做的事
and get it to do what you want it to do

48
00:02:30,966 --> 00:02:31,766
好吧
all right

49
00:02:32,600 --> 00:02:35,066
我们再来一次
so let's roll again

50
00:02:36,300 --> 00:02:38,966
无论是历史上的还是生活上的
Both historic and in life part historic

51
00:02:39,133 --> 00:02:41,699
我们将从所谓的断连攻击开始
we'll start with something called the Unlink Attack

52
00:02:42,300 --> 00:02:51,966
回忆一下之前讲的chunk的双链表元数据
recall the doubly linked list chunk metadata from the previous video

53
00:02:55,466 --> 00:02:58,066
我把我的视频关一下
I'm going to turn off my video for this one

54
00:02:58,066 --> 00:02:59,899
它盖住ppt上的文本了
because it's overlapsed the text alright

55
00:03:02,900 --> 00:03:03,966
回想一下,
recall that

56
00:03:04,533 --> 00:03:07,733
每个双链表都有前向和后向指针
each the doubly linked list has forward and backwards pointers

57
00:03:08,700 --> 00:03:16,533
当你删除双链表中的chunk时
and when you are removing a chunk from a doubly linked list

58
00:03:16,900 --> 00:03:18,166
比如，删除large bin中的chunk
 for example from a large bin

59
00:03:18,900 --> 00:03:25,500
首先查看前一个chunk的后向指针
you will look at the chunk forward of the previous chunk

60
00:03:27,100 --> 00:03:32,900
把它置为当前chunk的后向指针
and you will set its back address to the chunk behind your chunk

61
00:03:33,100 --> 00:03:39,500
然后把后面chunk的前向指针
and you will set the forward address of the chunk behind your chunk

62
00:03:39,566 --> 00:03:41,166
置为当前chunk的前向指针
to the chunk in front of your chunk

63
00:03:41,700 --> 00:03:44,500
演示一下效果更好
this is better actually shown than described

64
00:03:44,500 --> 00:03:45,800
我来演示一下
let me show it to you

65
00:03:46,766 --> 00:03:50,566
好，考虑一下这个场景
all right consider this scenario where

66
00:03:50,966 --> 00:03:52,733
有3个chunk
we have three allocations

67
00:03:53,733 --> 00:03:55,699
A、B、C
we have chunk A chunk B and chunk C

68
00:03:55,700 --> 00:03:58,966
这里只画了前向指针和后向指针
I just displayed the forward and back pointers here

69
00:03:59,766 --> 00:04:05,133
双链表依次是chunk A、chunk B然后是chunk C
and the doubly link list goes chunk a then chunk B then chunk C

70
00:04:05,133 --> 00:04:07,933
现在想要删除chunk B
 and we want to remove chunk B

71
00:04:08,700 --> 00:04:11,533
首先找到chunk B
when we do that of course we start with chunk B

72
00:04:11,533 --> 00:04:14,099
看看前面的块，
we look at what is ahead and we say okay

73
00:04:14,100 --> 00:04:15,100
获取B前面的chunk
we take what's ahead

74
00:04:15,100 --> 00:04:16,600
再获取B后面的chunk
we take what is behind 

75
00:04:16,600 --> 00:04:17,900
然后把它们连接起来
and we just hook them up

76
00:04:17,900 --> 00:04:20,866
好了，B就被删掉了
boom and chunk B has been removed from the list

77
00:04:20,900 --> 00:04:26,200
使用这两条内存操作语句
using these two memory operations

78
00:04:26,300 --> 00:04:28,533
chunk->fd->bk = chunk->bk;
chunk forward backwards equals chunk backwards 

79
00:04:28,933 --> 00:04:30,933
chunk->bk->fd = chunk->fd;
and chunk backwards forwards equals chunk forwards

80
00:04:31,000 --> 00:04:31,866
很明显
 obviously

81
00:04:32,200 --> 00:04:42,500
如果覆盖了前向指针和后向指针
you can see if we overwrite the values of chunk forward and chunk backward

82
00:04:42,600 --> 00:04:46,433
或者让前向指针和后向指针指向
 or the forward and backwards pointers are 

83
00:04:46,433 --> 00:04:53,199
已经被删除了的“鬼”块中
one of the Jason chunks  that you know it is removing itself from

84
00:04:53,500 --> 00:04:54,733
我们可以控制
we can control

85
00:04:56,000 --> 00:04:59,300
内存写操作的目标
the target of these memory write operations

86
00:05:00,500 --> 00:05:03,500
这曾经是一种非常强大非常常见的攻击
this used to be an extremely powerful and extremely common attack

87
00:05:04,366 --> 00:05:06,533
在libc中对此添加了额外的检查
extra checks in libc 

88
00:05:06,700 --> 00:05:12,466
这就是安全与性能关系模型的一个例子
this is an example of that cyclic pattern of security and performance

89
00:05:12,466 --> 00:05:14,066
增加了额外的检查
extra checks have been added

90
00:05:14,600 --> 00:05:20,200
以确保chunk链表是正常的
to make sure that the chunk list makes sense

91
00:05:20,266 --> 00:05:22,266
主要看你操作的这一段
the part of the list that you're operating on

92
00:05:23,266 --> 00:05:24,399
那个
that all of the 

93
00:05:25,466 --> 00:05:27,266
你前一个chunk的后向指针指向你
 the next chunk is pointing back at you

94
00:05:27,266 --> 00:05:29,333
你后一个chunk的前向指针也指向你
and the previous chunk is pointing forward at you

95
00:05:29,333 --> 00:05:31,333
你是要被删的那个chunk
you being the chunk that is being removed

96
00:05:31,800 --> 00:05:36,300
试图解决unlink问题
to try to fix these sort of problems

97
00:05:36,333 --> 00:05:37,133
然而
however

98
00:05:37,366 --> 00:05:40,766
在某些情况下，你仍然可以绕过这些检查
you can still pass these checks in certain scenarios

99
00:05:40,900 --> 00:05:46,900
后面有一个shellphish的"如何堆利用"的链接
I'll have a link to shellphish's how to heap example repository later

100
00:05:48,400 --> 00:05:51,066
我记得在之前的视频中提到过
and I think I mentioned in a previous video

101
00:05:51,800 --> 00:05:53,166
在那个仓库里
over in that repository

102
00:05:53,166 --> 00:05:55,899
有一个现代攻击的例子
they have an example of a modern attack that

103
00:05:55,900 --> 00:05:58,200
它绕过了这些防御
that can bypass some of these defenses

104
00:05:59,200 --> 00:06:01,700
好吧，这是一个过时攻击手法
all right so that's a historical attack

105
00:06:01,700 --> 00:06:02,966
这是一种
one historical attack

106
00:06:03,100 --> 00:06:12,833
另一种历史攻击是一种非常简洁的堆漏洞利用
another historical attack is a really neat heap flaw exploitation

107
00:06:13,066 --> 00:06:14,966
称为空字节投毒
 called the poison null byte

108
00:06:15,133 --> 00:06:16,933
好的，问题是
right so the the question is 

109
00:06:17,100 --> 00:06:19,300
如果你只有
what if all you have is 

110
00:06:19,333 --> 00:06:22,233
一种字符串终止错误
is a kind of a string termination error

111
00:06:22,533 --> 00:06:24,766
或者off by one空字节
 or something you know off by one null byte

112
00:06:24,766 --> 00:06:27,866
这种情况发生的次数没有很夸张
this happens not like an insane amount 

113
00:06:28,066 --> 00:06:30,266
但发生的次数也不少
but it does happen quite a decent amount 

114
00:06:30,466 --> 00:06:31,099
实际上
it was actually

115
00:06:31,300 --> 00:06:35,600
这项技术是根据真实情况开发的
this technique was actually developed based on a real situation

116
00:06:36,966 --> 00:06:37,566
如果我没记错的话
if I remember correctly 

117
00:06:37,700 --> 00:06:41,300
这是由Google Project Zero推广的
this was first popularized by Google Project Zero

118
00:06:41,300 --> 00:06:42,300
但不确定
but don't call ?? that

119
00:06:42,300 --> 00:06:44,400
只是突然想到好像是这样的
that's just floating to my mind

120
00:06:46,200 --> 00:06:47,866
如果遇到了下面这种情况
so what if you have something like this 

121
00:06:48,000 --> 00:06:51,900
能用null覆盖一个字节
where you have a single byte null byte overwrite

122
00:06:53,566 --> 00:06:55,299
并且只有这个
and that is it

123
00:06:55,666 --> 00:06:57,133
那么问题是什么呢
so what is the problem here

124
00:06:57,133 --> 00:06:59,666
问题实际上是……我的幻灯片不对
the problem actually is that... my slide isn't correct

125
00:06:59,700 --> 00:07:01,600
等一下，让我快速修好它
one second let me fix it real quick

126
00:07:02,300 --> 00:07:03,666
改了什么呢？
all right what changed

127
00:07:03,666 --> 00:07:04,833
改了这里
well what change was that 

128
00:07:04,833 --> 00:07:08,499
我将malloc 0x1000更改为malloc 0x1008 //应该改错了，应该是read(0, buf, 0x1008)
I changed the malloc 0x1000 to malloc 0x1008

129
00:07:09,300 --> 00:07:13,200
为什么?我这么做是因为
why? I did this because um

130
00:07:14,466 --> 00:07:18,266
如果你还记得上节课的内容
if you recall from the previous lecture when the

131
00:07:18,600 --> 00:07:27,400
这多的8字节将重用下一个块的prev_size
that extra 8 bytes is going to be the reuse of the next chunk's prev_size

132
00:07:27,600 --> 00:07:30,500
因为当前的块正在使用中
since our current chunk is in use

133
00:07:30,600 --> 00:07:36,300
下一个块的prev_size被用作额外的用户内存
the next chunk's prev_size is actually there for us to use as extra memory

134
00:07:37,400 --> 00:07:40,400
所以当可以溢出一字节
and so when we have this one byte overflow

135
00:07:40,466 --> 00:07:43,299
这个null覆盖的是
what we're actually overflowing with an null byte is

136
00:07:44,166 --> 00:07:46,766
下一个chunk的size
the size value of the next chunk

137
00:07:46,766 --> 00:07:48,366
这就是弱点所在
and that is where the weakness happens

138
00:07:48,366 --> 00:07:51,299
这是对这次攻击的解释图
this is a graph from an explanation of this attack

139
00:07:53,200 --> 00:07:56,600
我会尽我所能地遵循这一点
and I'll try to follow this as as well as I can

140
00:07:56,700 --> 00:07:58,300
它过时了
it's historical

141
00:07:59,133 --> 00:08:00,466
所以它
so it it

142
00:08:01,166 --> 00:08:04,299
现在已经被打上了补丁
you know has now been patched in libc

143
00:08:04,600 --> 00:08:06,100
有很多
there was a quite a lot of

144
00:08:06,100 --> 00:08:11,800
我记得有很多有趣的方法可以绕过这个补丁
I think actually there are interesting ways to still bypass that patch and

145
00:08:13,600 --> 00:08:17,100
让我移动一下视频，这样你们就能看到图形来源
let me move my video so you can see the figure source

146
00:08:17,600 --> 00:08:21,733
可以绕过补丁，继续进行攻击
to bypass that patch and to still carry out this attack

147
00:08:21,733 --> 00:08:23,333
但是对于我们这个模块来说
but but for the purposes of our module

148
00:08:23,333 --> 00:08:27,799
我将谈论没有任何防范的历史攻击手法
I'll be talking about the historical attack without any checks to prevent it

149
00:08:28,966 --> 00:08:29,866
基本上
basically

150
00:08:30,300 --> 00:08:32,733
假设有三个挨着的内存块
imagine you have three allocations right up against each other

151
00:08:33,633 --> 00:08:36,299
先释放了中间的chunk
 um and you free the middle one

152
00:08:36,900 --> 00:08:38,466
对，所以，所以
right so so the the

153
00:08:38,466 --> 00:08:41,666
中间的内存块是空闲的
the middle allocation is now a free chunk

154
00:08:41,900 --> 00:08:45,700
它的size变量还在，值是0x208
it still has a size and that size is 0x208

155
00:08:46,000 --> 00:08:51,400
然后你用0覆盖它的部分size
and you overflow into that chunk with your null byte 

156
00:08:51,500 --> 00:08:53,733
原来的0x208
and you overwrite 0x208 

157
00:08:54,000 --> 00:08:58,200
因为是小端序，变成了0x200
because it's a little endian to 0x200

158
00:08:59,133 --> 00:08:59,933
好的
right

159
00:09:01,500 --> 00:09:05,566
有趣的是
an interesting thing that happens is that when

160
00:09:06,933 --> 00:09:07,799
B是空闲的
so B is free 

161
00:09:08,033 --> 00:09:12,299
这意味着C的prev_size是被分配器用着的
that means C's prev_size is being used

162
00:09:12,500 --> 00:09:15,066
如果你回想一下之前的视频
if you recall from the previous video

163
00:09:16,566 --> 00:09:18,666
当你再分配一些内存
when you allocate more

164
00:09:20,933 --> 00:09:25,733
它会分配在B中
it create more allocations to fill up B part by part

165
00:09:26,066 --> 00:09:27,199
分配一些小的内存块
 you make small allocations

166
00:09:27,766 --> 00:09:31,499
C的prev_size应该会被更新
C's prev_size should be updated 

167
00:09:31,566 --> 00:09:34,799
但是因为B的大小被改小了0x8字节
but because b's size is too small

168
00:09:34,800 --> 00:09:37,566
所以实际上更新的是这里
what is actually updated is some data right here

169
00:09:37,566 --> 00:09:40,366
就在C的prev_size之前
right before C's prev_size

170
00:09:40,866 --> 00:09:43,733
所以C一直认为
so C is constantly saying hey

171
00:09:44,100 --> 00:09:51,400
在我身后有一个大小为0x208的空闲块
behind me there is a size 0x208 free chunk right

172
00:09:52,600 --> 00:09:58,100
当释放B1时
when you free the first filler allocation chunk

173
00:09:59,500 --> 00:10:00,300
它
it

174
00:10:04,266 --> 00:10:05,066
得到
gets

175
00:10:05,866 --> 00:10:11,499
当释放B1
when you free the this allocation chunk ,the filler B 

176
00:10:11,733 --> 00:10:13,566
然后释放C
and then you free C

177
00:10:14,133 --> 00:10:15,399
当C被释放时
and when C is freed

178
00:10:15,700 --> 00:10:18,333
它发现自己后面的chunk是空闲的
it says hey is the chunk behind me free

179
00:10:19,100 --> 00:10:22,333
如果它后面的chunk是空闲的。它会合并
and if the chunk behind it is free. it consolidates

180
00:10:22,333 --> 00:10:27,066
它将自己和后面的chunk合并了
it merges the chunk behind it and the chunk itself

181
00:10:27,300 --> 00:10:33,500
并将合并的空闲块添加到unsorted bin中
and adds that to the unsorted bin as a consolidated free chunk

182
00:10:34,733 --> 00:10:35,599
在这个过程中
and in this process

183
00:10:35,600 --> 00:10:38,866
libc忘了原来的chunk B
we forget all about the old allocation B

184
00:10:39,100 --> 00:10:40,700
B2还是一个在用的内存块
that is still a valid allocation

185
00:10:40,700 --> 00:10:42,366
但堆已经忘记了它
but the heap has forgotten about it

186
00:10:44,400 --> 00:10:46,133
下次分配的时候
and next time something is allocated

187
00:10:46,133 --> 00:10:48,966
它会分配B
it will get allocated over B

188
00:10:49,400 --> 00:10:51,600
没错，这是一个很酷的攻击手法
right so this is an awesome attack

189
00:10:51,900 --> 00:10:55,700
仍然有一些方法可以绕过该攻击检查
I think there are still bypasses of checks against this attack 

190
00:10:56,866 --> 00:10:58,166
如我所说
like I said

191
00:10:58,333 --> 00:11:01,799
它的历史是丰富多彩的，有补丁被写出
there's a colorful history of patches being written

192
00:11:02,000 --> 00:11:03,533
争论了很长时间
argued over for a long time

193
00:11:03,533 --> 00:11:06,233
libc的邮件列表、代码合并
and the mailing list of libc merged

194
00:11:06,300 --> 00:11:07,766
补丁又被绕过了
immediately bypassed

195
00:11:08,533 --> 00:11:10,933
再出补丁，等等，等等
repatched et cetera et cetera

196
00:11:12,300 --> 00:11:13,300
非常有趣
very fun

197
00:11:14,200 --> 00:11:17,800
算是历史奇事
sort of historical oddity

198
00:11:18,466 --> 00:11:19,266
好吧
all right

199
00:11:19,766 --> 00:11:24,033
来谈谈我最喜欢的堆利用技术
let's talk about my favorite heap technique

200
00:11:24,033 --> 00:11:25,599
The House of force
The House of force

201
00:11:25,666 --> 00:11:28,399
不幸的是，现在也打了关于它的补丁
it is also now patched unfortunately

202
00:11:28,866 --> 00:11:31,366
但曾经有一段时间
but it there used to be a time

203
00:11:31,566 --> 00:11:34,799
你可以破坏wilderness的大小
when you could corrupt the size of the wilderness

204
00:11:34,800 --> 00:11:36,300
回想一下上节课的wilderness
recall the wilderness from last lecture

205
00:11:36,300 --> 00:11:38,833
它表示堆中还剩下多少字节
it just says how many bytes are there left in the heap

206
00:11:39,233 --> 00:11:41,333
如果你分配的比这个多
if you allocate more than that 

207
00:11:41,333 --> 00:11:47,199
它会调用brk来扩展堆内存
then it'll use brk to expand the memory

208
00:11:47,300 --> 00:11:50,200
或者它会mmap一块内存
or it will give you an mapped piece of memory instead

209
00:11:50,333 --> 00:11:52,533
曾经你可以很轻松的
but it used to be that you could simply 

210
00:11:52,633 --> 00:11:56,799
用一个超大的数字覆盖wilderness
overwrite that wilderness with a ginormous number

211
00:11:56,800 --> 00:12:00,266
实际上用负数就行，因为计算机存的补码
in fact a negative number right in 2's complement

212
00:12:00,766 --> 00:12:01,733
所以当你
so that when you

213
00:12:01,800 --> 00:12:04,966
这样你就能分配那么多内存
and then you could allocate that much memory allocate

214
00:12:05,300 --> 00:12:07,200
堆就懵了
so that the heap got confused

215
00:12:07,600 --> 00:12:09,566
过多就绕回堆的开头了（可能用了取余）
and went all the way around

216
00:12:09,566 --> 00:12:11,366
这样就能分配之前的内存了
and you could allocate previous

217
00:12:13,133 --> 00:12:15,566
下一次将在堆的较早位置分配内存
your next allocation would be earlier in the heap

218
00:12:15,800 --> 00:12:18,200
或者你可以用一个特定的值覆盖它
or you could update so much memory

219
00:12:18,300 --> 00:12:20,200
这个值可以根据栈和堆的位置算
if you knew where the stack and the heap both were

220
00:12:20,266 --> 00:12:23,733
那么你可以在栈上分配堆的chunk
that you could then allocate chunks onto the the stack

221
00:12:23,733 --> 00:12:24,899
这很酷
this is very cool

222
00:12:25,333 --> 00:12:29,199
我很喜欢使用这种技术，但不幸的是
I really enjoyed using this technique but unfortunately

223
00:12:29,366 --> 00:12:31,366
或者从安全的角度，幸运的是
or fortunately for security 

224
00:12:31,399 --> 00:12:33,066
它被打了补丁
it got patched alright

225
00:12:33,066 --> 00:12:35,333
我们来看一个没有打补丁的
let's find one that is not patched 

226
00:12:35,533 --> 00:12:38,799
现存（2020年）的一个相关技巧
that is still a very relevant extant technique

227
00:12:38,933 --> 00:12:40,099
the house of spirit 
the house of spirit 

228
00:12:40,100 --> 00:12:41,733
如果你的记忆力很好
if you have a very good memory 

229
00:12:41,766 --> 00:12:44,499
你应该还记得这是最初的house系列
you'll recall that this is one of the original houses 

230
00:12:44,600 --> 00:12:50,233
是由Phantasmal Phantasmagoria提出的
that were proposed by Phantasmal Phantasmagoria

231
00:12:50,233 --> 00:12:54,699
在他们的SecDev帖子中描述的
described by them in their SecDev post

232
00:12:54,700 --> 00:13:00,333
这开创了house of xxx系列堆利用技术
that kind of created this lore of house of blah or heap techniques

233
00:13:00,533 --> 00:13:02,599
这个想法很简单
 the idea is very simple right

234
00:13:03,966 --> 00:13:07,466
事实证明，在free内存时做的校验很少
turns out there are very few checks done at free time

235
00:13:07,600 --> 00:13:09,833
现在仍然是这样
and this is actually still the case 

236
00:13:09,866 --> 00:13:12,566
15年前是这样
this was the case 15 years ago 

237
00:13:12,566 --> 00:13:13,666
现在还是
still happening

238
00:13:14,066 --> 00:13:15,333
所以你能做的是
so what you can do is 

239
00:13:15,700 --> 00:13:20,533
如果可以控制传递给free的指针
if you can control the pointer that is passed into a free

240
00:13:21,100 --> 00:13:25,200
并且你能把它指向一块你能完全控制的内存
and you can point it at some memory that you fully control

241
00:13:26,000 --> 00:13:29,600
你让这块内存看起来像一个chunk，然后释放它
you can make that memory look like a chunk and free it

242
00:13:29,600 --> 00:13:38,300
这基本上就把它，在当前情况，注入到tcache中了
and basically inject it into  in this case into tcache

243
00:13:38,366 --> 00:13:40,566
以前是注入到fast bin或者其它的
it used to be into a fast bin or whatnot

244
00:13:40,600 --> 00:13:42,733
但现在会注入到tcache中
but now you can inject it into tcache

245
00:13:43,400 --> 00:13:46,900
然后等malloc回来的时候
and later when it is malloc back in

246
00:13:47,466 --> 00:13:50,166
或者说等下次malloc一个合适的大小的时候
or then at the next malloc for the appropriate size

247
00:13:51,200 --> 00:13:54,133
你伪造的那个空闲chunk malloc会返回给你
that your chunk your free chunk will be returned

248
00:13:54,666 --> 00:13:55,733
这很令人激动
which is super exciting

249
00:13:55,733 --> 00:13:57,933
我现在展示给你看
and I will show it to you right now

250
00:14:00,366 --> 00:14:01,133
好吧
all right

251
00:14:01,133 --> 00:14:02,166
所以我
so I 

252
00:14:05,900 --> 00:14:08,866
我写了个程序，这里是chunk元数据数据结构
I wrote it up so here's our our chunk metadata

253
00:14:08,866 --> 00:14:11,266
我在这里创建这个结构体
you know I just just created a struct

254
00:14:11,400 --> 00:14:14,900
是为了可以轻松在栈上伪造chunk
so that I could easily allocate it on the stack

255
00:14:14,966 --> 00:14:18,066
这个是伪造的stack_chunk，它在栈上
so this is our stack chunk that that's on the stack

256
00:14:18,400 --> 00:14:23,000
我们malloc一个16字节的内存
so we malloc something that is 16 bytes

257
00:14:23,966 --> 00:14:26,166
在我们毒化之前
and before we do the poison

258
00:14:26,200 --> 00:14:28,666
我先展示正常情况是返回在堆上的
I'll show you that that it returns on the heap

259
00:14:28,866 --> 00:14:30,899
然后我们做了一件神奇的事
and then we do this amazing thing

260
00:14:32,000 --> 00:14:33,000
我们说好吧
we say okay

261
00:14:35,333 --> 00:14:36,133
的
the

262
00:14:36,766 --> 00:14:38,066
我们正确地设置了伪造的chunk
we set the chunk properly

263
00:14:38,066 --> 00:14:41,266
我们假设prev_size为0
we say that there's you know whatever prev_size zero

264
00:14:41,866 --> 00:14:43,966
要设置的更合理一点的话
actually this probably should have been a little more proper

265
00:14:43,966 --> 00:14:46,166
这应该是0x21
this should have been 0x21 

266
00:14:46,300 --> 00:14:48,100
因为前一个chunk正在使用中
for previous chunk in use

267
00:14:48,133 --> 00:14:50,133
但这不重要
but it turns out that's not so important

268
00:14:50,133 --> 00:14:50,999
嗯
um

269
00:14:52,066 --> 00:14:53,266
基本上
we basically say

270
00:14:54,500 --> 00:14:56,000
有一个
that there is a

271
00:14:56,533 --> 00:14:58,999
我们创建一个大小为0x20的chunk
we create a chunk with a size of 0x20

272
00:14:59,000 --> 00:15:03,533
申请的16字节用户数据区加上16字节元数据
that is of course of allocation of 16 plus 16 more for the metadata

273
00:15:04,033 --> 00:15:05,499
所以块大小为0x20
 results in a chunk size of hex 20

274
00:15:05,566 --> 00:15:06,666
然后我们释放它
and then we free it

275
00:15:07,300 --> 00:15:08,300
我们free了它
and we free it

276
00:15:08,300 --> 00:15:09,100
实际上
actually

277
00:15:09,500 --> 00:15:11,900
我们释放的这个地址
we free it at this address 

278
00:15:11,966 --> 00:15:17,733
因为chunk的起始地址在返回给你的内存地址前16字节
right if you recall the chunk is 2 qwords before your memory location

279
00:15:17,800 --> 00:15:20,466
所以我们需要释放这个内存位置
 so we need to free this memory location

280
00:15:21,333 --> 00:15:22,999
然后下次malloc的时候
and then the next time we malloc

281
00:15:23,600 --> 00:15:26,333
我们拿回了这个chunk
we get our chunk back

282
00:15:27,133 --> 00:15:28,499
我们来编译一下
so let's compile that

283
00:15:35,100 --> 00:15:35,900
运行它
run it

284
00:15:37,000 --> 00:15:37,800
好的
boom

285
00:15:38,400 --> 00:15:41,100
第一次分配
first allocation

286
00:15:43,300 --> 00:15:46,100
另一个分配只是为了有趣
another allocation just to to get keep things interested

287
00:15:46,100 --> 00:15:50,500
这是我们在堆上做的第一个分配
so this is that first allocation that we made on the heap right here

288
00:15:51,133 --> 00:15:51,933
然后
and then

289
00:15:52,866 --> 00:15:55,199
在我们毒化缓存后
after we poison the cache right here

290
00:15:55,600 --> 00:15:59,666
你可以看到下一次分配
you can see that the next allocation

291
00:16:00,133 --> 00:16:01,999
返回了一个栈上的地址
returns a stack address

292
00:16:03,133 --> 00:16:05,166
我想现在不需要我告诉你
right now I'm sure I don't need to tell you 

293
00:16:05,533 --> 00:16:11,499
和栈上地址重叠有多严重
how brutal an overlapping address onto the stack can be

294
00:16:12,533 --> 00:16:16,633
取决于程序如何使用这个地址
depends on how the program uses this address

295
00:16:16,700 --> 00:16:17,766
如果你
 but if you

296
00:16:18,066 --> 00:16:20,999
例如，如果它是一个名称字段
for example if it was a name field

297
00:16:21,133 --> 00:16:22,733
你可以写任意值
that you could just write arbitrarily

298
00:16:22,733 --> 00:16:23,566
你可以用这个方法
you could use this

299
00:16:23,566 --> 00:16:24,999
覆盖栈
then override the stack

300
00:16:25,733 --> 00:16:28,333
覆盖栈帧，溢出返回地址
override the stack frame overflow the return address

301
00:16:28,500 --> 00:16:30,333
然后控制整个程序
and take control of the program

302
00:16:30,900 --> 00:16:35,733
在适当的情况下，这是一个非常强大的技巧
this is a very powerful technique with the right circumstances 

303
00:16:35,966 --> 00:16:40,599
如果你能控制这个注入到空闲缓存中的指针
if you can control this pointer that you inject into free

304
00:16:40,866 --> 00:16:43,599
把它指向一个你能控制的地址
and pointed somewhere at data that you control

305
00:16:43,600 --> 00:16:44,600
就ok了
you're good to go

306
00:16:45,500 --> 00:16:46,566
好吧
all right

307
00:16:48,866 --> 00:16:49,666
哦
oops

308
00:16:50,800 --> 00:16:52,700
等一下。技术问题
one second. technical issues

309
00:16:54,133 --> 00:16:59,699
好了，还有一些杂项技巧
alright so a couple of miscellaneous tips I'll leave you with

310
00:16:59,833 --> 00:17:00,466
一个是
 one is

311
00:17:01,466 --> 00:17:03,466
有时你处于一种情况
sometimes you're in a situation

312
00:17:03,600 --> 00:17:05,166
你需要触发malloc
 where you need to trigger a malloc

313
00:17:05,366 --> 00:17:06,566
但是这个程序中
but the program

314
00:17:07,133 --> 00:17:09,333
就是没有一个可以轻易触发的malloc
just doesn't have a malloc for you to easily trigger

315
00:17:09,333 --> 00:17:11,499
你通常会这样做
you usually do these things

316
00:17:11,900 --> 00:17:13,733
触发堆功能
trigger heap functionality by

317
00:17:13,733 --> 00:17:16,866
通过小心地操纵程序
by kind of puppeting the program carefully

318
00:17:17,733 --> 00:17:20,199
触发程序内部的功能
triggering functionality within that program 

319
00:17:20,199 --> 00:17:24,133
让它做你想做的堆操作
to get it to do the heap operations you want done

320
00:17:24,400 --> 00:17:26,533
有时malloc很难触发
sometimes a malloc is hard to trigger

321
00:17:26,533 --> 00:17:28,933
但一些libc函数
well it turns out that some libc functionality 

322
00:17:28,933 --> 00:17:31,899
或者其他内部使用malloc的函数
or other functionality internally will use a malloc

323
00:17:32,000 --> 00:17:33,800
例如你可以触发printf
so if you can trigger a printf

324
00:17:34,066 --> 00:17:35,666
传递给它一个足够大的字符串
and pass it a large enough string

325
00:17:35,666 --> 00:17:39,199
它将malloc一个缓冲区，scanf也一样
it will allocate a buffer using malloc same with scanf

326
00:17:39,600 --> 00:17:40,700
设置好了的话
with the right setup

327
00:17:42,266 --> 00:17:44,699
例如，设置了一个重叠
if you for example set up an overlapping

328
00:17:44,700 --> 00:17:50,533
或者毒化tcache
if you poisoned the tcache for example 

329
00:17:50,566 --> 00:17:55,599
使用house of spirit，伪造一个栈上的chunk
using house a spirit with a chunk on the stack 

330
00:17:55,800 --> 00:17:57,833
然后调用scanf
and then you call scanf

331
00:17:57,966 --> 00:18:04,466
继而调用malloc，然后开始写内存
and that mallocs and starts writing to a buffer 

332
00:18:04,633 --> 00:18:06,733
或者printf也行
or printf will do the same thing

333
00:18:06,800 --> 00:18:12,500
你可以直接用printf导致栈溢出
you can directly cause a stack buff overflow  just with that printf 

334
00:18:12,533 --> 00:18:14,766
这很酷
now which is super super cool to see

335
00:18:16,200 --> 00:18:19,333
需要注意的是，有时你将使用printf进行调试
one caveat sometimes you're using printf for debugging

336
00:18:19,333 --> 00:18:23,699
你不希望它
and you don't want it to create

337
00:18:24,933 --> 00:18:26,599
调用malloc
to malloc stuff

338
00:18:26,733 --> 00:18:28,499
你可以禁用这个行为
so you can disable that behavior

339
00:18:28,500 --> 00:18:32,900
可以使用这些函数禁用libc内部缓冲
by disabling libc's internal buffers with these functions

340
00:18:33,200 --> 00:18:34,000
好吧
all right

341
00:18:34,566 --> 00:18:36,199
我要提的最后一点
final note I mentioned

342
00:18:36,700 --> 00:18:41,800
欺骗操纵程序去做你想做的事
this sort of tricking puppeting the program to do what you wanted to do 

343
00:18:41,800 --> 00:18:45,900
调用想要调用的堆操作
to make the call the heap operations that you wanted to call

344
00:18:46,900 --> 00:18:48,133
很难
this is very hard

345
00:18:48,133 --> 00:18:52,199
你会在作业中发现它到底有多难
and you will find out how hard it really is in the homework

346
00:18:53,366 --> 00:18:56,899
堆利用需要掌握极其精确的堆布局
heap exploitation requires extremely precise heap layout

347
00:18:57,733 --> 00:19:00,466
有自动化方法
there is automation being done in this area

348
00:19:00,866 --> 00:19:05,633
例如最近出现的技术
for example recent publications on techniques

349
00:19:05,700 --> 00:19:07,900
它会自动执行所谓的“堆按摩”
that will automatically do what is called heap massaging

350
00:19:08,000 --> 00:19:09,800
将堆按到正确的位置
massage your heap into the right place

351
00:19:10,366 --> 00:19:13,499
总之掌握它并不容易
but mastering this is not easy

352
00:19:15,500 --> 00:19:18,200
但你们会成为这方面的大师
but you will become masters at it

353
00:19:18,266 --> 00:19:21,499
你将用它获取flag，祝你好运
and you'll use it to get flags good luck

