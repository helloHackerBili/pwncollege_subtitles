1
00:00:00,600 --> 00:00:02,800
已经概略的讨论了
so now that we've had a high level discussion

2
00:00:02,900 --> 00:00:06,333
堆中在 tcache 下层的机制
of what occurs deeper in the heap pass tcache

3
00:00:06,333 --> 00:00:09,333
现在来详细讲解这个流程图
let's step through that flow chart step by step

4
00:00:09,600 --> 00:00:11,666
详细介绍各种 bin
and talk about each bin 

5
00:00:12,033 --> 00:00:13,133
他们为什么存在
why they're there

6
00:00:13,133 --> 00:00:14,333
他们的工作原理
how they work 

7
00:00:14,333 --> 00:00:15,466
以及他们的作用
and what they do

8
00:00:17,166 --> 00:00:20,666
tcache 过后的第一站是 fast bins
so our first stop after tcache is fast bins

9
00:00:20,733 --> 00:00:24,300
fast bins 和 tcache 起着类似的作用
now fast bins and tcache serve a similar role

10
00:00:24,300 --> 00:00:25,966
它们都是缓存层
they're both caching layers

11
00:00:25,966 --> 00:00:27,166
但他们的作用
but what they do

12
00:00:27,333 --> 00:00:30,533
以及存在原因实际上是不同的
and the reason that they exist is in fact different

13
00:00:30,800 --> 00:00:33,066
fast bins 早于 tcache
fast bins predates tcache

14
00:00:33,200 --> 00:00:37,000
相较于堆，tcache是最近才有的
tcache is actually a pretty recent development as far as heap

15
00:00:37,300 --> 00:00:40,333
它在libc的最近几个版本中才出现了
it's been around in a couple versions of libc now

16
00:00:41,200 --> 00:00:44,866
tcache 中的 t 代表线程
now recall that the t in tcache stands for thread

17
00:00:45,266 --> 00:00:48,666
tcache是一个线程缓存层
a tcache is a thread caching layer

18
00:00:49,200 --> 00:00:52,866
每当访问 tcache 的下层
whenever the heap is accessed deeper than tcache

19
00:00:53,133 --> 00:00:56,266
都会涉及到一个堆全局锁
there is a global heap lock that has to occur

20
00:00:56,566 --> 00:00:58,900
所以添加 tcache 的原因
and so the reason tcache was added

21
00:00:58,900 --> 00:01:03,800
是为了减少多个线程对堆同时访问
was to prevent contention from multiple threads trying to access the heap at the same time

22
00:01:04,166 --> 00:01:07,399
因为访问堆需要对整个堆加锁以确保
because the whole heap needs to lock to make sure that 

23
00:01:07,666 --> 00:01:14,233
多个线程申请内存时，堆状态可信
there is a consistent state when multiple processes are trying to obtain allocations from the heap

24
00:01:14,600 --> 00:01:19,000
而 tcache 使每个线程都有单独的缓存
and so tcache sits as a layer where every thread gets its own cache

25
00:01:19,500 --> 00:01:22,133
这缓解了
so that should alleviate the contention

26
00:01:22,400 --> 00:01:26,000
多个线程访问堆下层的竞争情况
of multiple threads trying to access deeper into the heap

27
00:01:26,866 --> 00:01:29,366
fast bins也是一个缓存层
now fast bins is a caching layer as well

28
00:01:29,533 --> 00:01:33,400
但是fast bins是堆本身的缓存层
but fast bins is a caching layer for the heap itself

29
00:01:34,400 --> 00:01:35,533
就设计而言
as far as design

30
00:01:36,500 --> 00:01:39,100
fast bin与 tcache 非常相似
fast bins is very similar to tcache

31
00:01:39,133 --> 00:01:41,000
它也是一个单链表
it's a singly linked list

32
00:01:41,266 --> 00:01:42,866
也使用安全链接
it uses safe linking

33
00:01:43,300 --> 00:01:47,700
fast bins和 tcache 有一些不同之处
now some of the things that are different about fast bins versus tcache

34
00:01:48,766 --> 00:01:53,333
fast bin 链表没有长度限制
fast bin lists can grow to an unlimited length

35
00:01:53,500 --> 00:01:58,600
tcache 链表最多有7个chunk
you'll recall that tcache lists have a maximum length of 7 chunks

36
00:01:58,666 --> 00:02:02,533
当释放第8个相同大小的chunk时
if you free an 8th chunk to tcache

37
00:02:02,733 --> 00:02:04,266
它不会缓存到 tcache 中
it will not cache it

38
00:02:04,366 --> 00:02:07,366
它会被传递到tcache下层
that free chunk will get past deeper into the heap

39
00:02:07,800 --> 00:02:11,500
现在如果这个chunk的大小达到0x80字节(新ppt已改)
now in the event that chunk is up to 88 bytes in size

40
00:02:11,566 --> 00:02:13,000
它大小适当
it's reasonably small

41
00:02:13,800 --> 00:02:17,333
它可能因为tcache满了绕过 tcache
that chunk may bypass tcache because tcache is full

42
00:02:17,700 --> 00:02:21,800
如果大小合适，它可能会被放入fast bin
and that chunk may end up here in fast bin if it's the correct size

43
00:02:23,700 --> 00:02:26,933
fast bins最多只能容纳0x80B的chunk
now fast bins only accommodates up to 88 bytes

44
00:02:27,066 --> 00:02:28,400
那 tcache 呢
what is tcache hold

45
00:02:28,600 --> 00:02:35,900
tcache 最大可缓存 1032字节的 chunk
well tcache holds up to about 1,032 bytes for the chunk size

46
00:02:36,100 --> 00:02:40,300
fast bins 只缓存很小的内存
and so fast bins caches very small allocations kind of like

47
00:02:41,000 --> 00:02:45,500
适用于需要频繁malloc和free的程序
scratch malloc and frees that a program may rapidly need to do

48
00:02:46,333 --> 00:02:48,933
而且malloc的内存使用时间很短
but they're probably not going to hang on to

49
00:02:49,166 --> 00:02:50,733
所以对于堆
and so it makes sense for the heap

50
00:02:50,866 --> 00:02:55,100
缓存一些常用的小chunk是有用的
to hang onto some of these extremely common small allocations

51
00:02:55,133 --> 00:02:59,000
他们被缓存在fast bins中
and so that gets cached in the fast bins

52
00:02:59,900 --> 00:03:04,100
fast bins 是如何缓存这些小的分配的呢
now how does fast bins hang onto these small allocations

53
00:03:04,200 --> 00:03:09,000
上节课提到了 P位和合并
one of the things that I mentioned the prior lecture was this P bit and consolidation

54
00:03:09,000 --> 00:03:12,900
我们会把小chunk 合并起来
and we want to take these small chunks and combine them

55
00:03:12,933 --> 00:03:15,166
生成一些更大的chunk
and rebuild these larger chunks

56
00:03:15,200 --> 00:03:19,800
这样多次内存分配后，不会产生大量内存碎片
so that way we can service more requests without getting fragmented

57
00:03:20,200 --> 00:03:28,500
fast bins通过不清除P位来防止合并
well fast bins prevents consolidation by not clearing the p bit

58
00:03:29,700 --> 00:03:33,566
所以当chunk被缓存到fast bin
so when a chunk is freed and placed into fast bin

59
00:03:33,900 --> 00:03:38,366
后一个chunk的P位不会被清除
the P bit for the next chunk is not cleared

60
00:03:38,566 --> 00:03:40,933
所以在堆的下层机制
so from the heap's internal mechanism

61
00:03:40,933 --> 00:03:45,700
它并不知道这些chunk被释放了
it does not see these chunks as truly free

62
00:03:46,800 --> 00:03:49,700
通过不清除 P位
that p bit by not being cleared

63
00:03:49,700 --> 00:03:54,100
防止 fast bins 中的chunk被合并
prevents the chunks that are in Fast Bin from being consolidated

64
00:03:56,600 --> 00:04:02,300
fast bins 和 tcache的差异中有趣的一点是
now one of the kind of interesting things about fast bins compared to tcache

65
00:04:02,400 --> 00:04:07,600
你可以对 tcache 利用双重释放漏洞
one of the things we saw with tcache was that you can perform a double free exploit

66
00:04:07,900 --> 00:04:12,500
tcache 检查双重释放时
but tcache will check when you attempt to perform a double free

67
00:04:12,800 --> 00:04:15,533
会检查对应链表中的所有chunk
against every entry of that size

68
00:04:15,733 --> 00:04:22,300
tcache中该大小对应链表的所有chunk
every entry in the tcache list for the size of the chunk that's being freed

69
00:04:23,266 --> 00:04:25,766
但是 fast bins 可以无限长
but fast bins can grow to an unlimited length

70
00:04:26,000 --> 00:04:30,400
所以从性能的角度来看，为了防止双重释放
and so it would actually be prohibitive from a performance standpoint

71
00:04:30,800 --> 00:04:38,600
每次调用free，都去遍历一个无限长的单链表，是不现实的
to track a singly linked list of an unlimited length for double free every time free is called

72
00:04:39,500 --> 00:04:46,600
且会放到fast bins的，都是些经常free的
and the chunks that are freed into fast bins are the type of chunks that get freed often

73
00:04:46,700 --> 00:04:53,500
所以fast bins的free要高效
so we want the act of freeing to some too fast bins to be efficient to be performant

74
00:04:53,700 --> 00:04:59,000
fast bins的chunk的双重释放检查
and so the double free check when a chunk is freed into fast bins

75
00:04:59,100 --> 00:05:06,300
只看最近被放入的那一个chunk
only looks at the top chunk the most recently freed chunk that was placed into fast bins

76
00:05:07,200 --> 00:05:12,700
这意味着会有双重释放绕过的情况
this has implications for when a double free scenario can sneak into the heap

77
00:05:14,000 --> 00:05:17,800
和我们在tcache中看到的非常相似
so very similar to what we saw with tcache

78
00:05:17,800 --> 00:05:20,766
fast bins采用单链表
the fast bins are a singly linked list

79
00:05:21,100 --> 00:05:28,100
fast bins中针对各大小的bin都有一个头指针
fast bins consist of a head pointer for every size that is in fastbin

80
00:05:29,500 --> 00:05:34,000
头指针指向最近释放的chunk
the fastbin head pointer points to the most recently freed chunk

81
00:05:34,700 --> 00:05:38,100
如果free时要放到fast bins中
so when we need to free something into fast bins 

82
00:05:38,266 --> 00:05:46,000
只需修改，被释放chunk的next，为头指针的值
all we have to do is update the next pointer of the newly freed chunk to the current head

83
00:05:46,100 --> 00:05:49,733
然后将头指针指向当前释放的chunk
and then update the head to the newly freed chunk

84
00:05:51,466 --> 00:05:53,900
这与tcache非常相似
this works very much like tcache

85
00:05:56,700 --> 00:06:00,166
那当 malloc 时
now what happens if we're trying to malloc something

86
00:06:00,466 --> 00:06:03,533
申请大小大于 0x80 字节呢
but it's going to be larger than this 88 bytes

87
00:06:03,666 --> 00:06:06,499
那就不会在 fast bin中找了
well then it doesn't make sense to look at these fast bins

88
00:06:06,600 --> 00:06:09,300
要查看另一种 bin
we're going to have to look in another bin

89
00:06:09,300 --> 00:06:13,300
因为fast bin中最大只有 0x80字节的chunk
because the biggest thing that could be in fast bins is a chunk of 88 bytes

90
00:06:13,366 --> 00:06:16,666
下一个要找的位置是 small bins
so the next place to consider would be the small bins

91
00:06:17,333 --> 00:06:21,333
small bins是一个双链表
now small bins are a doubly linked list

92
00:06:21,500 --> 00:06:23,766
这就有点复杂了
so it's going to be a bit more complicated

93
00:06:24,066 --> 00:06:27,100
但是small bins有一个优点
but one of the advantages of small bins

94
00:06:27,100 --> 00:06:29,933
就是它能够合并
is the small bins are capable of consolidating

95
00:06:30,100 --> 00:06:36,800
small bin存在的原因是能提高访问效率
so the reason we have these small bins is to be able to provide performance access

96
00:06:36,800 --> 00:06:39,133
因为这里的 bin的大小是固定的
because these bins are a constant size

97
00:06:39,133 --> 00:06:40,866
我们不需要从里面筛选
we don't have to sift through these

98
00:06:41,366 --> 00:06:46,200
如果我们想要256字节内存
if we want something that is say 256 bytes

99
00:06:46,600 --> 00:06:56,200
在small bin中有直接指向256字节chunk的指针
there is a pointer in the small bins to chunks of size exactly 256 bytes

100
00:06:56,700 --> 00:07:03,400
bin中chunk大小相同，最大可达1024字节（64位机器）
so the bins are a constant size for every size up to 1024 bytes

101
00:07:03,766 --> 00:07:06,666
访问时间是固定的,O(1)
so we get that constant access time

102
00:07:06,800 --> 00:07:08,566
我们可以快速访问
we get that fast access 

103
00:07:08,766 --> 00:07:12,300
给定一个大小，立马就知道上哪个bin中取
because we can say a size and we know immediately where to look

104
00:07:12,900 --> 00:07:15,166
与fast bins不同的是
but unlike fast bins

105
00:07:15,166 --> 00:07:19,200
small bins中的chunk能够合并
the small bins chunks are capable of consolidating

106
00:07:19,200 --> 00:07:26,000
被释放到small bins里的，后一个chunk的P位会被清除
that P bit is cleared for things that are freed into the small bins

107
00:07:26,700 --> 00:07:29,366
small bins 看起来是什么样呢？
so what does a small bin list look like

108
00:07:30,700 --> 00:07:37,000
small bins中同样各bin中有一个头指针
well small bins very similarly have a head pointer for every constant size

109
00:07:37,000 --> 00:07:39,566
头指针将指向一个chunk
that head pointer will point to a chunk

110
00:07:40,466 --> 00:07:44,400
这些chunk 不再只有一个next指针
now these chunks instead of just having a next pointer

111
00:07:44,700 --> 00:07:46,333
他们有前向和后向指针
these have a forward and back

112
00:07:46,466 --> 00:07:47,933
因为是双链表
because they're doubly linked

113
00:07:48,100 --> 00:07:54,100
所以能遍历回到chunk1
now a consequence of this is you can navigate these chunks and get back to chunk 1

114
00:07:54,300 --> 00:07:59,800
只要不停往前，或往后
by calling forward forward forward or back back back

115
00:07:59,966 --> 00:08:02,300
最终都会回到原来的位置
and you'd end up right back where you were 

116
00:08:02,366 --> 00:08:05,500
在这个例子中只有三个chunk
in this example because there's only three chunks

117
00:08:06,600 --> 00:08:11,500
但实际上永远不需要这么做
but in practice you never need to navigate these lists like that

118
00:08:11,800 --> 00:08:15,600
用双链表的原因是
the reason that these lists are doubly linked 

119
00:08:15,800 --> 00:08:23,066
能方便高效地删除节点
is to allow for very easy removal of items from the list via that unlinked process

120
00:08:23,200 --> 00:08:26,200
这有点违反直觉
so kind of counterintuitively

121
00:08:26,200 --> 00:08:29,300
增加链表的遍历能力
by adding more abilities to navigate the list

122
00:08:29,300 --> 00:08:32,666
反倒不需要遍历链表了
we never have to actually navigate the list

123
00:08:35,133 --> 00:08:37,733
如果我们调用malloc
so what happens if we call malloc 

124
00:08:38,100 --> 00:08:42,166
请求chunk的大小
and the chunk that I want that I'm requesting

125
00:08:42,566 --> 00:08:48,166
大于fast bin的最大值 0x80字节
 is going to be larger than the 88 bytes that could be found in fast bins

126
00:08:48,700 --> 00:08:53,800
也大于small bin的最大值 1024字节
and it's larger than the 1024 bytes that could be found in small bins

127
00:08:53,800 --> 00:08:56,933
或者这是第一次调用malloc呢
or what if this is the very first allocation

128
00:08:57,300 --> 00:09:01,366
这些bin里还没缓存chunk
so there's nothing that's been put in these bins yet 

129
00:09:01,600 --> 00:09:04,000
没有释放任何chunk到这些bin中
we haven't freed anything into the bins

130
00:09:04,533 --> 00:09:06,733
接下来会发生什么
well where what happens next

131
00:09:07,700 --> 00:09:13,300
接下来将合并 fast bins
well the next step is to consolidate the fast bins

132
00:09:14,200 --> 00:09:15,666
我知道你在想什么
and I know what you're thinking like 

133
00:09:15,900 --> 00:09:21,066
等等，你刚刚不是说fast bin是不合并的吗
wait a minute here you just said fast bins aren't consolidated

134
00:09:21,166 --> 00:09:24,566
fast bin 的P位一直是1
fast bins have the P bit set

135
00:09:25,600 --> 00:09:27,600
这没错
well this is true 

136
00:09:27,766 --> 00:09:30,533
但是fast bin是一个缓存层
but fast bins is a caching layer right

137
00:09:30,700 --> 00:09:35,300
如果我们需要的都缓存在这里
if all we needed were things that could be easily cached here

138
00:09:35,700 --> 00:09:38,300
或者都在 small bins 范围内
and then all we needed were things that were in the small bins

139
00:09:38,300 --> 00:09:42,000
需要的chunk都小于1024字节
so things that were smaller than that 1024 bytes

140
00:09:42,266 --> 00:09:44,666
那就不会触发fast bins合并
we don't need to worry about consolidating

141
00:09:45,333 --> 00:09:49,000
因为我们没打算申请一个大的chunk
because we aren't trying to produce a large chunk

142
00:09:49,133 --> 00:09:51,300
malloc不用返回一个大的chunk
malloc isn't asking for large chunks

143
00:09:51,300 --> 00:09:53,933
还要等待合并触发条件
so let's wait on consolidation

144
00:09:54,400 --> 00:09:56,666
但当 malloc 被调用
but as soon as malloc is called

145
00:09:57,066 --> 00:10:01,900
请求的chunk大小 大于1024字节
requesting a chunk of greater size than 1024 bytes

146
00:10:03,566 --> 00:10:06,933
我们就要清理fast bin
we're going to clear the fast bin

147
00:10:07,300 --> 00:10:09,666
会遍历他们
we're going to go through all of those items

148
00:10:10,300 --> 00:10:14,866
清除相应的P位
and clear the P bit or the corresponding p bit

149
00:10:15,900 --> 00:10:21,700
这使 fast bins chunk发生合并成为可能
this is going to allow for consolidation of those fast bin chunks to occur

150
00:10:25,800 --> 00:10:27,266
总结一下
so to recap

151
00:10:27,466 --> 00:10:30,766
如果malloc的chunk大小超过1024字节
if a chunk is mallocd over 1024 bytes in size

152
00:10:31,266 --> 00:10:34,966
说明程序需要大的chunk
then the program is asking for a large chunk

153
00:10:35,200 --> 00:10:38,266
我们不希望堆中出现内存碎片
we don't want the heap to be fragmented

154
00:10:38,600 --> 00:10:42,900
所以对于fast bins中的缓存
and so all of those quick caching things that we are doing in Fast Bin

155
00:10:43,100 --> 00:10:48,000
我们会对其遍历，使之能合并
we're going to go through and make it so that those are capable of consolidating

156
00:10:48,100 --> 00:10:51,300
这样可以防止内存碎片
this should prevent fragmentation

157
00:10:53,400 --> 00:11:01,300
fast bins中的合并也可能发生在 free 中
now this consolidating of the fast bins can also occur when free is called

158
00:11:01,966 --> 00:11:03,400
这个65KB是
and this is

159
00:11:03,533 --> 00:11:05,900
如果你看一下这里链接的源代码
if you look at the source code which is linked here

160
00:11:06,100 --> 00:11:11,100
注释中甚至说了这个65KB是按经验选的
the source code comments even say that this value is just like chosen heuristically

161
00:11:11,566 --> 00:11:13,666
当释放一个chunk时
but if a chunk is freed

162
00:11:14,566 --> 00:11:16,966
这个大小是这个常量
and there is a magic number here 

163
00:11:16,966 --> 00:11:18,966
它大约是65KB，65536B
but it's about 65 kilobytes in size

164
00:11:18,966 --> 00:11:22,266
如果释放的是一个大于 65KB的chunk
if a chunk larger than 65 kilobytes is freed

165
00:11:22,400 --> 00:11:29,000
这也将触发fast bin中的清理和合并
this will also trigger fast bins to clear out and begin consolidating

166
00:11:29,400 --> 00:11:38,700
所以，如果malloc大于1024字节
so if a chunk is mallocd that is greater than 1024 bytes in size

167
00:11:40,366 --> 00:11:42,666
fast bins 会清空
the fast bins will clear out

168
00:11:42,800 --> 00:11:47,300
并使那些chunk能合并
and those chunks are able to be consolidated

169
00:11:47,333 --> 00:11:48,600
不是说会立马合并
it doesn't mean that they will

170
00:11:48,800 --> 00:11:51,966
记住，合并需要的
because remember consolidation requires that

171
00:11:52,000 --> 00:11:56,000
不只是fast bins中chunk是空闲的
not only the chunks in fast bins are free

172
00:11:57,000 --> 00:12:03,300
还需要这些chunk周围有空闲chunk
but also a chunk immediately after or before in memory are free

173
00:12:03,500 --> 00:12:08,000
因此，不保证立马会合并
and so the clearing and consolidating doesn't guarantee consolidation

174
00:12:08,000 --> 00:12:12,800
只保证fast bin中的chunk有被合并的可能
it guarantees the possibility of consolidating these fast bins

175
00:12:12,866 --> 00:12:15,733
会清空 fast bin 中的所有缓存记录
it's going remove all of the entries from fast bins

176
00:12:15,900 --> 00:12:20,400
并保证他们有被合并的可能
and allow the possibility of consolidation

177
00:12:23,900 --> 00:12:27,500
我们已经完成了这一步
so we've done that step

178
00:12:28,466 --> 00:12:32,966
我们已经尽可能地合并了fast bin
we've consolidated the fast bins as well as possible

179
00:12:33,866 --> 00:12:35,166
下一步是什么
what's the next step

180
00:12:36,000 --> 00:12:39,700
流程图中下一步是查找unsorted bin
the next step on the flow chart is to look at this unsorted bin

181
00:12:41,600 --> 00:12:45,500
这个ppt中没画
now I don't have it here on the slides

182
00:12:45,500 --> 00:12:49,400
但上一节课中 free流程图里有
but there's a similar flow chart from the prior lecture on free

183
00:12:50,300 --> 00:13:01,600
当有超过fast bins 大小范围的
and free flow chart basically says if there's anything larger than fast bins

184
00:13:01,933 --> 00:13:04,733
并最终放入 unsorted bin的chunk
then it ends up in the unsorted bin

185
00:13:05,500 --> 00:13:08,466
unsorted bin 就是
and the I said that the unsorted bin was just kind of 

186
00:13:08,600 --> 00:13:11,866
释放后不想立马处理的一些chunk
this pile of stuff that we freed that we don't want to deal with

187
00:13:12,500 --> 00:13:20,600
如果 malloc 一个大于1024B的chunk
well if malloc is called and we need something larger than 1024 bytes

188
00:13:21,166 --> 00:13:23,200
请求chunk不在 small bin范围中
so it can't be found in the small bin

189
00:13:23,300 --> 00:13:27,100
这时就需要遍历unsorted bin这一堆
it's time to go through that pile of junk that we've been putting off

190
00:13:27,600 --> 00:13:30,166
这就是unsorted bin
and that is what the unsorted bin is

191
00:13:31,666 --> 00:13:35,300
unsorted bin 是一个双链表
so the unsorted bin is a doubly linked list

192
00:13:35,700 --> 00:13:43,300
unsorted bin中装的可能是 large或small chunk
the unsorted bin holds values that could have been large bin or small bin

193
00:13:43,800 --> 00:13:48,900
unsorted bin中chunk都大于0x80B
so any the unsorted bin holds chunks greater than 88 bytes in size

194
00:13:49,000 --> 00:13:53,100
它们无法直接装入fast bins中
it's anything that couldn't immediately get cacheed in fast bins

195
00:13:54,333 --> 00:13:56,566
此时如果malloc被调用
now when malloc is called

196
00:13:56,800 --> 00:13:59,933
一直走到这一步
if we make it all the way through to this step

197
00:14:00,200 --> 00:14:05,000
将会开始在 unsorted bin中查找
what occurs is the unsorted bin chunks start getting checked

198
00:14:05,600 --> 00:14:12,400
假设 unsorted bin 中有一个 100B的chunk
so let's say the unsorted bin has a chunk size of 100

199
00:14:13,000 --> 00:14:15,800
现在malloc 一个 80B的chunk
and I'm trying to malloc something that is 80 bytes

200
00:14:15,966 --> 00:14:17,966
需要一个80字节的chunk
I need an 80 byte chunk

201
00:14:18,100 --> 00:14:23,800
unsorted bin开头的这个100B chunk
could 100 byte chunk that i grabbed that was at the beginning of the unsorted bin

202
00:14:24,700 --> 00:14:26,800
能满足要求吗
can that satisfy the requirement

203
00:14:27,000 --> 00:14:29,133
答案是可以的
the answer is yes 

204
00:14:29,266 --> 00:14:33,799
从unsorted bin中拿到的这个100B chunk 可以满足需求
the chunk that I grabbed from the unsorted bin is big enough to satisfy the requirement

205
00:14:34,200 --> 00:14:35,700
就将其分割
we'll cut it off we'll split it

206
00:14:35,700 --> 00:14:39,266
然后返回切下来的80B的chunk
we'll make it work and we'll return that 80 byte chunk

207
00:14:39,300 --> 00:14:42,800
就是直接从 unsorted bin开头取一个chunk
so we're just grabbing whatever happened to be here in the unsorted bin 

208
00:14:42,800 --> 00:14:43,966
然后看是否满足要求
and say hey can we make this work

209
00:14:44,900 --> 00:14:49,500
那如果是malloc 一个大的chunk
now what happens if that malloc request is for something large

210
00:14:49,733 --> 00:14:52,766
假设malloc 一个3000B的chunk
say we're trying to malloc 3000 bytes

211
00:14:53,700 --> 00:14:56,300
从 unsorted bin 开头取的
well the first thing that gets grabbed from the unsorted bin

212
00:14:56,866 --> 00:14:58,900
还是100B的chunk
could still be that 100 byte chunk

213
00:14:59,566 --> 00:15:03,866
能从100B中分出一个3000B的chunk吗
can I make a 3,000 byte chunk from 100 byte chunk

214
00:15:03,866 --> 00:15:04,866
答案是否定的
the answer is no

215
00:15:05,200 --> 00:15:08,300
好吧，有一个100B的chunk
and so we have to say okay well now I have this hundred byte chunk

216
00:15:08,300 --> 00:15:10,466
满足不了malloc的需求
so it doesn't satisfy the malloc

217
00:15:10,800 --> 00:15:13,000
我们要把它放到应该去的位置
we're going to go put it where it goes

218
00:15:13,000 --> 00:15:15,666
会把它放到对应的 small bin中
so we'll put it in the correct small bin

219
00:15:15,700 --> 00:15:21,500
因为，small bins最大可以管理 1024B的chunk
because remember small bins handle chunks up to 1024 in size

220
00:15:21,800 --> 00:15:28,200
接下来再从unsorted bin中取一个chunk
so then we're going to grab the next chunk from the unsorted bin list

221
00:15:28,900 --> 00:15:30,000
然后看看它
and we're going to look at it 

222
00:15:30,133 --> 00:15:37,900
是否足够malloc要的3000B
and okay is this large enough for a 3000 chunk to be allocated to return from malloc

223
00:15:38,500 --> 00:15:40,000
如果不行
if the answer is no

224
00:15:40,000 --> 00:15:43,666
就把它放到对应的small 或 large bin中
we put it in the appropriate small or large bin

225
00:15:43,700 --> 00:15:45,500
如果可以
if the answer is yes

226
00:15:45,800 --> 00:15:50,500
就返回它（可能是一部分）
we make it work  and just return what we found from the unsorted bin

227
00:15:51,966 --> 00:15:56,166
unsorted bin 是一个双链表
so the unsorted bin list again is a doubly linked list

228
00:15:56,600 --> 00:16:03,900
然而，与small bins不同的是，它只有一个bin
however unlike small bins the unsorted bin is just one pointer

229
00:16:04,000 --> 00:16:10,000
只有一个头指针，这个双链表中放了所有unsorted bin的chunk
it is just a pointer where this is everything goes everything goes into the unsorted bin

230
00:16:11,466 --> 00:16:14,700
这里没有依据大小的索引
and so we don't have fast access here

231
00:16:14,900 --> 00:16:22,500
如果你还记得的话，small bins中每个大小都有对应的头指针
if you'll recall these small bins had a unique head pointer for constant sizes

232
00:16:22,600 --> 00:16:26,200
这样，当我们需要一个256B的chunk时
and that allowed us to say I need something that's 256 bytes

233
00:16:26,266 --> 00:16:28,733
我立马就能知道对应链表在哪里
I know where that list is

234
00:16:28,733 --> 00:16:30,900
在small bins里有一个指针
it's in the small bins there's one pointer

235
00:16:30,900 --> 00:16:33,966
指向 256B的chunk的链表
that pointer has the 256 byte allocations

236
00:16:34,700 --> 00:16:36,300
如果这个链表是空的
but if there weren't any there

237
00:16:37,500 --> 00:16:42,000
我们就去unsorted bin中找
okay we go through this unsorted bin pile

238
00:16:42,000 --> 00:16:44,500
然后我们开始筛选
and we'll start sifting through this

239
00:16:44,600 --> 00:16:48,900
如果unsorted bin中取出来的未满足条件
and if what we grab doesn't meet our requirement

240
00:16:49,100 --> 00:16:54,900
那么我们就把它放到对应的small bin 或 large bin
then we will file it away into the correct small or large bin

241
00:16:55,400 --> 00:17:02,233
所以unsorted bin 是一个缓存层
so unsorted bin acts as kind of a caching layer or lazy layer

242
00:17:02,466 --> 00:17:06,200
位于 small bins 和 large bins 前
 in front of these small and large bins

243
00:17:06,266 --> 00:17:11,866
chunk 不会直接放到 small bins 或 large bins中
chunks never go directly to these small or large bins

244
00:17:12,666 --> 00:17:14,666
当一个chunk 被 free 时
when a chunk is freed

245
00:17:14,700 --> 00:17:17,533
它最后可能会到 small bins 或 large bins 中
that could end up in the small or large bins

246
00:17:17,533 --> 00:17:20,966
但它首先会放到 unsorted bin中
it will always go to the unsorted bin first

247
00:17:21,133 --> 00:17:23,100
这提供了一个机会
this provides a chance

248
00:17:23,400 --> 00:17:26,533
不管之前放到 unsorted bin的是大还是小 chunk
for whatever it was that we happen to put there 

249
00:17:26,666 --> 00:17:29,033
都能拿来重用
to just get grabbed and reused

250
00:17:31,933 --> 00:17:34,700
遍历完了unsorted bin
so we've gone through the unsorted bin

251
00:17:34,866 --> 00:17:36,933
但我们要找的是非常大的chunk
but we're looking for something really large

252
00:17:36,933 --> 00:17:39,600
如果malloc一个3000B的chunk
what if this malloc request is for 3,000 bytes

253
00:17:39,733 --> 00:17:43,500
fast bins中没有3000B的chunk
there's nothing that's going to be 3,000 bytes in fast bin

254
00:17:43,566 --> 00:17:46,733
small bins中也没有3000B的chunk
there's nothing that's going to be 3,000 bytes in small bins 

255
00:17:46,900 --> 00:17:52,200
遍历完unsorted bin（也没有）
we've gone through all of the junk that's been freed into the unsorted bin

256
00:17:52,966 --> 00:17:54,700
之后上哪儿找？
where is the next place to look

257
00:17:56,000 --> 00:17:59,300
下一处要找的位置是 large bins
well the next place to look is the large bins

258
00:18:00,266 --> 00:18:03,500
large bins是一个双链表
large bins are a doubly linked list

259
00:18:04,300 --> 00:18:08,600
然而，large bins中bin里chunk大小不是固定的
however large bins are not of constant size

260
00:18:08,866 --> 00:18:13,400
large bins里每个bin管理一个大小范围
the large bins consist of a size range

261
00:18:14,400 --> 00:18:19,500
这意味着bin中的 chunk 需要排序
now that means that the chunks in the bin need to be sorted

262
00:18:19,600 --> 00:18:23,700
按大小，从大到小排序
and they're sorted by size with the largest chunk first

263
00:18:25,300 --> 00:18:29,166
large bins有意思的一点是
now one of the interesting things about large bins is

264
00:18:29,800 --> 00:18:34,700
在讨论堆元数据时讲过
I mentioned in the kind of heap metadata discussion 

265
00:18:34,966 --> 00:18:41,266
chunk有一个fd_nextsize和一个bk_nextsize指针
that chunks have a fd_nextsize and a bk_nextsize pointer

266
00:18:41,433 --> 00:18:44,900
至少可以有这两指针
 or at least they can have these values

267
00:18:45,733 --> 00:18:50,000
在large bins中会用到这两指针
these pointers are used when trying to resolve large bins

268
00:18:50,233 --> 00:18:58,500
可以在该bin大小范围内切换到一个相邻大小
because this provides the ability to check a bin and if were in a range

269
00:18:59,300 --> 00:19:03,900
现在需要该bin大小范围中较大的chunk
and I need something that's on the upper end of that bin range

270
00:19:04,400 --> 00:19:07,666
但结果该bin中的chunk
but it turns out all of the chunks that are in the bin 

271
00:19:08,766 --> 00:19:12,333
都集中在小端
are on the smaller side of the range

272
00:19:12,400 --> 00:19:17,200
我需要跳到附近更大的大小范围
and what I really need to do is I need to jump up to the next bin size

273
00:19:17,200 --> 00:19:21,900
我需要去那个更大的大小范围中找
I need to find something that is in the next largest range

274
00:19:23,500 --> 00:19:28,300
找到目标victim，分割出需要的大小
and then split that chunk to create the size that I need

275
00:19:28,700 --> 00:19:34,600
这个功能通过binmap数组实现
and that is what the fd_nextsize and bk_nextsize pointers do

276
00:19:34,700 --> 00:19:44,466
binmap数组的元素类型是uint32，一个元素可管理32个bin
they provide pointers to the next chunk that is in the larger bin size or bin range

277
00:19:44,700 --> 00:19:51,200
注意large bins中bin对应的chunk大小是范围，而不是常量
because remember the sizes on large bins are ranges not constant sizes

278
00:19:52,600 --> 00:19:55,933
这有一个large bins的例子
so here's an example of large bins

279
00:19:56,100 --> 00:19:58,900
可以看到，large bins仍然是一个双链表
you'll notice that large bins are still a doubly linked list

280
00:19:59,000 --> 00:20:03,800
对于元数据和链表，格式还是一样的
they still follow that same format as far as the metadata and the list itself

281
00:20:03,900 --> 00:20:07,200
然而，large bins的不同之处
however one of the things that's different about large bins

282
00:20:07,266 --> 00:20:09,100
在于这些头指针
has to do with these head pointers

283
00:20:09,200 --> 00:20:12,700
这些头指针还是指向双链表
we still have head pointers that point into the list

284
00:20:12,700 --> 00:20:19,000
然而，双链表对应的chunk大小是范围，而不是常量
however the head pointers correspond to ranges of sizes not a constant range

285
00:20:20,000 --> 00:20:28,200
large bins中最小的大小范围是 512~576B
now the smallest of the large bins corresponds to sizes of 512 to 576 bytes

286
00:20:29,666 --> 00:20:34,733
bins一般聚集在小的那边
now the bins themselves are clustered to the smaller side

287
00:20:34,900 --> 00:20:37,900
因为一般很少malloc特别大的内存
 because large allocations are pretty rare

288
00:20:39,100 --> 00:20:47,900
所以large bins中前32个bin步长只有64字节
so the first 32 bins of the large bins only stride 64 bytes

289
00:20:47,900 --> 00:20:54,300
所以能看到范围：512~576、 576~640、 640~704
that's why we see 512 to 576 then 576 to 640 640 to 704

290
00:20:54,366 --> 00:20:59,600
可以，以64B为步长，走32次
we could continue this 32 times striding by 64 bytes

291
00:20:59,700 --> 00:21:05,500
那么 binmap数组 有什么用呢
so what was the purpose of this bk_nextsize with this fd_nextsize

292
00:21:05,533 --> 00:21:08,966
如果需要一个chunk大小为
well what if I wanted something that was exactly

293
00:21:09,166 --> 00:21:13,933
假设：630B
let's say 640 er 600 let's do 630 bytes

294
00:21:15,266 --> 00:21:17,100
需要一个这么大的chunk
and that's the size chunk that I need

295
00:21:17,166 --> 00:21:22,100
显然会在第二个bin里找
well I would look in this second bin right

296
00:21:22,133 --> 00:21:26,500
会在 576~640B这个范围中找
I would be looking for chunks of size 576 to 640

297
00:21:26,600 --> 00:21:28,866
630B正好在这里
630 falls right in there

298
00:21:29,000 --> 00:21:36,300
但如果该bin中所有chunk都是580B呢
but what if every chunk that's in here is exactly 580 bytes in size

299
00:21:36,500 --> 00:21:38,466
我在合适的bin找了
well I went to the correct bin

300
00:21:38,700 --> 00:21:40,766
想要的chunk是630B的
I wanted something that was 630

301
00:21:40,800 --> 00:21:46,800
在这个包含了630B的合适bin中找了
and so I went to the right bin that had the range that included 630

302
00:21:47,800 --> 00:21:55,400
但如果这个链表的第一个chunk小于 630B
but if the first chunk there is smaller when I first accessed the list

303
00:21:55,766 --> 00:21:59,200
如果第一个chunk小于630B
if that first chunk is smaller than 630

304
00:21:59,433 --> 00:22:05,166
我可以通过binmap数组
I can go to and use the fd_nextsize or bk_nextsize

305
00:22:05,300 --> 00:22:13,800
找到一个更大的最接近目标大小的非空bin
to jump up to the next larger free chunk in all of the large bins

306
00:22:13,933 --> 00:22:16,766
这样调用方不需要主动依次检查
and so I don't have to go and check

307
00:22:16,900 --> 00:22:21,200
576~640B，640~704B
576 to 640 then check 640 to 704

308
00:22:21,200 --> 00:22:22,700
哦，那个bin是空的
oh that one was empty

309
00:22:22,700 --> 00:22:24,966
然后再主动查看右边的
then go and check the next one right

310
00:22:25,100 --> 00:22:28,400
我们不需要主动去遍历所有的大小范围
I don't have to iterate through all of these size ranges

311
00:22:28,533 --> 00:22:30,400
只要去我需要的chunk所在的范围找一次
I go to the range that I need

312
00:22:30,800 --> 00:22:33,533
看看里面有没有
I see if there's anything there is

313
00:22:33,533 --> 00:22:38,100
如果有符合要求的
if what is there meets the size requirement

314
00:22:38,766 --> 00:22:39,400
很好
great

315
00:22:39,600 --> 00:22:43,800
如果没有符合要求的
if what is in that range doesn't meet the size requirement that is needed

316
00:22:43,800 --> 00:22:48,100
就用binmap找到合适的bin（没找到就去top了）
I can use these fd_nextsize and bk_nextsize pointer

317
00:22:48,133 --> 00:22:51,300
然后跳到合适的bin
to jump up to the next free size class

318
00:22:51,300 --> 00:22:53,533
这就是为什么需要binmap数组
and that's why those pointers are needed

319
00:22:55,800 --> 00:23:00,500
那如果malloc要的大小
so what happens if the chunk that is needed from malloc

320
00:23:00,500 --> 00:23:03,500
不在large bins里
the size isn't in the large bins

321
00:23:03,500 --> 00:23:04,766
这是完全有可能的
and that's totally reasonable

322
00:23:04,766 --> 00:23:07,566
进程启动时总有这种情况
this happens all the time when a program starts

323
00:23:07,700 --> 00:23:11,166
因为还没free过，这些bin都是空的
because we haven't freed stuff into all of these bins

324
00:23:11,566 --> 00:23:14,866
或malloc的太大，需要用mmap
or is the allocation so large that we need to mmap

325
00:23:15,066 --> 00:23:16,333
这是接下来的问题
it would be the next question

326
00:23:17,500 --> 00:23:21,300
chunk可能是用mmap获取的
well a chunk may get mmapped

327
00:23:21,400 --> 00:23:24,266
应该还记得有个M位
you'll recall that there was that m bit

328
00:23:24,566 --> 00:23:28,566
有A、M和P标志位
we said there was an A an M and a P flags

329
00:23:28,633 --> 00:23:32,133
这些标志位于size的最低3个有效位
and these flags were in the least significant bits of the size value

330
00:23:32,500 --> 00:23:36,866
M标志位表示chunk是否是通过mmap获取的
that m flag indicates that an allocation was mmapped

331
00:23:37,733 --> 00:23:40,200
如果一个chunk特别大
so if an allocation is exceptionally large

332
00:23:40,200 --> 00:23:47,300
对于动态分配器来说，mmap一个内存页更合理
it may make more sense to the dynamic allocator to mmap its own pages for the allocation

333
00:23:49,500 --> 00:23:53,733
相反如果malloc的大小合适
alternatively if it is a reasonable allocation size

334
00:23:54,666 --> 00:23:57,566
可以从wilderness中切一块下来
we can create the chunk from the wilderness

335
00:23:57,700 --> 00:24:06,300
wilderness是一大片内存，表示所有未使用过的堆内存
recall that the wilderness is a giant chunk that represents all free heap memory

336
00:24:06,533 --> 00:24:08,933
起始位置有一chunk
there is a giant chunk at the beginning

337
00:24:09,133 --> 00:24:10,500
被称为top
that's referred to as top

338
00:24:10,500 --> 00:24:12,800
底部还有一个chunk被称为 bottom
and then there's a chunk at the end that is bottom

339
00:24:12,800 --> 00:24:14,733
所以末尾有两个chunk
so you have two chunks at the end

340
00:24:14,733 --> 00:24:17,400
其它chunk可以被合并到top中
and so things can consolidate up into the top

341
00:24:17,600 --> 00:24:22,200
比如分配的第一个chunk可以合并到top
like the very first chunk that gets allocated could get consolidated into the top

342
00:24:24,200 --> 00:24:25,966
还有，wilderness
and then there's the wilderness

343
00:24:26,100 --> 00:24:31,100
它是所有未分配的内存空间
which is everything that has all of the memory space that has yet to be allocated

344
00:24:31,466 --> 00:24:34,833
malloc时
and so when we try and malloc something 

345
00:24:34,833 --> 00:24:39,100
如果所有bin中都没有合适的chunk
and there's no chunk that satisfies that need in any of the bins

346
00:24:39,100 --> 00:24:41,500
我们可以用wilderness创建一块
we can create it from the wilderness

347
00:24:41,666 --> 00:24:44,166
wilderness是在堆末尾的一片巨大内存
which is just a giant chunk that represents everything

348
00:24:44,166 --> 00:24:46,933
表示所有还未分配的内存
that hasn't been allocated at the end of the heap

349
00:24:48,000 --> 00:24:54,900
这大概是malloc时会发生的所有步骤
and so that is kind of the series of steps that can occur when malloc is called

